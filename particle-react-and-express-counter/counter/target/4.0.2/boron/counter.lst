
/Users/travisbumgarner/Programming/proof-of-concepts/particle-react-and-express-counter/counter/target/4.0.2/boron/counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000031f4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7210  000b7210  00007210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7234  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  2003e5d0  000b7238  0001e5d0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a0  2003e654  2003e654  0002e654  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b72bc  000b72bc  000272bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b72e4  000b72e4  000272e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000fbcd3  00000000  00000000  000272e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000f9d4  00000000  00000000  00122fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00038272  00000000  00000000  0013298f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002738  00000000  00000000  0016ac01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009ff0  00000000  00000000  0016d339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000319a3  00000000  00000000  00177329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000338c3  00000000  00000000  001a8ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001358b6  00000000  00000000  001dc58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000071dc  00000000  00000000  00311e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fce3 	bl	b69f8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fd05 	bl	b6a48 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5d0 	.word	0x2003e5d0
   b4048:	000b7238 	.word	0x000b7238
   b404c:	2003e654 	.word	0x2003e654
   b4050:	2003e654 	.word	0x2003e654
   b4054:	2003e7f1 	.word	0x2003e7f1

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 fc43 	bl	b68e8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b71e0 	.word	0x000b71e0
   b407c:	000b7204 	.word	0x000b7204

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b864 	b.w	b414c <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f86b 	bl	b4160 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 bbe3 	b.w	b6858 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bb23 	b.w	b46dc <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bb21 	b.w	b46dc <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bb27 	b.w	b46ec <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f000 fa4c 	bl	b4544 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b43e5 	.word	0x000b43e5
   b40b4:	000b6d9c 	.word	0x000b6d9c

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40c8:	4770      	bx	lr

000b40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ca:	6a00      	ldr	r0, [r0, #32]
   b40cc:	6803      	ldr	r3, [r0, #0]
   b40ce:	68db      	ldr	r3, [r3, #12]
   b40d0:	4718      	bx	r3
	...

000b40d4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b40d4:	4b0a      	ldr	r3, [pc, #40]	; (b4100 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b40d6:	b510      	push	{r4, lr}
   b40d8:	4604      	mov	r4, r0
   b40da:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b40dc:	f001 fa7a 	bl	b55d4 <_ZN5spark10LogManager8instanceEv>
   b40e0:	4621      	mov	r1, r4
   b40e2:	f001 fcb2 	bl	b5a4a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b40e6:	f002 fb6f 	bl	b67c8 <_Z16_fetch_usbserialv>
   b40ea:	f002 fb61 	bl	b67b0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b40ee:	4620      	mov	r0, r4
   b40f0:	4b04      	ldr	r3, [pc, #16]	; (b4104 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b40f2:	f840 3b04 	str.w	r3, [r0], #4
   b40f6:	f001 fb43 	bl	b5780 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b40fa:	4620      	mov	r0, r4
   b40fc:	bd10      	pop	{r4, pc}
   b40fe:	bf00      	nop
   b4100:	000b6df8 	.word	0x000b6df8
   b4104:	000b6de0 	.word	0x000b6de0

000b4108 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4108:	b510      	push	{r4, lr}
   b410a:	4604      	mov	r4, r0
    }
   b410c:	f7ff ffe2 	bl	b40d4 <_ZN5spark16SerialLogHandlerD1Ev>
   b4110:	4620      	mov	r0, r4
   b4112:	2124      	movs	r1, #36	; 0x24
   b4114:	f7ff ffc1 	bl	b409a <_ZdlPvj>
   b4118:	4620      	mov	r0, r4
   b411a:	bd10      	pop	{r4, pc}

000b411c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b411c:	b40e      	push	{r1, r2, r3}
   b411e:	b500      	push	{lr}
   b4120:	b08c      	sub	sp, #48	; 0x30
   b4122:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4124:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4128:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b412c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b412e:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4132:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4134:	6801      	ldr	r1, [r0, #0]
   b4136:	aa04      	add	r2, sp, #16
   b4138:	201e      	movs	r0, #30
    attr.flags = 0;
   b413a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b413e:	f000 fa09 	bl	b4554 <log_message_v>
}
   b4142:	b00c      	add	sp, #48	; 0x30
   b4144:	f85d eb04 	ldr.w	lr, [sp], #4
   b4148:	b003      	add	sp, #12
   b414a:	4770      	bx	lr

000b414c <setup>:

unsigned long lastPublishMs;

void setup()
{
}
   b414c:	4770      	bx	lr
	...

000b4150 <_Z5countv>:
}

int counter = 0;
int count()
{
    return counter++;
   b4150:	4b02      	ldr	r3, [pc, #8]	; (b415c <_Z5countv+0xc>)
   b4152:	6818      	ldr	r0, [r3, #0]
   b4154:	1c42      	adds	r2, r0, #1
   b4156:	601a      	str	r2, [r3, #0]
   b4158:	4770      	bx	lr
   b415a:	bf00      	nop
   b415c:	2003e658 	.word	0x2003e658

000b4160 <loop>:
{
   b4160:	b510      	push	{r4, lr}
    if (millis() - lastPublishMs >= publishPeriod.count())
   b4162:	4c23      	ldr	r4, [pc, #140]	; (b41f0 <loop+0x90>)
{
   b4164:	b088      	sub	sp, #32

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4166:	f000 f945 	bl	b43f4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - lastPublishMs >= publishPeriod.count())
   b416a:	6823      	ldr	r3, [r4, #0]
   b416c:	1ac0      	subs	r0, r0, r3
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
	{ return __r; }
   b416e:	4b21      	ldr	r3, [pc, #132]	; (b41f4 <loop+0x94>)
   b4170:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4174:	4290      	cmp	r0, r2
   b4176:	f04f 0200 	mov.w	r2, #0
   b417a:	eb72 0303 	sbcs.w	r3, r2, r3
   b417e:	db31      	blt.n	b41e4 <loop+0x84>
   b4180:	f000 f938 	bl	b43f4 <HAL_Timer_Get_Milli_Seconds>
        lastPublishMs = millis();
   b4184:	6020      	str	r0, [r4, #0]
        String eventData = String::format("%d", count());
   b4186:	f7ff ffe3 	bl	b4150 <_Z5countv>
   b418a:	491b      	ldr	r1, [pc, #108]	; (b41f8 <loop+0x98>)
   b418c:	4602      	mov	r2, r0
   b418e:	a804      	add	r0, sp, #16
   b4190:	f002 fa18 	bl	b65c4 <_ZN6String6formatEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4194:	f000 fa2a 	bl	b45ec <spark_cloud_flag_connected>
        if (Particle.connected())
   b4198:	b330      	cbz	r0, b41e8 <loop+0x88>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b419a:	4b18      	ldr	r3, [pc, #96]	; (b41fc <loop+0x9c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b419c:	4918      	ldr	r1, [pc, #96]	; (b4200 <loop+0xa0>)
   b419e:	781b      	ldrb	r3, [r3, #0]
   b41a0:	f88d 3000 	strb.w	r3, [sp]
   b41a4:	9a04      	ldr	r2, [sp, #16]
   b41a6:	6809      	ldr	r1, [r1, #0]
   b41a8:	233c      	movs	r3, #60	; 0x3c
   b41aa:	a802      	add	r0, sp, #8
   b41ac:	f000 fcbc 	bl	b4b28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b41b0:	9c03      	ldr	r4, [sp, #12]
   b41b2:	b17c      	cbz	r4, b41d4 <loop+0x74>
      if (--_M_use_count == 0)
   b41b4:	6863      	ldr	r3, [r4, #4]
   b41b6:	3b01      	subs	r3, #1
   b41b8:	6063      	str	r3, [r4, #4]
   b41ba:	b95b      	cbnz	r3, b41d4 <loop+0x74>
          _M_dispose();
   b41bc:	6823      	ldr	r3, [r4, #0]
   b41be:	4620      	mov	r0, r4
   b41c0:	689b      	ldr	r3, [r3, #8]
   b41c2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b41c4:	68a3      	ldr	r3, [r4, #8]
   b41c6:	3b01      	subs	r3, #1
   b41c8:	60a3      	str	r3, [r4, #8]
   b41ca:	b91b      	cbnz	r3, b41d4 <loop+0x74>
            _M_destroy();
   b41cc:	6823      	ldr	r3, [r4, #0]
   b41ce:	4620      	mov	r0, r4
   b41d0:	68db      	ldr	r3, [r3, #12]
   b41d2:	4798      	blx	r3
            Log.info("published %s", eventData.c_str());
   b41d4:	9a04      	ldr	r2, [sp, #16]
   b41d6:	490b      	ldr	r1, [pc, #44]	; (b4204 <loop+0xa4>)
            Log.info("not cloud connected %s", eventData.c_str());
   b41d8:	480b      	ldr	r0, [pc, #44]	; (b4208 <loop+0xa8>)
   b41da:	f7ff ff9f 	bl	b411c <_ZNK5spark6Logger4infoEPKcz>
        String eventData = String::format("%d", count());
   b41de:	a804      	add	r0, sp, #16
   b41e0:	f002 f94e 	bl	b6480 <_ZN6StringD1Ev>
}
   b41e4:	b008      	add	sp, #32
   b41e6:	bd10      	pop	{r4, pc}
            Log.info("not cloud connected %s", eventData.c_str());
   b41e8:	9a04      	ldr	r2, [sp, #16]
   b41ea:	4908      	ldr	r1, [pc, #32]	; (b420c <loop+0xac>)
   b41ec:	e7f4      	b.n	b41d8 <loop+0x78>
   b41ee:	bf00      	nop
   b41f0:	2003e65c 	.word	0x2003e65c
   b41f4:	2003e5d8 	.word	0x2003e5d8
   b41f8:	000b6db1 	.word	0x000b6db1
   b41fc:	2003e654 	.word	0x2003e654
   b4200:	2003e5d0 	.word	0x2003e5d0
   b4204:	000b6db4 	.word	0x000b6db4
   b4208:	2003e6cc 	.word	0x2003e6cc
   b420c:	000b6dc1 	.word	0x000b6dc1

000b4210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4210:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4212:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4216:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4218:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b421a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b421e:	42ae      	cmp	r6, r5
   b4220:	d004      	beq.n	b422c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4222:	4628      	mov	r0, r5
   b4224:	f002 f92c 	bl	b6480 <_ZN6StringD1Ev>
   b4228:	3514      	adds	r5, #20
   b422a:	e7f8      	b.n	b421e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b422c:	6820      	ldr	r0, [r4, #0]
   b422e:	f000 fa5d 	bl	b46ec <free>
    AllocatorT::free(data_);
}
   b4232:	4620      	mov	r0, r4
   b4234:	bd70      	pop	{r4, r5, r6, pc}

000b4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4236:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b423a:	4604      	mov	r4, r0
   b423c:	460d      	mov	r5, r1
   b423e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4240:	d916      	bls.n	b4270 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4242:	4290      	cmp	r0, r2
   b4244:	d215      	bcs.n	b4272 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4246:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b424a:	1a75      	subs	r5, r6, r1
   b424c:	f1a1 0714 	sub.w	r7, r1, #20
   b4250:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4252:	42b7      	cmp	r7, r6
   b4254:	d01c      	beq.n	b4290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4256:	b12c      	cbz	r4, b4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4258:	4631      	mov	r1, r6
   b425a:	4620      	mov	r0, r4
   b425c:	f002 f98c 	bl	b6578 <_ZN6StringC1EOS_>
   b4260:	7c33      	ldrb	r3, [r6, #16]
   b4262:	7423      	strb	r3, [r4, #16]
   b4264:	4630      	mov	r0, r6
   b4266:	f002 f90b 	bl	b6480 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b426a:	3e14      	subs	r6, #20
   b426c:	3c14      	subs	r4, #20
   b426e:	e7f0      	b.n	b4252 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4270:	d00e      	beq.n	b4290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4272:	42b5      	cmp	r5, r6
   b4274:	d00c      	beq.n	b4290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4276:	b12c      	cbz	r4, b4284 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4278:	4629      	mov	r1, r5
   b427a:	4620      	mov	r0, r4
   b427c:	f002 f97c 	bl	b6578 <_ZN6StringC1EOS_>
   b4280:	7c2b      	ldrb	r3, [r5, #16]
   b4282:	7423      	strb	r3, [r4, #16]
   b4284:	4628      	mov	r0, r5
   b4286:	f002 f8fb 	bl	b6480 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b428a:	3514      	adds	r5, #20
   b428c:	3414      	adds	r4, #20
   b428e:	e7f0      	b.n	b4272 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4292 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4296:	2300      	movs	r3, #0
   b4298:	e9c0 3300 	strd	r3, r3, [r0]
   b429c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b429e:	684f      	ldr	r7, [r1, #4]
   b42a0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42a2:	4604      	mov	r4, r0
   b42a4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42a6:	dd23      	ble.n	b42f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b42a8:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b42ac:	fb08 f007 	mul.w	r0, r8, r7
   b42b0:	f000 fa14 	bl	b46dc <malloc>
            if (!d) {
   b42b4:	4605      	mov	r5, r0
   b42b6:	b1d8      	cbz	r0, b42f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b42b8:	e9d4 1200 	ldrd	r1, r2, [r4]
   b42bc:	fb08 1202 	mla	r2, r8, r2, r1
   b42c0:	f7ff ffb9 	bl	b4236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b42c4:	6820      	ldr	r0, [r4, #0]
   b42c6:	f000 fa11 	bl	b46ec <free>
        data_ = d;
   b42ca:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b42cc:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b42ce:	e9d6 7300 	ldrd	r7, r3, [r6]
   b42d2:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b42d6:	45b8      	cmp	r8, r7
   b42d8:	d008      	beq.n	b42ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b42da:	4639      	mov	r1, r7
   b42dc:	4628      	mov	r0, r5
   b42de:	f002 f965 	bl	b65ac <_ZN6StringC1ERKS_>
   b42e2:	7c3b      	ldrb	r3, [r7, #16]
   b42e4:	742b      	strb	r3, [r5, #16]
   b42e6:	3714      	adds	r7, #20
   b42e8:	3514      	adds	r5, #20
   b42ea:	e7f4      	b.n	b42d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b42ec:	6873      	ldr	r3, [r6, #4]
   b42ee:	6063      	str	r3, [r4, #4]
}
   b42f0:	4620      	mov	r0, r4
   b42f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b42f8 <_GLOBAL__sub_I_logHandler>:
   b42f8:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b42fa:	4b21      	ldr	r3, [pc, #132]	; (b4380 <_GLOBAL__sub_I_logHandler+0x88>)
   b42fc:	b08c      	sub	sp, #48	; 0x30
   b42fe:	2400      	movs	r4, #0
   b4300:	701c      	strb	r4, [r3, #0]
SYSTEM_THREAD(ENABLED);      // Code Runs even with no connection
   b4302:	4621      	mov	r1, r4
   b4304:	2001      	movs	r0, #1
   b4306:	f000 f945 	bl	b4594 <system_thread_set_state>
        capacity_(0) {
   b430a:	e9cd 4400 	strd	r4, r4, [sp]
   b430e:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4310:	f002 fa5a 	bl	b67c8 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4314:	4c1b      	ldr	r4, [pc, #108]	; (b4384 <_GLOBAL__sub_I_logHandler+0x8c>)
   b4316:	4605      	mov	r5, r0
   b4318:	4669      	mov	r1, sp
   b431a:	a803      	add	r0, sp, #12
   b431c:	f7ff ffb9 	bl	b4292 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4320:	4626      	mov	r6, r4
        stream_(&stream) {
   b4322:	a903      	add	r1, sp, #12
   b4324:	a806      	add	r0, sp, #24
   b4326:	f7ff ffb4 	bl	b4292 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b432a:	4b17      	ldr	r3, [pc, #92]	; (b4388 <_GLOBAL__sub_I_logHandler+0x90>)
   b432c:	f846 3b04 	str.w	r3, [r6], #4
   b4330:	a906      	add	r1, sp, #24
   b4332:	a809      	add	r0, sp, #36	; 0x24
   b4334:	f7ff ffad 	bl	b4292 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4338:	aa09      	add	r2, sp, #36	; 0x24
   b433a:	211e      	movs	r1, #30
   b433c:	4630      	mov	r0, r6
   b433e:	f001 fc67 	bl	b5c10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4342:	a809      	add	r0, sp, #36	; 0x24
   b4344:	f7ff ff64 	bl	b4210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4348:	a806      	add	r0, sp, #24
   b434a:	f7ff ff61 	bl	b4210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b434e:	4b0f      	ldr	r3, [pc, #60]	; (b438c <_GLOBAL__sub_I_logHandler+0x94>)
   b4350:	6023      	str	r3, [r4, #0]
   b4352:	6225      	str	r5, [r4, #32]
   b4354:	a803      	add	r0, sp, #12
   b4356:	f7ff ff5b 	bl	b4210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b435a:	4b0d      	ldr	r3, [pc, #52]	; (b4390 <_GLOBAL__sub_I_logHandler+0x98>)
   b435c:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b435e:	f002 fa33 	bl	b67c8 <_Z16_fetch_usbserialv>
   b4362:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4366:	f002 fa1f 	bl	b67a8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b436a:	f001 f933 	bl	b55d4 <_ZN5spark10LogManager8instanceEv>
   b436e:	4621      	mov	r1, r4
   b4370:	f001 fb24 	bl	b59bc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler; // This allows for USB serial debug logs
   b4374:	4668      	mov	r0, sp
   b4376:	f7ff ff4b 	bl	b4210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b437a:	b00c      	add	sp, #48	; 0x30
   b437c:	bd70      	pop	{r4, r5, r6, pc}
   b437e:	bf00      	nop
   b4380:	2003e654 	.word	0x2003e654
   b4384:	2003e660 	.word	0x2003e660
   b4388:	000b6de0 	.word	0x000b6de0
   b438c:	000b6f5c 	.word	0x000b6f5c
   b4390:	000b6df8 	.word	0x000b6df8

000b4394 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4394:	b508      	push	{r3, lr}
   b4396:	4b02      	ldr	r3, [pc, #8]	; (b43a0 <os_mutex_recursive_create+0xc>)
   b4398:	681b      	ldr	r3, [r3, #0]
   b439a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b439c:	9301      	str	r3, [sp, #4]
   b439e:	bd08      	pop	{r3, pc}
   b43a0:	00030248 	.word	0x00030248

000b43a4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b43a4:	b508      	push	{r3, lr}
   b43a6:	4b02      	ldr	r3, [pc, #8]	; (b43b0 <os_mutex_recursive_destroy+0xc>)
   b43a8:	681b      	ldr	r3, [r3, #0]
   b43aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b43ac:	9301      	str	r3, [sp, #4]
   b43ae:	bd08      	pop	{r3, pc}
   b43b0:	00030248 	.word	0x00030248

000b43b4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b43b4:	b508      	push	{r3, lr}
   b43b6:	4b02      	ldr	r3, [pc, #8]	; (b43c0 <os_mutex_recursive_lock+0xc>)
   b43b8:	681b      	ldr	r3, [r3, #0]
   b43ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b43bc:	9301      	str	r3, [sp, #4]
   b43be:	bd08      	pop	{r3, pc}
   b43c0:	00030248 	.word	0x00030248

000b43c4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b43c4:	b508      	push	{r3, lr}
   b43c6:	4b02      	ldr	r3, [pc, #8]	; (b43d0 <os_mutex_recursive_unlock+0xc>)
   b43c8:	681b      	ldr	r3, [r3, #0]
   b43ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b43cc:	9301      	str	r3, [sp, #4]
   b43ce:	bd08      	pop	{r3, pc}
   b43d0:	00030248 	.word	0x00030248

000b43d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b43d4:	b508      	push	{r3, lr}
   b43d6:	4b02      	ldr	r3, [pc, #8]	; (b43e0 <HAL_RNG_GetRandomNumber+0xc>)
   b43d8:	681b      	ldr	r3, [r3, #0]
   b43da:	685b      	ldr	r3, [r3, #4]
   b43dc:	9301      	str	r3, [sp, #4]
   b43de:	bd08      	pop	{r3, pc}
   b43e0:	00030218 	.word	0x00030218

000b43e4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b43e4:	b508      	push	{r3, lr}
   b43e6:	4b02      	ldr	r3, [pc, #8]	; (b43f0 <HAL_Delay_Microseconds+0xc>)
   b43e8:	681b      	ldr	r3, [r3, #0]
   b43ea:	68db      	ldr	r3, [r3, #12]
   b43ec:	9301      	str	r3, [sp, #4]
   b43ee:	bd08      	pop	{r3, pc}
   b43f0:	00030218 	.word	0x00030218

000b43f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b43f4:	b508      	push	{r3, lr}
   b43f6:	4b02      	ldr	r3, [pc, #8]	; (b4400 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b43f8:	681b      	ldr	r3, [r3, #0]
   b43fa:	695b      	ldr	r3, [r3, #20]
   b43fc:	9301      	str	r3, [sp, #4]
   b43fe:	bd08      	pop	{r3, pc}
   b4400:	00030218 	.word	0x00030218

000b4404 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4404:	b508      	push	{r3, lr}
   b4406:	4b02      	ldr	r3, [pc, #8]	; (b4410 <inet_inet_ntop+0xc>)
   b4408:	681b      	ldr	r3, [r3, #0]
   b440a:	695b      	ldr	r3, [r3, #20]
   b440c:	9301      	str	r3, [sp, #4]
   b440e:	bd08      	pop	{r3, pc}
   b4410:	00030264 	.word	0x00030264

000b4414 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4414:	b508      	push	{r3, lr}
   b4416:	4b02      	ldr	r3, [pc, #8]	; (b4420 <netdb_freeaddrinfo+0xc>)
   b4418:	681b      	ldr	r3, [r3, #0]
   b441a:	689b      	ldr	r3, [r3, #8]
   b441c:	9301      	str	r3, [sp, #4]
   b441e:	bd08      	pop	{r3, pc}
   b4420:	00030268 	.word	0x00030268

000b4424 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4424:	b508      	push	{r3, lr}
   b4426:	4b02      	ldr	r3, [pc, #8]	; (b4430 <netdb_getaddrinfo+0xc>)
   b4428:	681b      	ldr	r3, [r3, #0]
   b442a:	68db      	ldr	r3, [r3, #12]
   b442c:	9301      	str	r3, [sp, #4]
   b442e:	bd08      	pop	{r3, pc}
   b4430:	00030268 	.word	0x00030268

000b4434 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4434:	b508      	push	{r3, lr}
   b4436:	4b02      	ldr	r3, [pc, #8]	; (b4440 <hal_usart_end+0xc>)
   b4438:	681b      	ldr	r3, [r3, #0]
   b443a:	689b      	ldr	r3, [r3, #8]
   b443c:	9301      	str	r3, [sp, #4]
   b443e:	bd08      	pop	{r3, pc}
   b4440:	0003023c 	.word	0x0003023c

000b4444 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4444:	b508      	push	{r3, lr}
   b4446:	4b02      	ldr	r3, [pc, #8]	; (b4450 <hal_usart_write+0xc>)
   b4448:	681b      	ldr	r3, [r3, #0]
   b444a:	68db      	ldr	r3, [r3, #12]
   b444c:	9301      	str	r3, [sp, #4]
   b444e:	bd08      	pop	{r3, pc}
   b4450:	0003023c 	.word	0x0003023c

000b4454 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4454:	b508      	push	{r3, lr}
   b4456:	4b02      	ldr	r3, [pc, #8]	; (b4460 <hal_usart_available+0xc>)
   b4458:	681b      	ldr	r3, [r3, #0]
   b445a:	691b      	ldr	r3, [r3, #16]
   b445c:	9301      	str	r3, [sp, #4]
   b445e:	bd08      	pop	{r3, pc}
   b4460:	0003023c 	.word	0x0003023c

000b4464 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4464:	b508      	push	{r3, lr}
   b4466:	4b02      	ldr	r3, [pc, #8]	; (b4470 <hal_usart_read+0xc>)
   b4468:	681b      	ldr	r3, [r3, #0]
   b446a:	695b      	ldr	r3, [r3, #20]
   b446c:	9301      	str	r3, [sp, #4]
   b446e:	bd08      	pop	{r3, pc}
   b4470:	0003023c 	.word	0x0003023c

000b4474 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4474:	b508      	push	{r3, lr}
   b4476:	4b02      	ldr	r3, [pc, #8]	; (b4480 <hal_usart_peek+0xc>)
   b4478:	681b      	ldr	r3, [r3, #0]
   b447a:	699b      	ldr	r3, [r3, #24]
   b447c:	9301      	str	r3, [sp, #4]
   b447e:	bd08      	pop	{r3, pc}
   b4480:	0003023c 	.word	0x0003023c

000b4484 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4484:	b508      	push	{r3, lr}
   b4486:	4b02      	ldr	r3, [pc, #8]	; (b4490 <hal_usart_flush+0xc>)
   b4488:	681b      	ldr	r3, [r3, #0]
   b448a:	69db      	ldr	r3, [r3, #28]
   b448c:	9301      	str	r3, [sp, #4]
   b448e:	bd08      	pop	{r3, pc}
   b4490:	0003023c 	.word	0x0003023c

000b4494 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4494:	b508      	push	{r3, lr}
   b4496:	4b02      	ldr	r3, [pc, #8]	; (b44a0 <hal_usart_available_data_for_write+0xc>)
   b4498:	681b      	ldr	r3, [r3, #0]
   b449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b449c:	9301      	str	r3, [sp, #4]
   b449e:	bd08      	pop	{r3, pc}
   b44a0:	0003023c 	.word	0x0003023c

000b44a4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b44a4:	b508      	push	{r3, lr}
   b44a6:	4b02      	ldr	r3, [pc, #8]	; (b44b0 <hal_usart_begin_config+0xc>)
   b44a8:	681b      	ldr	r3, [r3, #0]
   b44aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b44ac:	9301      	str	r3, [sp, #4]
   b44ae:	bd08      	pop	{r3, pc}
   b44b0:	0003023c 	.word	0x0003023c

000b44b4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b44b4:	b508      	push	{r3, lr}
   b44b6:	4b02      	ldr	r3, [pc, #8]	; (b44c0 <hal_usart_init_ex+0xc>)
   b44b8:	681b      	ldr	r3, [r3, #0]
   b44ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b44bc:	9301      	str	r3, [sp, #4]
   b44be:	bd08      	pop	{r3, pc}
   b44c0:	0003023c 	.word	0x0003023c

000b44c4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b44c4:	b508      	push	{r3, lr}
   b44c6:	4b02      	ldr	r3, [pc, #8]	; (b44d0 <HAL_USB_USART_Init+0xc>)
   b44c8:	681b      	ldr	r3, [r3, #0]
   b44ca:	681b      	ldr	r3, [r3, #0]
   b44cc:	9301      	str	r3, [sp, #4]
   b44ce:	bd08      	pop	{r3, pc}
   b44d0:	0003024c 	.word	0x0003024c

000b44d4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b44d4:	b508      	push	{r3, lr}
   b44d6:	4b02      	ldr	r3, [pc, #8]	; (b44e0 <HAL_USB_USART_Begin+0xc>)
   b44d8:	681b      	ldr	r3, [r3, #0]
   b44da:	685b      	ldr	r3, [r3, #4]
   b44dc:	9301      	str	r3, [sp, #4]
   b44de:	bd08      	pop	{r3, pc}
   b44e0:	0003024c 	.word	0x0003024c

000b44e4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b44e4:	b508      	push	{r3, lr}
   b44e6:	4b02      	ldr	r3, [pc, #8]	; (b44f0 <HAL_USB_USART_End+0xc>)
   b44e8:	681b      	ldr	r3, [r3, #0]
   b44ea:	689b      	ldr	r3, [r3, #8]
   b44ec:	9301      	str	r3, [sp, #4]
   b44ee:	bd08      	pop	{r3, pc}
   b44f0:	0003024c 	.word	0x0003024c

000b44f4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b44f4:	b508      	push	{r3, lr}
   b44f6:	4b02      	ldr	r3, [pc, #8]	; (b4500 <HAL_USB_USART_Available_Data+0xc>)
   b44f8:	681b      	ldr	r3, [r3, #0]
   b44fa:	691b      	ldr	r3, [r3, #16]
   b44fc:	9301      	str	r3, [sp, #4]
   b44fe:	bd08      	pop	{r3, pc}
   b4500:	0003024c 	.word	0x0003024c

000b4504 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4504:	b508      	push	{r3, lr}
   b4506:	4b02      	ldr	r3, [pc, #8]	; (b4510 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4508:	681b      	ldr	r3, [r3, #0]
   b450a:	695b      	ldr	r3, [r3, #20]
   b450c:	9301      	str	r3, [sp, #4]
   b450e:	bd08      	pop	{r3, pc}
   b4510:	0003024c 	.word	0x0003024c

000b4514 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4514:	b508      	push	{r3, lr}
   b4516:	4b02      	ldr	r3, [pc, #8]	; (b4520 <HAL_USB_USART_Receive_Data+0xc>)
   b4518:	681b      	ldr	r3, [r3, #0]
   b451a:	699b      	ldr	r3, [r3, #24]
   b451c:	9301      	str	r3, [sp, #4]
   b451e:	bd08      	pop	{r3, pc}
   b4520:	0003024c 	.word	0x0003024c

000b4524 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4524:	b508      	push	{r3, lr}
   b4526:	4b02      	ldr	r3, [pc, #8]	; (b4530 <HAL_USB_USART_Send_Data+0xc>)
   b4528:	681b      	ldr	r3, [r3, #0]
   b452a:	69db      	ldr	r3, [r3, #28]
   b452c:	9301      	str	r3, [sp, #4]
   b452e:	bd08      	pop	{r3, pc}
   b4530:	0003024c 	.word	0x0003024c

000b4534 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4534:	b508      	push	{r3, lr}
   b4536:	4b02      	ldr	r3, [pc, #8]	; (b4540 <HAL_USB_USART_Flush_Data+0xc>)
   b4538:	681b      	ldr	r3, [r3, #0]
   b453a:	6a1b      	ldr	r3, [r3, #32]
   b453c:	9301      	str	r3, [sp, #4]
   b453e:	bd08      	pop	{r3, pc}
   b4540:	0003024c 	.word	0x0003024c

000b4544 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4544:	b508      	push	{r3, lr}
   b4546:	4b02      	ldr	r3, [pc, #8]	; (b4550 <panic_+0xc>)
   b4548:	681b      	ldr	r3, [r3, #0]
   b454a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b454c:	9301      	str	r3, [sp, #4]
   b454e:	bd08      	pop	{r3, pc}
   b4550:	00030260 	.word	0x00030260

000b4554 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b4554:	b508      	push	{r3, lr}
   b4556:	4b02      	ldr	r3, [pc, #8]	; (b4560 <log_message_v+0xc>)
   b4558:	681b      	ldr	r3, [r3, #0]
   b455a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b455c:	9301      	str	r3, [sp, #4]
   b455e:	bd08      	pop	{r3, pc}
   b4560:	00030260 	.word	0x00030260

000b4564 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b4564:	b508      	push	{r3, lr}
   b4566:	4b02      	ldr	r3, [pc, #8]	; (b4570 <log_level_name+0xc>)
   b4568:	681b      	ldr	r3, [r3, #0]
   b456a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b456c:	9301      	str	r3, [sp, #4]
   b456e:	bd08      	pop	{r3, pc}
   b4570:	00030260 	.word	0x00030260

000b4574 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b4574:	b508      	push	{r3, lr}
   b4576:	4b02      	ldr	r3, [pc, #8]	; (b4580 <log_set_callbacks+0xc>)
   b4578:	681b      	ldr	r3, [r3, #0]
   b457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b457c:	9301      	str	r3, [sp, #4]
   b457e:	bd08      	pop	{r3, pc}
   b4580:	00030260 	.word	0x00030260

000b4584 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4584:	b508      	push	{r3, lr}
   b4586:	4b02      	ldr	r3, [pc, #8]	; (b4590 <set_system_mode+0xc>)
   b4588:	681b      	ldr	r3, [r3, #0]
   b458a:	685b      	ldr	r3, [r3, #4]
   b458c:	9301      	str	r3, [sp, #4]
   b458e:	bd08      	pop	{r3, pc}
   b4590:	00030220 	.word	0x00030220

000b4594 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4594:	b508      	push	{r3, lr}
   b4596:	4b02      	ldr	r3, [pc, #8]	; (b45a0 <system_thread_set_state+0xc>)
   b4598:	681b      	ldr	r3, [r3, #0]
   b459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b459c:	9301      	str	r3, [sp, #4]
   b459e:	bd08      	pop	{r3, pc}
   b45a0:	00030220 	.word	0x00030220

000b45a4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b45a4:	b508      	push	{r3, lr}
   b45a6:	4b02      	ldr	r3, [pc, #8]	; (b45b0 <application_thread_current+0xc>)
   b45a8:	681b      	ldr	r3, [r3, #0]
   b45aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b45ac:	9301      	str	r3, [sp, #4]
   b45ae:	bd08      	pop	{r3, pc}
   b45b0:	00030220 	.word	0x00030220

000b45b4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b45b4:	b508      	push	{r3, lr}
   b45b6:	4b02      	ldr	r3, [pc, #8]	; (b45c0 <application_thread_invoke+0xc>)
   b45b8:	681b      	ldr	r3, [r3, #0]
   b45ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b45bc:	9301      	str	r3, [sp, #4]
   b45be:	bd08      	pop	{r3, pc}
   b45c0:	00030220 	.word	0x00030220

000b45c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b45c4:	b508      	push	{r3, lr}
   b45c6:	4b03      	ldr	r3, [pc, #12]	; (b45d4 <system_ctrl_set_app_request_handler+0x10>)
   b45c8:	681b      	ldr	r3, [r3, #0]
   b45ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b45ce:	9301      	str	r3, [sp, #4]
   b45d0:	bd08      	pop	{r3, pc}
   b45d2:	0000      	.short	0x0000
   b45d4:	00030220 	.word	0x00030220

000b45d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b45d8:	b508      	push	{r3, lr}
   b45da:	4b03      	ldr	r3, [pc, #12]	; (b45e8 <system_ctrl_set_result+0x10>)
   b45dc:	681b      	ldr	r3, [r3, #0]
   b45de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b45e2:	9301      	str	r3, [sp, #4]
   b45e4:	bd08      	pop	{r3, pc}
   b45e6:	0000      	.short	0x0000
   b45e8:	00030220 	.word	0x00030220

000b45ec <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b45ec:	b508      	push	{r3, lr}
   b45ee:	4b02      	ldr	r3, [pc, #8]	; (b45f8 <spark_cloud_flag_connected+0xc>)
   b45f0:	681b      	ldr	r3, [r3, #0]
   b45f2:	695b      	ldr	r3, [r3, #20]
   b45f4:	9301      	str	r3, [sp, #4]
   b45f6:	bd08      	pop	{r3, pc}
   b45f8:	00030244 	.word	0x00030244

000b45fc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b45fc:	b508      	push	{r3, lr}
   b45fe:	4b02      	ldr	r3, [pc, #8]	; (b4608 <spark_send_event+0xc>)
   b4600:	681b      	ldr	r3, [r3, #0]
   b4602:	6a1b      	ldr	r3, [r3, #32]
   b4604:	9301      	str	r3, [sp, #4]
   b4606:	bd08      	pop	{r3, pc}
   b4608:	00030244 	.word	0x00030244

000b460c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b460c:	b508      	push	{r3, lr}
   b460e:	4b02      	ldr	r3, [pc, #8]	; (b4618 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4610:	681b      	ldr	r3, [r3, #0]
   b4612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4614:	9301      	str	r3, [sp, #4]
   b4616:	bd08      	pop	{r3, pc}
   b4618:	00030244 	.word	0x00030244

000b461c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b461c:	b508      	push	{r3, lr}
   b461e:	4b02      	ldr	r3, [pc, #8]	; (b4628 <network_connect+0xc>)
   b4620:	681b      	ldr	r3, [r3, #0]
   b4622:	685b      	ldr	r3, [r3, #4]
   b4624:	9301      	str	r3, [sp, #4]
   b4626:	bd08      	pop	{r3, pc}
   b4628:	00030240 	.word	0x00030240

000b462c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b462c:	b508      	push	{r3, lr}
   b462e:	4b02      	ldr	r3, [pc, #8]	; (b4638 <network_connecting+0xc>)
   b4630:	681b      	ldr	r3, [r3, #0]
   b4632:	689b      	ldr	r3, [r3, #8]
   b4634:	9301      	str	r3, [sp, #4]
   b4636:	bd08      	pop	{r3, pc}
   b4638:	00030240 	.word	0x00030240

000b463c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b463c:	b508      	push	{r3, lr}
   b463e:	4b02      	ldr	r3, [pc, #8]	; (b4648 <network_disconnect+0xc>)
   b4640:	681b      	ldr	r3, [r3, #0]
   b4642:	68db      	ldr	r3, [r3, #12]
   b4644:	9301      	str	r3, [sp, #4]
   b4646:	bd08      	pop	{r3, pc}
   b4648:	00030240 	.word	0x00030240

000b464c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b464c:	b508      	push	{r3, lr}
   b464e:	4b02      	ldr	r3, [pc, #8]	; (b4658 <network_ready+0xc>)
   b4650:	681b      	ldr	r3, [r3, #0]
   b4652:	691b      	ldr	r3, [r3, #16]
   b4654:	9301      	str	r3, [sp, #4]
   b4656:	bd08      	pop	{r3, pc}
   b4658:	00030240 	.word	0x00030240

000b465c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b465c:	b508      	push	{r3, lr}
   b465e:	4b02      	ldr	r3, [pc, #8]	; (b4668 <network_on+0xc>)
   b4660:	681b      	ldr	r3, [r3, #0]
   b4662:	695b      	ldr	r3, [r3, #20]
   b4664:	9301      	str	r3, [sp, #4]
   b4666:	bd08      	pop	{r3, pc}
   b4668:	00030240 	.word	0x00030240

000b466c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b466c:	b508      	push	{r3, lr}
   b466e:	4b02      	ldr	r3, [pc, #8]	; (b4678 <network_off+0xc>)
   b4670:	681b      	ldr	r3, [r3, #0]
   b4672:	699b      	ldr	r3, [r3, #24]
   b4674:	9301      	str	r3, [sp, #4]
   b4676:	bd08      	pop	{r3, pc}
   b4678:	00030240 	.word	0x00030240

000b467c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b467c:	b508      	push	{r3, lr}
   b467e:	4b02      	ldr	r3, [pc, #8]	; (b4688 <network_listen+0xc>)
   b4680:	681b      	ldr	r3, [r3, #0]
   b4682:	69db      	ldr	r3, [r3, #28]
   b4684:	9301      	str	r3, [sp, #4]
   b4686:	bd08      	pop	{r3, pc}
   b4688:	00030240 	.word	0x00030240

000b468c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b468c:	b508      	push	{r3, lr}
   b468e:	4b02      	ldr	r3, [pc, #8]	; (b4698 <network_listening+0xc>)
   b4690:	681b      	ldr	r3, [r3, #0]
   b4692:	6a1b      	ldr	r3, [r3, #32]
   b4694:	9301      	str	r3, [sp, #4]
   b4696:	bd08      	pop	{r3, pc}
   b4698:	00030240 	.word	0x00030240

000b469c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b469c:	b508      	push	{r3, lr}
   b469e:	4b02      	ldr	r3, [pc, #8]	; (b46a8 <network_set_listen_timeout+0xc>)
   b46a0:	681b      	ldr	r3, [r3, #0]
   b46a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b46a4:	9301      	str	r3, [sp, #4]
   b46a6:	bd08      	pop	{r3, pc}
   b46a8:	00030240 	.word	0x00030240

000b46ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b46ac:	b508      	push	{r3, lr}
   b46ae:	4b02      	ldr	r3, [pc, #8]	; (b46b8 <network_get_listen_timeout+0xc>)
   b46b0:	681b      	ldr	r3, [r3, #0]
   b46b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b46b4:	9301      	str	r3, [sp, #4]
   b46b6:	bd08      	pop	{r3, pc}
   b46b8:	00030240 	.word	0x00030240

000b46bc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b46bc:	b508      	push	{r3, lr}
   b46be:	4b02      	ldr	r3, [pc, #8]	; (b46c8 <network_is_on+0xc>)
   b46c0:	681b      	ldr	r3, [r3, #0]
   b46c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46c4:	9301      	str	r3, [sp, #4]
   b46c6:	bd08      	pop	{r3, pc}
   b46c8:	00030240 	.word	0x00030240

000b46cc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b46cc:	b508      	push	{r3, lr}
   b46ce:	4b02      	ldr	r3, [pc, #8]	; (b46d8 <network_is_off+0xc>)
   b46d0:	681b      	ldr	r3, [r3, #0]
   b46d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b46d4:	9301      	str	r3, [sp, #4]
   b46d6:	bd08      	pop	{r3, pc}
   b46d8:	00030240 	.word	0x00030240

000b46dc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b46dc:	b508      	push	{r3, lr}
   b46de:	4b02      	ldr	r3, [pc, #8]	; (b46e8 <malloc+0xc>)
   b46e0:	681b      	ldr	r3, [r3, #0]
   b46e2:	681b      	ldr	r3, [r3, #0]
   b46e4:	9301      	str	r3, [sp, #4]
   b46e6:	bd08      	pop	{r3, pc}
   b46e8:	0003021c 	.word	0x0003021c

000b46ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b46ec:	b508      	push	{r3, lr}
   b46ee:	4b02      	ldr	r3, [pc, #8]	; (b46f8 <free+0xc>)
   b46f0:	681b      	ldr	r3, [r3, #0]
   b46f2:	685b      	ldr	r3, [r3, #4]
   b46f4:	9301      	str	r3, [sp, #4]
   b46f6:	bd08      	pop	{r3, pc}
   b46f8:	0003021c 	.word	0x0003021c

000b46fc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b46fc:	b508      	push	{r3, lr}
   b46fe:	4b02      	ldr	r3, [pc, #8]	; (b4708 <realloc+0xc>)
   b4700:	681b      	ldr	r3, [r3, #0]
   b4702:	689b      	ldr	r3, [r3, #8]
   b4704:	9301      	str	r3, [sp, #4]
   b4706:	bd08      	pop	{r3, pc}
   b4708:	0003021c 	.word	0x0003021c

000b470c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b470c:	b508      	push	{r3, lr}
   b470e:	4b02      	ldr	r3, [pc, #8]	; (b4718 <vsnprintf+0xc>)
   b4710:	681b      	ldr	r3, [r3, #0]
   b4712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4714:	9301      	str	r3, [sp, #4]
   b4716:	bd08      	pop	{r3, pc}
   b4718:	0003021c 	.word	0x0003021c

000b471c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b471c:	b508      	push	{r3, lr}
   b471e:	4b02      	ldr	r3, [pc, #8]	; (b4728 <abort+0xc>)
   b4720:	681b      	ldr	r3, [r3, #0]
   b4722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4724:	9301      	str	r3, [sp, #4]
   b4726:	bd08      	pop	{r3, pc}
   b4728:	0003021c 	.word	0x0003021c

000b472c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b472c:	b508      	push	{r3, lr}
   b472e:	4b02      	ldr	r3, [pc, #8]	; (b4738 <_malloc_r+0xc>)
   b4730:	681b      	ldr	r3, [r3, #0]
   b4732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4734:	9301      	str	r3, [sp, #4]
   b4736:	bd08      	pop	{r3, pc}
   b4738:	0003021c 	.word	0x0003021c

000b473c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b473c:	b508      	push	{r3, lr}
   b473e:	4b02      	ldr	r3, [pc, #8]	; (b4748 <__errno+0xc>)
   b4740:	681b      	ldr	r3, [r3, #0]
   b4742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4744:	9301      	str	r3, [sp, #4]
   b4746:	bd08      	pop	{r3, pc}
   b4748:	0003021c 	.word	0x0003021c

000b474c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b474c:	b508      	push	{r3, lr}
   b474e:	4b02      	ldr	r3, [pc, #8]	; (b4758 <__assert_func+0xc>)
   b4750:	681b      	ldr	r3, [r3, #0]
   b4752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4754:	9301      	str	r3, [sp, #4]
   b4756:	bd08      	pop	{r3, pc}
   b4758:	0003021c 	.word	0x0003021c

000b475c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b475c:	b508      	push	{r3, lr}
   b475e:	4b02      	ldr	r3, [pc, #8]	; (b4768 <newlib_impure_ptr_callback+0xc>)
   b4760:	681b      	ldr	r3, [r3, #0]
   b4762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4764:	9301      	str	r3, [sp, #4]
   b4766:	bd08      	pop	{r3, pc}
   b4768:	0003021c 	.word	0x0003021c

000b476c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b476c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b476e:	6883      	ldr	r3, [r0, #8]
   b4770:	4604      	mov	r4, r0
   b4772:	b90b      	cbnz	r3, b4778 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b4774:	f002 f92e 	bl	b69d4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4778:	68c3      	ldr	r3, [r0, #12]
   b477a:	4798      	blx	r3
      if (_M_manager)
   b477c:	68a3      	ldr	r3, [r4, #8]
   b477e:	b11b      	cbz	r3, b4788 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4780:	2203      	movs	r2, #3
   b4782:	4621      	mov	r1, r4
   b4784:	4620      	mov	r0, r4
   b4786:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b4788:	4620      	mov	r0, r4
   b478a:	2110      	movs	r1, #16
}
   b478c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b4790:	f7ff bc83 	b.w	b409a <_ZdlPvj>

000b4794 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4794:	b510      	push	{r4, lr}
      if (_M_manager)
   b4796:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4798:	4604      	mov	r4, r0
      if (_M_manager)
   b479a:	b113      	cbz	r3, b47a2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b479c:	2203      	movs	r2, #3
   b479e:	4601      	mov	r1, r0
   b47a0:	4798      	blx	r3
    }
   b47a2:	4620      	mov	r0, r4
   b47a4:	bd10      	pop	{r4, pc}

000b47a6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b47a6:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b47a8:	6843      	ldr	r3, [r0, #4]
   b47aa:	3b01      	subs	r3, #1
    {
   b47ac:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b47ae:	6043      	str	r3, [r0, #4]
   b47b0:	b963      	cbnz	r3, b47cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b47b2:	6803      	ldr	r3, [r0, #0]
   b47b4:	689b      	ldr	r3, [r3, #8]
   b47b6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b47b8:	68a3      	ldr	r3, [r4, #8]
   b47ba:	3b01      	subs	r3, #1
   b47bc:	60a3      	str	r3, [r4, #8]
   b47be:	b92b      	cbnz	r3, b47cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b47c0:	6823      	ldr	r3, [r4, #0]
   b47c2:	4620      	mov	r0, r4
   b47c4:	68db      	ldr	r3, [r3, #12]
    }
   b47c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b47ca:	4718      	bx	r3
    }
   b47cc:	bd10      	pop	{r4, pc}

000b47ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b47ce:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b47d0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b47d4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b47d6:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b47da:	42ae      	cmp	r6, r5
   b47dc:	d004      	beq.n	b47e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b47de:	4628      	mov	r0, r5
   b47e0:	f001 fe4e 	bl	b6480 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b47e4:	3510      	adds	r5, #16
   b47e6:	e7f8      	b.n	b47da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b47e8:	6820      	ldr	r0, [r4, #0]
   b47ea:	f7ff ff7f 	bl	b46ec <free>
    AllocatorT::free(data_);
}
   b47ee:	4620      	mov	r0, r4
   b47f0:	bd70      	pop	{r4, r5, r6, pc}

000b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b47f2:	b510      	push	{r4, lr}
   b47f4:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b47f6:	6800      	ldr	r0, [r0, #0]
   b47f8:	b108      	cbz	r0, b47fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b47fa:	f7ff ffd4 	bl	b47a6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b47fe:	4620      	mov	r0, r4
   b4800:	bd10      	pop	{r4, pc}

000b4802 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4802:	b513      	push	{r0, r1, r4, lr}
   b4804:	460b      	mov	r3, r1
   b4806:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4808:	e9d0 0100 	ldrd	r0, r1, [r0]
   b480c:	466c      	mov	r4, sp
   b480e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4812:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4816:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b481a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b481e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4822:	b002      	add	sp, #8
   b4824:	bd10      	pop	{r4, pc}
	...

000b4828 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4828:	4802      	ldr	r0, [pc, #8]	; (b4834 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b482a:	2300      	movs	r3, #0
   b482c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b482e:	f7ff bdb1 	b.w	b4394 <os_mutex_recursive_create>
   b4832:	bf00      	nop
   b4834:	2003e684 	.word	0x2003e684

000b4838 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b4838:	2200      	movs	r2, #0
   b483a:	6840      	ldr	r0, [r0, #4]
   b483c:	4611      	mov	r1, r2
   b483e:	f7ff bf05 	b.w	b464c <network_ready>

000b4842 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b4842:	2200      	movs	r2, #0
   b4844:	6840      	ldr	r0, [r0, #4]
   b4846:	4611      	mov	r1, r2
   b4848:	f7ff bf20 	b.w	b468c <network_listening>

000b484c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b484c:	2200      	movs	r2, #0
   b484e:	6840      	ldr	r0, [r0, #4]
   b4850:	4611      	mov	r1, r2
   b4852:	f7ff bf2b 	b.w	b46ac <network_get_listen_timeout>

000b4856 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4856:	6840      	ldr	r0, [r0, #4]
   b4858:	2200      	movs	r2, #0
   b485a:	f7ff bf1f 	b.w	b469c <network_set_listen_timeout>

000b485e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b485e:	6840      	ldr	r0, [r0, #4]
   b4860:	2200      	movs	r2, #0
   b4862:	f081 0101 	eor.w	r1, r1, #1
   b4866:	f7ff bf09 	b.w	b467c <network_listen>

000b486a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b486a:	2300      	movs	r3, #0
   b486c:	6840      	ldr	r0, [r0, #4]
   b486e:	461a      	mov	r2, r3
   b4870:	4619      	mov	r1, r3
   b4872:	f7ff befb 	b.w	b466c <network_off>

000b4876 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4876:	2300      	movs	r3, #0
   b4878:	6840      	ldr	r0, [r0, #4]
   b487a:	461a      	mov	r2, r3
   b487c:	4619      	mov	r1, r3
   b487e:	f7ff beed 	b.w	b465c <network_on>

000b4882 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4882:	2200      	movs	r2, #0
   b4884:	6840      	ldr	r0, [r0, #4]
   b4886:	4611      	mov	r1, r2
   b4888:	f7ff bed0 	b.w	b462c <network_connecting>

000b488c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b488c:	6840      	ldr	r0, [r0, #4]
   b488e:	2200      	movs	r2, #0
   b4890:	2102      	movs	r1, #2
   b4892:	f7ff bed3 	b.w	b463c <network_disconnect>

000b4896 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4896:	2300      	movs	r3, #0
   b4898:	6840      	ldr	r0, [r0, #4]
   b489a:	461a      	mov	r2, r3
   b489c:	f7ff bebe 	b.w	b461c <network_connect>

000b48a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b48a0:	4b08      	ldr	r3, [pc, #32]	; (b48c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b48a2:	b510      	push	{r4, lr}
   b48a4:	2428      	movs	r4, #40	; 0x28
   b48a6:	4622      	mov	r2, r4
   b48a8:	4618      	mov	r0, r3
   b48aa:	2100      	movs	r1, #0
   b48ac:	f002 f8cc 	bl	b6a48 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b48b0:	4b05      	ldr	r3, [pc, #20]	; (b48c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b48b2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b48b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b48b8:	6042      	str	r2, [r0, #4]
   b48ba:	2204      	movs	r2, #4
   b48bc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b48be:	4a03      	ldr	r2, [pc, #12]	; (b48cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b48c0:	601a      	str	r2, [r3, #0]
   b48c2:	bd10      	pop	{r4, pc}
   b48c4:	2003e690 	.word	0x2003e690
   b48c8:	2003e688 	.word	0x2003e688
   b48cc:	000b6e20 	.word	0x000b6e20

000b48d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b48d0:	4770      	bx	lr

000b48d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b48d2:	2000      	movs	r0, #0
   b48d4:	4770      	bx	lr

000b48d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b48d6:	b510      	push	{r4, lr}
   b48d8:	2110      	movs	r1, #16
   b48da:	4604      	mov	r4, r0
   b48dc:	f7ff fbdd 	bl	b409a <_ZdlPvj>
   b48e0:	4620      	mov	r0, r4
   b48e2:	bd10      	pop	{r4, pc}

000b48e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b48e4:	b508      	push	{r3, lr}
      { delete this; }
   b48e6:	f7ff fff6 	bl	b48d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b48ea:	bd08      	pop	{r3, pc}

000b48ec <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b48ec:	b530      	push	{r4, r5, lr}
        type_(type) {
   b48ee:	2200      	movs	r2, #0
   b48f0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b48f4:	6002      	str	r2, [r0, #0]
   b48f6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b48f8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b48fa:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b48fc:	680c      	ldr	r4, [r1, #0]
   b48fe:	8085      	strh	r5, [r0, #4]
   b4900:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4902:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b4904:	bd30      	pop	{r4, r5, pc}

000b4906 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b4906:	b510      	push	{r4, lr}
   b4908:	4604      	mov	r4, r0
    free((void*)msg_);
   b490a:	6800      	ldr	r0, [r0, #0]
   b490c:	f7ff feee 	bl	b46ec <free>
}
   b4910:	4620      	mov	r0, r4
   b4912:	bd10      	pop	{r4, pc}

000b4914 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4914:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b4916:	68c4      	ldr	r4, [r0, #12]
   b4918:	b1f4      	cbz	r4, b4958 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b491a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b491c:	2b02      	cmp	r3, #2
   b491e:	d103      	bne.n	b4928 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b4920:	f104 000c 	add.w	r0, r4, #12
   b4924:	f7ff ffef 	bl	b4906 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b4928:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b492a:	b135      	cbz	r5, b493a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b492c:	4628      	mov	r0, r5
   b492e:	f7ff ff31 	bl	b4794 <_ZNSt14_Function_baseD1Ev>
   b4932:	2110      	movs	r1, #16
   b4934:	4628      	mov	r0, r5
   b4936:	f7ff fbb0 	bl	b409a <_ZdlPvj>
   b493a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b493c:	b135      	cbz	r5, b494c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b493e:	4628      	mov	r0, r5
   b4940:	f7ff ff28 	bl	b4794 <_ZNSt14_Function_baseD1Ev>
   b4944:	2110      	movs	r1, #16
   b4946:	4628      	mov	r0, r5
   b4948:	f7ff fba7 	bl	b409a <_ZdlPvj>
   b494c:	4620      	mov	r0, r4
   b494e:	2114      	movs	r1, #20
   b4950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4954:	f7ff bba1 	b.w	b409a <_ZdlPvj>
   b4958:	bd38      	pop	{r3, r4, r5, pc}

000b495a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b495a:	680b      	ldr	r3, [r1, #0]
   b495c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b495e:	684b      	ldr	r3, [r1, #4]
   b4960:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4962:	b113      	cbz	r3, b496a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b4964:	685a      	ldr	r2, [r3, #4]
   b4966:	3201      	adds	r2, #1
   b4968:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b496a:	4770      	bx	lr

000b496c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b496c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b496e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4970:	4668      	mov	r0, sp
   b4972:	460d      	mov	r5, r1
   b4974:	f7ff fff1 	bl	b495a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4978:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b497a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b497c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b497e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b4980:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4982:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b4984:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b4986:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b4988:	f7ff ff33 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b498c:	b135      	cbz	r5, b499c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b498e:	1d28      	adds	r0, r5, #4
   b4990:	f7ff ff2f 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4994:	2108      	movs	r1, #8
   b4996:	4628      	mov	r0, r5
   b4998:	f7ff fb7f 	bl	b409a <_ZdlPvj>
        return p;
    }
   b499c:	4620      	mov	r0, r4
   b499e:	b003      	add	sp, #12
   b49a0:	bd30      	pop	{r4, r5, pc}

000b49a2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b49a2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b49a4:	b510      	push	{r4, lr}
      if (_M_empty())
   b49a6:	b90a      	cbnz	r2, b49ac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b49a8:	f002 f814 	bl	b69d4 <_ZSt25__throw_bad_function_callv>
    }
   b49ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b49b0:	68c3      	ldr	r3, [r0, #12]
   b49b2:	4718      	bx	r3

000b49b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b49b4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b49b6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b49b8:	f100 0110 	add.w	r1, r0, #16
   b49bc:	f7ff fff1 	bl	b49a2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b49c0:	bd08      	pop	{r3, pc}

000b49c2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b49c2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b49c4:	b510      	push	{r4, lr}
      if (_M_empty())
   b49c6:	b90a      	cbnz	r2, b49cc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b49c8:	f002 f804 	bl	b69d4 <_ZSt25__throw_bad_function_callv>
    }
   b49cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b49d0:	68c3      	ldr	r3, [r0, #12]
   b49d2:	4718      	bx	r3

000b49d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b49d4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b49d6:	6800      	ldr	r0, [r0, #0]
   b49d8:	f100 0110 	add.w	r1, r0, #16
   b49dc:	f7ff fff1 	bl	b49c2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b49e0:	bd08      	pop	{r3, pc}
	...

000b49e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b49e4:	b538      	push	{r3, r4, r5, lr}
   b49e6:	2300      	movs	r3, #0
   b49e8:	4604      	mov	r4, r0
   b49ea:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b49ec:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b49ee:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b49f0:	f7ff fb4f 	bl	b4092 <_Znwj>
   b49f4:	b128      	cbz	r0, b4a02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b49f6:	2301      	movs	r3, #1
   b49f8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b49fc:	4b02      	ldr	r3, [pc, #8]	; (b4a08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b49fe:	6003      	str	r3, [r0, #0]
   b4a00:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4a02:	6020      	str	r0, [r4, #0]
	}
   b4a04:	4620      	mov	r0, r4
   b4a06:	bd38      	pop	{r3, r4, r5, pc}
   b4a08:	000b6e5c 	.word	0x000b6e5c

000b4a0c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b4a0c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4a0e:	2300      	movs	r3, #0
   b4a10:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4a12:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4a14:	4604      	mov	r4, r0
   b4a16:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4a18:	b12b      	cbz	r3, b4a26 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4a1a:	2202      	movs	r2, #2
   b4a1c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4a1e:	68eb      	ldr	r3, [r5, #12]
   b4a20:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4a22:	68ab      	ldr	r3, [r5, #8]
   b4a24:	60a3      	str	r3, [r4, #8]
    }
   b4a26:	4620      	mov	r0, r4
   b4a28:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4a2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b4a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4a2e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4a30:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b4a32:	4668      	mov	r0, sp
   b4a34:	f7ff ff5a 	bl	b48ec <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4a38:	f04f 0302 	mov.w	r3, #2
   b4a3c:	e8d4 2f4f 	ldrexb	r2, [r4]
   b4a40:	2a00      	cmp	r2, #0
   b4a42:	d103      	bne.n	b4a4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b4a44:	e8c4 3f41 	strexb	r1, r3, [r4]
   b4a48:	2900      	cmp	r1, #0
   b4a4a:	d1f7      	bne.n	b4a3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b4a4c:	d125      	bne.n	b4a9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b4a4e:	f104 050c 	add.w	r5, r4, #12
   b4a52:	4669      	mov	r1, sp
   b4a54:	4628      	mov	r0, r5
   b4a56:	f7ff ff49 	bl	b48ec <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b4a5a:	f3bf 8f5b 	dmb	ish
   b4a5e:	2301      	movs	r3, #1
   b4a60:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4a62:	2000      	movs	r0, #0
   b4a64:	f104 0308 	add.w	r3, r4, #8
   b4a68:	f3bf 8f5b 	dmb	ish
   b4a6c:	e853 6f00 	ldrex	r6, [r3]
   b4a70:	e843 0200 	strex	r2, r0, [r3]
   b4a74:	2a00      	cmp	r2, #0
   b4a76:	d1f9      	bne.n	b4a6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b4a78:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4a7c:	b16e      	cbz	r6, b4a9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b4a7e:	f7ff fd91 	bl	b45a4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4a82:	b178      	cbz	r0, b4aa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4a84:	4629      	mov	r1, r5
   b4a86:	4630      	mov	r0, r6
   b4a88:	f7ff ff8b 	bl	b49a2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b4a8c:	4630      	mov	r0, r6
   b4a8e:	f7ff fe81 	bl	b4794 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4a92:	2110      	movs	r1, #16
   b4a94:	4630      	mov	r0, r6
   b4a96:	f7ff fb00 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b4a9a:	4668      	mov	r0, sp
   b4a9c:	f7ff ff33 	bl	b4906 <_ZN8particle5ErrorD1Ev>
    }
   b4aa0:	b009      	add	sp, #36	; 0x24
   b4aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4aa4:	4631      	mov	r1, r6
   b4aa6:	a802      	add	r0, sp, #8
   b4aa8:	f7ff ffb0 	bl	b4a0c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4aac:	68e0      	ldr	r0, [r4, #12]
   b4aae:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4ab2:	b108      	cbz	r0, b4ab8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b4ab4:	f002 f828 	bl	b6b08 <strdup>
        type_(type) {
   b4ab8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4aba:	2010      	movs	r0, #16
   b4abc:	f8ad 501c 	strh.w	r5, [sp, #28]
   b4ac0:	f7ff fae7 	bl	b4092 <_Znwj>
   b4ac4:	4605      	mov	r5, r0
   b4ac6:	b1e8      	cbz	r0, b4b04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b4ac8:	2700      	movs	r7, #0
   b4aca:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4acc:	2018      	movs	r0, #24
   b4ace:	f7ff fae0 	bl	b4092 <_Znwj>
   b4ad2:	4604      	mov	r4, r0
   b4ad4:	b188      	cbz	r0, b4afa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b4ad6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b4ad8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4ada:	a802      	add	r0, sp, #8
   b4adc:	f7ff fe91 	bl	b4802 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4ae0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b4ae2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4ae4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4ae6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4ae8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4aea:	a906      	add	r1, sp, #24
   b4aec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4aee:	60e3      	str	r3, [r4, #12]
   b4af0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b4af4:	9205      	str	r2, [sp, #20]
   b4af6:	f7ff fef9 	bl	b48ec <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b4afa:	4b08      	ldr	r3, [pc, #32]	; (b4b1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b4afc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4afe:	4b08      	ldr	r3, [pc, #32]	; (b4b20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4b00:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4b02:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b4b04:	a806      	add	r0, sp, #24
   b4b06:	f7ff fefe 	bl	b4906 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4b0a:	a802      	add	r0, sp, #8
   b4b0c:	f7ff fe42 	bl	b4794 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4b10:	2200      	movs	r2, #0
   b4b12:	4629      	mov	r1, r5
   b4b14:	4803      	ldr	r0, [pc, #12]	; (b4b24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b4b16:	f7ff fd4d 	bl	b45b4 <application_thread_invoke>
   b4b1a:	e7b7      	b.n	b4a8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b4b1c:	000b49b5 	.word	0x000b49b5
   b4b20:	000b4c39 	.word	0x000b4c39
   b4b24:	000b476d 	.word	0x000b476d

000b4b28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b4b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b2c:	b08b      	sub	sp, #44	; 0x2c
   b4b2e:	4605      	mov	r5, r0
   b4b30:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4b34:	460f      	mov	r7, r1
   b4b36:	4690      	mov	r8, r2
   b4b38:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4b3a:	f7ff fd57 	bl	b45ec <spark_cloud_flag_connected>
   b4b3e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b4b40:	4683      	mov	fp, r0
   b4b42:	bb38      	cbnz	r0, b4b94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b4b44:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b4b48:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4b4a:	a905      	add	r1, sp, #20
   b4b4c:	4630      	mov	r0, r6
   b4b4e:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4b52:	f7ff fecb 	bl	b48ec <_ZN8particle5ErrorC1EOS0_>
   b4b56:	2014      	movs	r0, #20
   b4b58:	f7ff fa9b 	bl	b4092 <_Znwj>
   b4b5c:	4604      	mov	r4, r0
   b4b5e:	b148      	cbz	r0, b4b74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b4b60:	2302      	movs	r3, #2
   b4b62:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4b64:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4b66:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4b6a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b4b6c:	4631      	mov	r1, r6
   b4b6e:	300c      	adds	r0, #12
   b4b70:	f7ff febc 	bl	b48ec <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4b74:	4628      	mov	r0, r5
	: __shared_count(__p)
   b4b76:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4b78:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b4b7c:	f7ff ff32 	bl	b49e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4b80:	4630      	mov	r0, r6
   b4b82:	f7ff fec0 	bl	b4906 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b4b86:	a805      	add	r0, sp, #20
   b4b88:	f7ff febd 	bl	b4906 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b4b8c:	4628      	mov	r0, r5
   b4b8e:	b00b      	add	sp, #44	; 0x2c
   b4b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b4b94:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b4b96:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b4b98:	2014      	movs	r0, #20
   b4b9a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b4b9e:	9307      	str	r3, [sp, #28]
   b4ba0:	f7ff fa77 	bl	b4092 <_Znwj>
   b4ba4:	4601      	mov	r1, r0
   b4ba6:	b118      	cbz	r0, b4bb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4ba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b4bac:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4bae:	7044      	strb	r4, [r0, #1]
   b4bb0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4bb2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b4bb4:	f7ff ff16 	bl	b49e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b4bb8:	4b1e      	ldr	r3, [pc, #120]	; (b4c34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b4bba:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b4bbc:	2008      	movs	r0, #8
   b4bbe:	f7ff fa68 	bl	b4092 <_Znwj>
   b4bc2:	4604      	mov	r4, r0
   b4bc4:	b110      	cbz	r0, b4bcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b4bc6:	a903      	add	r1, sp, #12
   b4bc8:	f7ff fec7 	bl	b495a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4bcc:	9600      	str	r6, [sp, #0]
   b4bce:	fa5f f38a 	uxtb.w	r3, sl
   b4bd2:	464a      	mov	r2, r9
   b4bd4:	4641      	mov	r1, r8
   b4bd6:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b4bd8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4bda:	f7ff fd0f 	bl	b45fc <spark_send_event>
   b4bde:	b9b8      	cbnz	r0, b4c10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b4be0:	9b03      	ldr	r3, [sp, #12]
   b4be2:	785b      	ldrb	r3, [r3, #1]
   b4be4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b4be8:	b993      	cbnz	r3, b4c10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b4bea:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b4bee:	a905      	add	r1, sp, #20
   b4bf0:	a803      	add	r0, sp, #12
   b4bf2:	9205      	str	r2, [sp, #20]
   b4bf4:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4bf8:	f7ff ff18 	bl	b4a2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4bfc:	a805      	add	r0, sp, #20
   b4bfe:	f7ff fe82 	bl	b4906 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b4c02:	a805      	add	r0, sp, #20
   b4c04:	9909      	ldr	r1, [sp, #36]	; 0x24
   b4c06:	f7ff feb1 	bl	b496c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b4c0a:	a806      	add	r0, sp, #24
   b4c0c:	f7ff fdf1 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4c10:	a903      	add	r1, sp, #12
   b4c12:	a805      	add	r0, sp, #20
   b4c14:	f7ff fea1 	bl	b495a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4c18:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4c1a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4c1c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b4c1e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b4c20:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4c22:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b4c24:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b4c26:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b4c28:	f7ff fde3 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4c2c:	a804      	add	r0, sp, #16
   b4c2e:	f7ff fde0 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b4c32:	e7ab      	b.n	b4b8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b4c34:	000b4cb5 	.word	0x000b4cb5

000b4c38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b4c38:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4c3c:	4605      	mov	r5, r0
	switch (__op)
   b4c3e:	d103      	bne.n	b4c48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b4c40:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4c42:	6003      	str	r3, [r0, #0]
      }
   b4c44:	2000      	movs	r0, #0
   b4c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b4c48:	2a02      	cmp	r2, #2
   b4c4a:	d010      	beq.n	b4c6e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b4c4c:	2a03      	cmp	r2, #3
   b4c4e:	d1f9      	bne.n	b4c44 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4c50:	6804      	ldr	r4, [r0, #0]
   b4c52:	2c00      	cmp	r4, #0
   b4c54:	d0f6      	beq.n	b4c44 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b4c56:	f104 0010 	add.w	r0, r4, #16
   b4c5a:	f7ff fe54 	bl	b4906 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4c5e:	4620      	mov	r0, r4
   b4c60:	f7ff fd98 	bl	b4794 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4c64:	2118      	movs	r1, #24
   b4c66:	4620      	mov	r0, r4
   b4c68:	f7ff fa17 	bl	b409a <_ZdlPvj>
   b4c6c:	e7ea      	b.n	b4c44 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b4c6e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b4c70:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4c72:	f7ff fa0e 	bl	b4092 <_Znwj>
   b4c76:	4604      	mov	r4, r0
   b4c78:	b150      	cbz	r0, b4c90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b4c7a:	4631      	mov	r1, r6
   b4c7c:	f7ff fec6 	bl	b4a0c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4c80:	6930      	ldr	r0, [r6, #16]
   b4c82:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4c86:	b108      	cbz	r0, b4c8c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b4c88:	f001 ff3e 	bl	b6b08 <strdup>
        type_(type) {
   b4c8c:	6120      	str	r0, [r4, #16]
   b4c8e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b4c90:	602c      	str	r4, [r5, #0]
	}
   b4c92:	e7d7      	b.n	b4c44 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b4c94 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b4c94:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4c96:	2300      	movs	r3, #0
   b4c98:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4c9a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4c9c:	4604      	mov	r4, r0
   b4c9e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4ca0:	b12b      	cbz	r3, b4cae <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4ca2:	2202      	movs	r2, #2
   b4ca4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4ca6:	68eb      	ldr	r3, [r5, #12]
   b4ca8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4caa:	68ab      	ldr	r3, [r5, #8]
   b4cac:	60a3      	str	r3, [r4, #8]
    }
   b4cae:	4620      	mov	r0, r4
   b4cb0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4cb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b4cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4cb6:	b089      	sub	sp, #36	; 0x24
   b4cb8:	4604      	mov	r4, r0
   b4cba:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b4cbc:	a801      	add	r0, sp, #4
   b4cbe:	4611      	mov	r1, r2
   b4cc0:	f7ff fe54 	bl	b496c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b4cc4:	b1a4      	cbz	r4, b4cf0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b4cc6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4cc8:	b11d      	cbz	r5, b4cd2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b4cca:	4628      	mov	r0, r5
   b4ccc:	f001 ff1c 	bl	b6b08 <strdup>
   b4cd0:	4605      	mov	r5, r0
   b4cd2:	a801      	add	r0, sp, #4
   b4cd4:	a903      	add	r1, sp, #12
        type_(type) {
   b4cd6:	9503      	str	r5, [sp, #12]
   b4cd8:	f8ad 4010 	strh.w	r4, [sp, #16]
   b4cdc:	f7ff fea6 	bl	b4a2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4ce0:	a803      	add	r0, sp, #12
   b4ce2:	f7ff fe10 	bl	b4906 <_ZN8particle5ErrorD1Ev>
   b4ce6:	a802      	add	r0, sp, #8
   b4ce8:	f7ff fd83 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4cec:	b009      	add	sp, #36	; 0x24
   b4cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b4cf0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4cf2:	2301      	movs	r3, #1
   b4cf4:	e8d5 2f4f 	ldrexb	r2, [r5]
   b4cf8:	2a00      	cmp	r2, #0
   b4cfa:	d103      	bne.n	b4d04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b4cfc:	e8c5 3f41 	strexb	r1, r3, [r5]
   b4d00:	2900      	cmp	r1, #0
   b4d02:	d1f7      	bne.n	b4cf4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b4d04:	d1ef      	bne.n	b4ce6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b4d06:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b4d08:	f3bf 8f5b 	dmb	ish
   b4d0c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4d0e:	1d2b      	adds	r3, r5, #4
   b4d10:	f3bf 8f5b 	dmb	ish
   b4d14:	e853 6f00 	ldrex	r6, [r3]
   b4d18:	e843 4200 	strex	r2, r4, [r3]
   b4d1c:	2a00      	cmp	r2, #0
   b4d1e:	d1f9      	bne.n	b4d14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b4d20:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4d24:	2e00      	cmp	r6, #0
   b4d26:	d0de      	beq.n	b4ce6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b4d28:	4620      	mov	r0, r4
   b4d2a:	f7ff fc3b 	bl	b45a4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4d2e:	4607      	mov	r7, r0
   b4d30:	b160      	cbz	r0, b4d4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4d32:	f105 010c 	add.w	r1, r5, #12
   b4d36:	4630      	mov	r0, r6
   b4d38:	f7ff fe43 	bl	b49c2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b4d3c:	4630      	mov	r0, r6
   b4d3e:	f7ff fd29 	bl	b4794 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4d42:	2110      	movs	r1, #16
   b4d44:	4630      	mov	r0, r6
   b4d46:	f7ff f9a8 	bl	b409a <_ZdlPvj>
   b4d4a:	e7cc      	b.n	b4ce6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4d4c:	4631      	mov	r1, r6
   b4d4e:	a803      	add	r0, sp, #12
   b4d50:	f7ff ffa0 	bl	b4c94 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4d54:	7b2b      	ldrb	r3, [r5, #12]
   b4d56:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4d5a:	2010      	movs	r0, #16
   b4d5c:	f7ff f999 	bl	b4092 <_Znwj>
   b4d60:	4605      	mov	r5, r0
   b4d62:	b1d0      	cbz	r0, b4d9a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b4d64:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4d66:	2014      	movs	r0, #20
   b4d68:	f7ff f993 	bl	b4092 <_Znwj>
   b4d6c:	4604      	mov	r4, r0
   b4d6e:	b178      	cbz	r0, b4d90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b4d70:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4d72:	4601      	mov	r1, r0
   b4d74:	a803      	add	r0, sp, #12
   b4d76:	f7ff fd44 	bl	b4802 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4d7a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4d7c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4d7e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4d80:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b4d82:	9205      	str	r2, [sp, #20]
   b4d84:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4d86:	60e3      	str	r3, [r4, #12]
   b4d88:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b4d8c:	9206      	str	r2, [sp, #24]
   b4d8e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b4d90:	4b06      	ldr	r3, [pc, #24]	; (b4dac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b4d92:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4d94:	4b06      	ldr	r3, [pc, #24]	; (b4db0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4d96:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4d98:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b4d9a:	a803      	add	r0, sp, #12
   b4d9c:	f7ff fcfa 	bl	b4794 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4da0:	2200      	movs	r2, #0
   b4da2:	4629      	mov	r1, r5
   b4da4:	4803      	ldr	r0, [pc, #12]	; (b4db4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b4da6:	f7ff fc05 	bl	b45b4 <application_thread_invoke>
   b4daa:	e7c7      	b.n	b4d3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b4dac:	000b49d5 	.word	0x000b49d5
   b4db0:	000b4db9 	.word	0x000b4db9
   b4db4:	000b476d 	.word	0x000b476d

000b4db8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b4db8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4dba:	b570      	push	{r4, r5, r6, lr}
   b4dbc:	4604      	mov	r4, r0
	switch (__op)
   b4dbe:	d103      	bne.n	b4dc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b4dc0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4dc2:	6003      	str	r3, [r0, #0]
      }
   b4dc4:	2000      	movs	r0, #0
   b4dc6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b4dc8:	2a02      	cmp	r2, #2
   b4dca:	d00c      	beq.n	b4de6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b4dcc:	2a03      	cmp	r2, #3
   b4dce:	d1f9      	bne.n	b4dc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4dd0:	6804      	ldr	r4, [r0, #0]
   b4dd2:	2c00      	cmp	r4, #0
   b4dd4:	d0f6      	beq.n	b4dc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4dd6:	4620      	mov	r0, r4
   b4dd8:	f7ff fcdc 	bl	b4794 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4ddc:	2114      	movs	r1, #20
   b4dde:	4620      	mov	r0, r4
   b4de0:	f7ff f95b 	bl	b409a <_ZdlPvj>
   b4de4:	e7ee      	b.n	b4dc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b4de6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b4de8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4dea:	f7ff f952 	bl	b4092 <_Znwj>
   b4dee:	4605      	mov	r5, r0
   b4df0:	b120      	cbz	r0, b4dfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b4df2:	4631      	mov	r1, r6
   b4df4:	f7ff ff4e 	bl	b4c94 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b4df8:	7c33      	ldrb	r3, [r6, #16]
   b4dfa:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b4dfc:	6025      	str	r5, [r4, #0]
	}
   b4dfe:	e7e1      	b.n	b4dc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b4e00 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4e00:	2200      	movs	r2, #0
   b4e02:	6840      	ldr	r0, [r0, #4]
   b4e04:	4611      	mov	r1, r2
   b4e06:	f7ff bc41 	b.w	b468c <network_listening>

000b4e0a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4e0a:	2200      	movs	r2, #0
   b4e0c:	6840      	ldr	r0, [r0, #4]
   b4e0e:	4611      	mov	r1, r2
   b4e10:	f7ff bc4c 	b.w	b46ac <network_get_listen_timeout>

000b4e14 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4e14:	6840      	ldr	r0, [r0, #4]
   b4e16:	2200      	movs	r2, #0
   b4e18:	f7ff bc40 	b.w	b469c <network_set_listen_timeout>

000b4e1c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4e1c:	6840      	ldr	r0, [r0, #4]
   b4e1e:	2200      	movs	r2, #0
   b4e20:	f081 0101 	eor.w	r1, r1, #1
   b4e24:	f7ff bc2a 	b.w	b467c <network_listen>

000b4e28 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4e28:	2300      	movs	r3, #0
   b4e2a:	6840      	ldr	r0, [r0, #4]
   b4e2c:	461a      	mov	r2, r3
   b4e2e:	4619      	mov	r1, r3
   b4e30:	f7ff bc1c 	b.w	b466c <network_off>

000b4e34 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4e34:	2300      	movs	r3, #0
   b4e36:	6840      	ldr	r0, [r0, #4]
   b4e38:	461a      	mov	r2, r3
   b4e3a:	4619      	mov	r1, r3
   b4e3c:	f7ff bc0e 	b.w	b465c <network_on>

000b4e40 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4e40:	2200      	movs	r2, #0
   b4e42:	6840      	ldr	r0, [r0, #4]
   b4e44:	4611      	mov	r1, r2
   b4e46:	f7ff bc01 	b.w	b464c <network_ready>

000b4e4a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4e4a:	2200      	movs	r2, #0
   b4e4c:	6840      	ldr	r0, [r0, #4]
   b4e4e:	4611      	mov	r1, r2
   b4e50:	f7ff bbec 	b.w	b462c <network_connecting>

000b4e54 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4e54:	6840      	ldr	r0, [r0, #4]
   b4e56:	2200      	movs	r2, #0
   b4e58:	2102      	movs	r1, #2
   b4e5a:	f7ff bbef 	b.w	b463c <network_disconnect>

000b4e5e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4e5e:	2300      	movs	r3, #0
   b4e60:	6840      	ldr	r0, [r0, #4]
   b4e62:	461a      	mov	r2, r3
   b4e64:	f7ff bbda 	b.w	b461c <network_connect>

000b4e68 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b4e68:	4b02      	ldr	r3, [pc, #8]	; (b4e74 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4e6a:	2203      	movs	r2, #3
   b4e6c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4e6e:	4a02      	ldr	r2, [pc, #8]	; (b4e78 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4e70:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4e72:	4770      	bx	lr
   b4e74:	2003e6b8 	.word	0x2003e6b8
   b4e78:	000b6e78 	.word	0x000b6e78

000b4e7c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4e7c:	4770      	bx	lr

000b4e7e <_ZN9IPAddressD0Ev>:
   b4e7e:	b510      	push	{r4, lr}
   b4e80:	2118      	movs	r1, #24
   b4e82:	4604      	mov	r4, r0
   b4e84:	f7ff f909 	bl	b409a <_ZdlPvj>
   b4e88:	4620      	mov	r0, r4
   b4e8a:	bd10      	pop	{r4, pc}

000b4e8c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4e8e:	7d03      	ldrb	r3, [r0, #20]
   b4e90:	2b06      	cmp	r3, #6
{
   b4e92:	b08d      	sub	sp, #52	; 0x34
   b4e94:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e96:	f100 0704 	add.w	r7, r0, #4
   b4e9a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4e9e:	d012      	beq.n	b4ec6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4ea0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4ea4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4ea8:	220a      	movs	r2, #10
   b4eaa:	4630      	mov	r0, r6
   b4eac:	f001 fa93 	bl	b63d6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4eb0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4eb2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4eb4:	d019      	beq.n	b4eea <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4eb6:	2c00      	cmp	r4, #0
   b4eb8:	d0f4      	beq.n	b4ea4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4eba:	212e      	movs	r1, #46	; 0x2e
   b4ebc:	4630      	mov	r0, r6
   b4ebe:	f001 fa7b 	bl	b63b8 <_ZN5Print5printEc>
   b4ec2:	4404      	add	r4, r0
   b4ec4:	e7ee      	b.n	b4ea4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ec6:	232f      	movs	r3, #47	; 0x2f
   b4ec8:	466a      	mov	r2, sp
   b4eca:	4639      	mov	r1, r7
   b4ecc:	200a      	movs	r0, #10
		buf[0] = 0;
   b4ece:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ed2:	f7ff fa97 	bl	b4404 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4ed6:	4668      	mov	r0, sp
   b4ed8:	f001 fe33 	bl	b6b42 <strlen>
   b4edc:	6833      	ldr	r3, [r6, #0]
   b4ede:	4602      	mov	r2, r0
   b4ee0:	68db      	ldr	r3, [r3, #12]
   b4ee2:	4669      	mov	r1, sp
   b4ee4:	4630      	mov	r0, r6
   b4ee6:	4798      	blx	r3
   b4ee8:	4604      	mov	r4, r0
    }
    return n;
}
   b4eea:	4620      	mov	r0, r4
   b4eec:	b00d      	add	sp, #52	; 0x34
   b4eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4ef0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4ef0:	b510      	push	{r4, lr}
   b4ef2:	4b05      	ldr	r3, [pc, #20]	; (b4f08 <_ZN9IPAddressC1Ev+0x18>)
   b4ef4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4ef6:	2211      	movs	r2, #17
   b4ef8:	f840 3b04 	str.w	r3, [r0], #4
   b4efc:	2100      	movs	r1, #0
   b4efe:	f001 fda3 	bl	b6a48 <memset>
}
   b4f02:	4620      	mov	r0, r4
   b4f04:	bd10      	pop	{r4, pc}
   b4f06:	bf00      	nop
   b4f08:	000b6eb4 	.word	0x000b6eb4

000b4f0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4f0c:	4603      	mov	r3, r0
   b4f0e:	4a07      	ldr	r2, [pc, #28]	; (b4f2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4f10:	b510      	push	{r4, lr}
   b4f12:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4f16:	f101 0210 	add.w	r2, r1, #16
   b4f1a:	f851 4b04 	ldr.w	r4, [r1], #4
   b4f1e:	f843 4b04 	str.w	r4, [r3], #4
   b4f22:	4291      	cmp	r1, r2
   b4f24:	d1f9      	bne.n	b4f1a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4f26:	780a      	ldrb	r2, [r1, #0]
   b4f28:	701a      	strb	r2, [r3, #0]
}
   b4f2a:	bd10      	pop	{r4, pc}
   b4f2c:	000b6eb4 	.word	0x000b6eb4

000b4f30 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4f30:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4f32:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4f36:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4f3a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4f3e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4f42:	2304      	movs	r3, #4
   b4f44:	6041      	str	r1, [r0, #4]
   b4f46:	7503      	strb	r3, [r0, #20]
}
   b4f48:	bd10      	pop	{r4, pc}
	...

000b4f4c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4f4c:	b507      	push	{r0, r1, r2, lr}
   b4f4e:	4b06      	ldr	r3, [pc, #24]	; (b4f68 <_ZN9IPAddressC1EPKh+0x1c>)
   b4f50:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4f52:	78cb      	ldrb	r3, [r1, #3]
   b4f54:	9300      	str	r3, [sp, #0]
   b4f56:	788b      	ldrb	r3, [r1, #2]
   b4f58:	784a      	ldrb	r2, [r1, #1]
   b4f5a:	7809      	ldrb	r1, [r1, #0]
   b4f5c:	f7ff ffe8 	bl	b4f30 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4f60:	b003      	add	sp, #12
   b4f62:	f85d fb04 	ldr.w	pc, [sp], #4
   b4f66:	bf00      	nop
   b4f68:	000b6eb4 	.word	0x000b6eb4

000b4f6c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b4f6c:	f100 0310 	add.w	r3, r0, #16
   b4f70:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b4f72:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b4f76:	2901      	cmp	r1, #1
   b4f78:	4618      	mov	r0, r3
   b4f7a:	d108      	bne.n	b4f8e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b4f7c:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b4f80:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b4f84:	3a01      	subs	r2, #1
   b4f86:	f103 0310 	add.w	r3, r3, #16
   b4f8a:	d1f2      	bne.n	b4f72 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b4f8c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b4f8e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b4f90:	bf04      	itt	eq
   b4f92:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b4f96:	1852      	addeq	r2, r2, r1
   b4f98:	e7f4      	b.n	b4f84 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b4f9a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b4f9a:	b40e      	push	{r1, r2, r3}
   b4f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4f9e:	b088      	sub	sp, #32
   b4fa0:	af00      	add	r7, sp, #0
   b4fa2:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4fa6:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b4fa8:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4fac:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b4fae:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4fb0:	462b      	mov	r3, r5
   b4fb2:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b4fb4:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4fb6:	f7ff fba9 	bl	b470c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b4fba:	280f      	cmp	r0, #15
   b4fbc:	687a      	ldr	r2, [r7, #4]
   b4fbe:	d91a      	bls.n	b4ff6 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b4fc0:	f100 0308 	add.w	r3, r0, #8
   b4fc4:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b4fc8:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b4fca:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4fce:	1c41      	adds	r1, r0, #1
   b4fd0:	462b      	mov	r3, r5
   b4fd2:	4668      	mov	r0, sp
        va_start(args, fmt);
   b4fd4:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4fd6:	f7ff fb99 	bl	b470c <vsnprintf>
        if (n > 0) {
   b4fda:	1e02      	subs	r2, r0, #0
   b4fdc:	dd04      	ble.n	b4fe8 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b4fde:	6823      	ldr	r3, [r4, #0]
   b4fe0:	4669      	mov	r1, sp
   b4fe2:	689b      	ldr	r3, [r3, #8]
   b4fe4:	4620      	mov	r0, r4
   b4fe6:	4798      	blx	r3
   b4fe8:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b4fea:	3720      	adds	r7, #32
   b4fec:	46bd      	mov	sp, r7
   b4fee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4ff2:	b003      	add	sp, #12
   b4ff4:	4770      	bx	lr
    } else if (n > 0) {
   b4ff6:	2800      	cmp	r0, #0
   b4ff8:	d0f7      	beq.n	b4fea <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b4ffa:	6823      	ldr	r3, [r4, #0]
   b4ffc:	4602      	mov	r2, r0
   b4ffe:	689b      	ldr	r3, [r3, #8]
   b5000:	f107 0110 	add.w	r1, r7, #16
   b5004:	4620      	mov	r0, r4
   b5006:	4798      	blx	r3
}
   b5008:	e7ef      	b.n	b4fea <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b500a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b500a:	b538      	push	{r3, r4, r5, lr}
   b500c:	680b      	ldr	r3, [r1, #0]
   b500e:	6003      	str	r3, [r0, #0]
   b5010:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b5012:	6843      	ldr	r3, [r0, #4]
   b5014:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5016:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b5018:	d008      	beq.n	b502c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b501a:	b115      	cbz	r5, b5022 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b501c:	686b      	ldr	r3, [r5, #4]
   b501e:	3301      	adds	r3, #1
   b5020:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b5022:	6860      	ldr	r0, [r4, #4]
   b5024:	b108      	cbz	r0, b502a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b5026:	f7ff fbbe 	bl	b47a6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b502a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b502c:	bd38      	pop	{r3, r4, r5, pc}

000b502e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b502e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5030:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b5032:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5036:	689b      	ldr	r3, [r3, #8]
   b5038:	2201      	movs	r2, #1
   b503a:	f10d 0107 	add.w	r1, sp, #7
   b503e:	4798      	blx	r3
}
   b5040:	b003      	add	sp, #12
   b5042:	f85d fb04 	ldr.w	pc, [sp], #4

000b5046 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5046:	460b      	mov	r3, r1
   b5048:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b504a:	2200      	movs	r2, #0
   b504c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b504e:	e9c0 2200 	strd	r2, r2, [r0]
   b5052:	4604      	mov	r4, r0
        t_ = t;
   b5054:	6083      	str	r3, [r0, #8]
    if (t) {
   b5056:	b90b      	cbnz	r3, b505c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b5058:	4620      	mov	r0, r4
   b505a:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b505c:	f7ff ffd5 	bl	b500a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b5060:	e7fa      	b.n	b5058 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b5062 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b5062:	6883      	ldr	r3, [r0, #8]
   b5064:	b1eb      	cbz	r3, b50a2 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b5066:	781a      	ldrb	r2, [r3, #0]
   b5068:	2a03      	cmp	r2, #3
   b506a:	d81a      	bhi.n	b50a2 <_ZNK5spark9JSONValue4typeEv+0x40>
   b506c:	e8df f002 	tbb	[pc, r2]
   b5070:	1b021704 	.word	0x1b021704
   b5074:	2005      	movs	r0, #5
   b5076:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b5078:	6802      	ldr	r2, [r0, #0]
   b507a:	685b      	ldr	r3, [r3, #4]
   b507c:	6852      	ldr	r2, [r2, #4]
   b507e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b5080:	282d      	cmp	r0, #45	; 0x2d
   b5082:	d012      	beq.n	b50aa <_ZNK5spark9JSONValue4typeEv+0x48>
   b5084:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5088:	2b09      	cmp	r3, #9
   b508a:	d90e      	bls.n	b50aa <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b508c:	2874      	cmp	r0, #116	; 0x74
   b508e:	d00e      	beq.n	b50ae <_ZNK5spark9JSONValue4typeEv+0x4c>
   b5090:	2866      	cmp	r0, #102	; 0x66
   b5092:	d00c      	beq.n	b50ae <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b5094:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b5098:	4258      	negs	r0, r3
   b509a:	4158      	adcs	r0, r3
   b509c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b509e:	2006      	movs	r0, #6
   b50a0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b50a2:	2000      	movs	r0, #0
   b50a4:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b50a6:	2004      	movs	r0, #4
   b50a8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b50aa:	2003      	movs	r0, #3
   b50ac:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b50ae:	2002      	movs	r0, #2
}
   b50b0:	4770      	bx	lr

000b50b2 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b50b2:	b510      	push	{r4, lr}
   b50b4:	4604      	mov	r4, r0
    switch (type()) {
   b50b6:	f7ff ffd4 	bl	b5062 <_ZNK5spark9JSONValue4typeEv>
   b50ba:	2802      	cmp	r0, #2
   b50bc:	d00e      	beq.n	b50dc <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b50be:	1ec3      	subs	r3, r0, #3
   b50c0:	b2db      	uxtb	r3, r3
   b50c2:	2b01      	cmp	r3, #1
   b50c4:	d814      	bhi.n	b50f0 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b50c6:	6822      	ldr	r2, [r4, #0]
   b50c8:	68a3      	ldr	r3, [r4, #8]
   b50ca:	6850      	ldr	r0, [r2, #4]
   b50cc:	685b      	ldr	r3, [r3, #4]
}
   b50ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b50d2:	220a      	movs	r2, #10
   b50d4:	2100      	movs	r1, #0
   b50d6:	4418      	add	r0, r3
   b50d8:	f001 bde6 	b.w	b6ca8 <strtol>
        const char* const s = d_->json + t_->start;
   b50dc:	6822      	ldr	r2, [r4, #0]
   b50de:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b50e0:	6852      	ldr	r2, [r2, #4]
   b50e2:	685b      	ldr	r3, [r3, #4]
   b50e4:	5cd0      	ldrb	r0, [r2, r3]
   b50e6:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b50ea:	4258      	negs	r0, r3
   b50ec:	4158      	adcs	r0, r3
}
   b50ee:	bd10      	pop	{r4, pc}
    switch (type()) {
   b50f0:	2000      	movs	r0, #0
   b50f2:	e7fc      	b.n	b50ee <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b50f4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b50f4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b50f6:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b50f8:	e9c0 3300 	strd	r3, r3, [r0]
   b50fc:	4604      	mov	r4, r0
        n_(0) {
   b50fe:	480e      	ldr	r0, [pc, #56]	; (b5138 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b5100:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b5104:	b1a9      	cbz	r1, b5132 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b5106:	780b      	ldrb	r3, [r1, #0]
   b5108:	2b03      	cmp	r3, #3
   b510a:	d006      	beq.n	b511a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b510c:	b98b      	cbnz	r3, b5132 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b510e:	6813      	ldr	r3, [r2, #0]
   b5110:	6858      	ldr	r0, [r3, #4]
   b5112:	684b      	ldr	r3, [r1, #4]
   b5114:	5cc3      	ldrb	r3, [r0, r3]
   b5116:	2b6e      	cmp	r3, #110	; 0x6e
   b5118:	d007      	beq.n	b512a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b511a:	6813      	ldr	r3, [r2, #0]
   b511c:	684d      	ldr	r5, [r1, #4]
   b511e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b5120:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b5122:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b5124:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b5126:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b5128:	60e3      	str	r3, [r4, #12]
   b512a:	4611      	mov	r1, r2
   b512c:	4620      	mov	r0, r4
   b512e:	f7ff ff6c 	bl	b500a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b5132:	4620      	mov	r0, r4
   b5134:	bd38      	pop	{r3, r4, r5, pc}
   b5136:	bf00      	nop
   b5138:	000b6f23 	.word	0x000b6f23

000b513c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b513c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b513e:	2500      	movs	r5, #0
   b5140:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b5142:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b5146:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b514a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b514e:	4604      	mov	r4, r0
   b5150:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b5152:	b14b      	cbz	r3, b5168 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b5154:	781a      	ldrb	r2, [r3, #0]
   b5156:	2a01      	cmp	r2, #1
   b5158:	d106      	bne.n	b5168 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b515a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b515e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b5160:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b5162:	6143      	str	r3, [r0, #20]
   b5164:	f7ff ff51 	bl	b500a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b5168:	4620      	mov	r0, r4
   b516a:	bd38      	pop	{r3, r4, r5, pc}

000b516c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b516c:	b510      	push	{r4, lr}
    if (!n_) {
   b516e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b5170:	4604      	mov	r4, r0
    if (!n_) {
   b5172:	b163      	cbz	r3, b518e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b5174:	6880      	ldr	r0, [r0, #8]
   b5176:	60e0      	str	r0, [r4, #12]
    --n_;
   b5178:	3b01      	subs	r3, #1
    ++t_;
   b517a:	3010      	adds	r0, #16
   b517c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b517e:	6120      	str	r0, [r4, #16]
    --n_;
   b5180:	6163      	str	r3, [r4, #20]
    if (n_) {
   b5182:	b113      	cbz	r3, b518a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b5184:	f7ff fef2 	bl	b4f6c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b5188:	60a0      	str	r0, [r4, #8]
    return true;
   b518a:	2001      	movs	r0, #1
   b518c:	e000      	b.n	b5190 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b518e:	4618      	mov	r0, r3
}
   b5190:	bd10      	pop	{r4, pc}

000b5192 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b5192:	b510      	push	{r4, lr}
    write('}');
   b5194:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b5196:	4604      	mov	r4, r0
    write('}');
   b5198:	f7ff ff49 	bl	b502e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b519c:	2301      	movs	r3, #1
   b519e:	7123      	strb	r3, [r4, #4]
}
   b51a0:	4620      	mov	r0, r4
   b51a2:	bd10      	pop	{r4, pc}

000b51a4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b51a4:	b508      	push	{r3, lr}
    switch (state_) {
   b51a6:	7903      	ldrb	r3, [r0, #4]
   b51a8:	2b01      	cmp	r3, #1
   b51aa:	d002      	beq.n	b51b2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b51ac:	2b02      	cmp	r3, #2
   b51ae:	d004      	beq.n	b51ba <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b51b0:	bd08      	pop	{r3, pc}
        write(',');
   b51b2:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b51b4:	f7ff ff3b 	bl	b502e <_ZN5spark10JSONWriter5writeEc>
}
   b51b8:	e7fa      	b.n	b51b0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b51ba:	213a      	movs	r1, #58	; 0x3a
   b51bc:	e7fa      	b.n	b51b4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b51be <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b51be:	b510      	push	{r4, lr}
   b51c0:	4604      	mov	r4, r0
    writeSeparator();
   b51c2:	f7ff ffef 	bl	b51a4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b51c6:	4620      	mov	r0, r4
   b51c8:	217b      	movs	r1, #123	; 0x7b
   b51ca:	f7ff ff30 	bl	b502e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b51ce:	2300      	movs	r3, #0
   b51d0:	7123      	strb	r3, [r4, #4]
}
   b51d2:	4620      	mov	r0, r4
   b51d4:	bd10      	pop	{r4, pc}
	...

000b51d8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b51d8:	b513      	push	{r0, r1, r4, lr}
   b51da:	4604      	mov	r4, r0
   b51dc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b51de:	f7ff ffe1 	bl	b51a4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b51e2:	6823      	ldr	r3, [r4, #0]
   b51e4:	9a01      	ldr	r2, [sp, #4]
   b51e6:	68db      	ldr	r3, [r3, #12]
   b51e8:	4903      	ldr	r1, [pc, #12]	; (b51f8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b51ea:	4620      	mov	r0, r4
   b51ec:	4798      	blx	r3
    state_ = NEXT;
   b51ee:	2301      	movs	r3, #1
}
   b51f0:	4620      	mov	r0, r4
    state_ = NEXT;
   b51f2:	7123      	strb	r3, [r4, #4]
}
   b51f4:	b002      	add	sp, #8
   b51f6:	bd10      	pop	{r4, pc}
   b51f8:	000b6db1 	.word	0x000b6db1

000b51fc <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b51fc:	b513      	push	{r0, r1, r4, lr}
   b51fe:	4604      	mov	r4, r0
   b5200:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b5202:	f7ff ffcf 	bl	b51a4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b5206:	6823      	ldr	r3, [r4, #0]
   b5208:	9a01      	ldr	r2, [sp, #4]
   b520a:	68db      	ldr	r3, [r3, #12]
   b520c:	4903      	ldr	r1, [pc, #12]	; (b521c <_ZN5spark10JSONWriter5valueEj+0x20>)
   b520e:	4620      	mov	r0, r4
   b5210:	4798      	blx	r3
    state_ = NEXT;
   b5212:	2301      	movs	r3, #1
}
   b5214:	4620      	mov	r0, r4
    state_ = NEXT;
   b5216:	7123      	strb	r3, [r4, #4]
}
   b5218:	b002      	add	sp, #8
   b521a:	bd10      	pop	{r4, pc}
   b521c:	000b6ec0 	.word	0x000b6ec0

000b5220 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5224:	460d      	mov	r5, r1
    write('"');
   b5226:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5228:	4690      	mov	r8, r2
   b522a:	4604      	mov	r4, r0
    write('"');
   b522c:	f7ff feff 	bl	b502e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b5230:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b52d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b5234:	44a8      	add	r8, r5
    const char *s = str;
   b5236:	462f      	mov	r7, r5
    while (s != end) {
   b5238:	4547      	cmp	r7, r8
   b523a:	46ba      	mov	sl, r7
   b523c:	d03d      	beq.n	b52ba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b523e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b5242:	2e22      	cmp	r6, #34	; 0x22
   b5244:	d006      	beq.n	b5254 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b5246:	2e5c      	cmp	r6, #92	; 0x5c
   b5248:	d004      	beq.n	b5254 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b524a:	4630      	mov	r0, r6
   b524c:	f001 fbcc 	bl	b69e8 <isprint>
   b5250:	2800      	cmp	r0, #0
   b5252:	d1f1      	bne.n	b5238 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b5254:	6823      	ldr	r3, [r4, #0]
   b5256:	ebaa 0205 	sub.w	r2, sl, r5
   b525a:	689b      	ldr	r3, [r3, #8]
   b525c:	4629      	mov	r1, r5
   b525e:	4620      	mov	r0, r4
   b5260:	4798      	blx	r3
            write('\\');
   b5262:	215c      	movs	r1, #92	; 0x5c
   b5264:	4620      	mov	r0, r4
   b5266:	f7ff fee2 	bl	b502e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b526a:	2e0d      	cmp	r6, #13
   b526c:	d80a      	bhi.n	b5284 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b526e:	2e07      	cmp	r6, #7
   b5270:	d91c      	bls.n	b52ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5272:	f1a6 0308 	sub.w	r3, r6, #8
   b5276:	2b05      	cmp	r3, #5
   b5278:	d818      	bhi.n	b52ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b527a:	e8df f003 	tbb	[pc, r3]
   b527e:	0f0d      	.short	0x0f0d
   b5280:	15131711 	.word	0x15131711
   b5284:	2e22      	cmp	r6, #34	; 0x22
   b5286:	d001      	beq.n	b528c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b5288:	2e5c      	cmp	r6, #92	; 0x5c
   b528a:	d10f      	bne.n	b52ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b528c:	4631      	mov	r1, r6
                write('b');
   b528e:	4620      	mov	r0, r4
   b5290:	f7ff fecd 	bl	b502e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b5294:	463d      	mov	r5, r7
    while (s != end) {
   b5296:	e7cf      	b.n	b5238 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b5298:	2162      	movs	r1, #98	; 0x62
   b529a:	e7f8      	b.n	b528e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b529c:	2174      	movs	r1, #116	; 0x74
   b529e:	e7f6      	b.n	b528e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b52a0:	216e      	movs	r1, #110	; 0x6e
   b52a2:	e7f4      	b.n	b528e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b52a4:	2166      	movs	r1, #102	; 0x66
   b52a6:	e7f2      	b.n	b528e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b52a8:	2172      	movs	r1, #114	; 0x72
   b52aa:	e7f0      	b.n	b528e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b52ac:	6823      	ldr	r3, [r4, #0]
   b52ae:	4632      	mov	r2, r6
   b52b0:	68db      	ldr	r3, [r3, #12]
   b52b2:	4649      	mov	r1, r9
   b52b4:	4620      	mov	r0, r4
   b52b6:	4798      	blx	r3
                break;
   b52b8:	e7ec      	b.n	b5294 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b52ba:	42bd      	cmp	r5, r7
   b52bc:	d005      	beq.n	b52ca <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b52be:	6823      	ldr	r3, [r4, #0]
   b52c0:	1b7a      	subs	r2, r7, r5
   b52c2:	689b      	ldr	r3, [r3, #8]
   b52c4:	4629      	mov	r1, r5
   b52c6:	4620      	mov	r0, r4
   b52c8:	4798      	blx	r3
    }
    write('"');
   b52ca:	2122      	movs	r1, #34	; 0x22
   b52cc:	4620      	mov	r0, r4
   b52ce:	f7ff feae 	bl	b502e <_ZN5spark10JSONWriter5writeEc>
}
   b52d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b52d6:	bf00      	nop
   b52d8:	000b6ec3 	.word	0x000b6ec3

000b52dc <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b52dc:	b513      	push	{r0, r1, r4, lr}
   b52de:	4604      	mov	r4, r0
   b52e0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b52e4:	f7ff ff5e 	bl	b51a4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b52e8:	4620      	mov	r0, r4
   b52ea:	e9dd 2100 	ldrd	r2, r1, [sp]
   b52ee:	f7ff ff97 	bl	b5220 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b52f2:	2302      	movs	r3, #2
}
   b52f4:	4620      	mov	r0, r4
    state_ = VALUE;
   b52f6:	7123      	strb	r3, [r4, #4]
}
   b52f8:	b002      	add	sp, #8
   b52fa:	bd10      	pop	{r4, pc}

000b52fc <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b52fc:	b513      	push	{r0, r1, r4, lr}
   b52fe:	4604      	mov	r4, r0
   b5300:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b5304:	f7ff ff4e 	bl	b51a4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b5308:	4620      	mov	r0, r4
   b530a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b530e:	f7ff ff87 	bl	b5220 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b5312:	2301      	movs	r3, #1
}
   b5314:	4620      	mov	r0, r4
    state_ = NEXT;
   b5316:	7123      	strb	r3, [r4, #4]
}
   b5318:	b002      	add	sp, #8
   b531a:	bd10      	pop	{r4, pc}

000b531c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b531c:	6880      	ldr	r0, [r0, #8]
   b531e:	6803      	ldr	r3, [r0, #0]
   b5320:	68db      	ldr	r3, [r3, #12]
   b5322:	4718      	bx	r3

000b5324 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b5324:	4770      	bx	lr

000b5326 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b5326:	4608      	mov	r0, r1
   b5328:	b111      	cbz	r1, b5330 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b532a:	680b      	ldr	r3, [r1, #0]
   b532c:	685b      	ldr	r3, [r3, #4]
   b532e:	4718      	bx	r3
}
   b5330:	4770      	bx	lr

000b5332 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b5332:	4770      	bx	lr

000b5334 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5334:	4770      	bx	lr

000b5336 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b5336:	4770      	bx	lr

000b5338 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b5338:	4770      	bx	lr

000b533a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b533a:	b538      	push	{r3, r4, r5, lr}
   b533c:	4604      	mov	r4, r0
   b533e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5340:	6800      	ldr	r0, [r0, #0]
   b5342:	212e      	movs	r1, #46	; 0x2e
   b5344:	f001 fbc3 	bl	b6ace <strchrnul>
    size = s - category;
   b5348:	6823      	ldr	r3, [r4, #0]
   b534a:	1ac3      	subs	r3, r0, r3
   b534c:	602b      	str	r3, [r5, #0]
    if (size) {
   b534e:	b123      	cbz	r3, b535a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b5350:	7803      	ldrb	r3, [r0, #0]
   b5352:	b103      	cbz	r3, b5356 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b5354:	3001      	adds	r0, #1
   b5356:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5358:	6020      	str	r0, [r4, #0]
}
   b535a:	4618      	mov	r0, r3
   b535c:	bd38      	pop	{r3, r4, r5, pc}

000b535e <_ZN5spark16JSONStreamWriterD0Ev>:
   b535e:	b510      	push	{r4, lr}
   b5360:	210c      	movs	r1, #12
   b5362:	4604      	mov	r4, r0
   b5364:	f7fe fe99 	bl	b409a <_ZdlPvj>
   b5368:	4620      	mov	r0, r4
   b536a:	bd10      	pop	{r4, pc}

000b536c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b536c:	b510      	push	{r4, lr}
   b536e:	2104      	movs	r1, #4
   b5370:	4604      	mov	r4, r0
   b5372:	f7fe fe92 	bl	b409a <_ZdlPvj>
   b5376:	4620      	mov	r0, r4
   b5378:	bd10      	pop	{r4, pc}

000b537a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b537a:	b510      	push	{r4, lr}
   b537c:	2104      	movs	r1, #4
   b537e:	4604      	mov	r4, r0
   b5380:	f7fe fe8b 	bl	b409a <_ZdlPvj>
   b5384:	4620      	mov	r0, r4
   b5386:	bd10      	pop	{r4, pc}

000b5388 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5388:	f7ff b814 	b.w	b43b4 <os_mutex_recursive_lock>

000b538c <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b538c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b538e:	f001 fba8 	bl	b6ae2 <strcmp>
}
   b5392:	fab0 f080 	clz	r0, r0
   b5396:	0940      	lsrs	r0, r0, #5
   b5398:	bd08      	pop	{r3, pc}

000b539a <__tcf_1>:
   b539a:	4770      	bx	lr

000b539c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b539c:	b510      	push	{r4, lr}
   b539e:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b53a0:	f001 fa12 	bl	b67c8 <_Z16_fetch_usbserialv>
   b53a4:	4284      	cmp	r4, r0
   b53a6:	d010      	beq.n	b53ca <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b53a8:	f001 faec 	bl	b6984 <_Z22__fetch_global_Serial1v>
   b53ac:	4284      	cmp	r4, r0
   b53ae:	d105      	bne.n	b53bc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b53b0:	f001 fae8 	bl	b6984 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b53b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b53b8:	f001 b9a1 	b.w	b66fe <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b53bc:	b12c      	cbz	r4, b53ca <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b53be:	6823      	ldr	r3, [r4, #0]
   b53c0:	4620      	mov	r0, r4
   b53c2:	685b      	ldr	r3, [r3, #4]
}
   b53c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b53c8:	4718      	bx	r3
   b53ca:	bd10      	pop	{r4, pc}

000b53cc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b53cc:	680b      	ldr	r3, [r1, #0]
   b53ce:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b53d0:	684b      	ldr	r3, [r1, #4]
   b53d2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b53d4:	b113      	cbz	r3, b53dc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b53d6:	685a      	ldr	r2, [r3, #4]
   b53d8:	3201      	adds	r2, #1
   b53da:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b53dc:	4770      	bx	lr

000b53de <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b53de:	b513      	push	{r0, r1, r4, lr}
   b53e0:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b53e2:	4608      	mov	r0, r1
   b53e4:	9101      	str	r1, [sp, #4]
   b53e6:	f001 fbac 	bl	b6b42 <strlen>
   b53ea:	9901      	ldr	r1, [sp, #4]
   b53ec:	4602      	mov	r2, r0
   b53ee:	4620      	mov	r0, r4
}
   b53f0:	b002      	add	sp, #8
   b53f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b53f6:	f7ff bf81 	b.w	b52fc <_ZN5spark10JSONWriter5valueEPKcj>

000b53fa <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b53fa:	b513      	push	{r0, r1, r4, lr}
   b53fc:	4604      	mov	r4, r0
    write(str, strlen(str));
   b53fe:	4608      	mov	r0, r1
   b5400:	9101      	str	r1, [sp, #4]
   b5402:	f001 fb9e 	bl	b6b42 <strlen>
   b5406:	6823      	ldr	r3, [r4, #0]
   b5408:	9901      	ldr	r1, [sp, #4]
   b540a:	68db      	ldr	r3, [r3, #12]
   b540c:	4602      	mov	r2, r0
   b540e:	4620      	mov	r0, r4
}
   b5410:	b002      	add	sp, #8
   b5412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b5416:	4718      	bx	r3

000b5418 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b5418:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b541a:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b541c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5420:	68db      	ldr	r3, [r3, #12]
   b5422:	2201      	movs	r2, #1
   b5424:	f10d 0107 	add.w	r1, sp, #7
   b5428:	4798      	blx	r3
}
   b542a:	b003      	add	sp, #12
   b542c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5430 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5430:	b40e      	push	{r1, r2, r3}
   b5432:	b503      	push	{r0, r1, lr}
   b5434:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b5436:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5438:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b543c:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b543e:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b5440:	f000 ffe7 	bl	b6412 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b5444:	b002      	add	sp, #8
   b5446:	f85d eb04 	ldr.w	lr, [sp], #4
   b544a:	b003      	add	sp, #12
   b544c:	4770      	bx	lr

000b544e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b544e:	680a      	ldr	r2, [r1, #0]
   b5450:	6002      	str	r2, [r0, #0]
   b5452:	684a      	ldr	r2, [r1, #4]
   b5454:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b5456:	2200      	movs	r2, #0
   b5458:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b545c:	b510      	push	{r4, lr}
   b545e:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5460:	688c      	ldr	r4, [r1, #8]
   b5462:	6084      	str	r4, [r0, #8]
   b5464:	68cc      	ldr	r4, [r1, #12]
   b5466:	60c4      	str	r4, [r0, #12]
   b5468:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b546a:	608a      	str	r2, [r1, #8]
   b546c:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b546e:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5470:	610a      	str	r2, [r1, #16]
   b5472:	bd10      	pop	{r4, pc}

000b5474 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b5478:	e9d0 8400 	ldrd	r8, r4, [r0]
   b547c:	f04f 0a14 	mov.w	sl, #20
   b5480:	9300      	str	r3, [sp, #0]
   b5482:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b5486:	4b18      	ldr	r3, [pc, #96]	; (b54e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5488:	10a4      	asrs	r4, r4, #2
   b548a:	4617      	mov	r7, r2
   b548c:	435c      	muls	r4, r3
   b548e:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b5490:	2c00      	cmp	r4, #0
   b5492:	dd21      	ble.n	b54d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b5494:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b5496:	fb0a f006 	mul.w	r0, sl, r6
   b549a:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b549e:	463a      	mov	r2, r7
   b54a0:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b54a4:	5828      	ldr	r0, [r5, r0]
   b54a6:	9101      	str	r1, [sp, #4]
   b54a8:	455f      	cmp	r7, fp
   b54aa:	bf28      	it	cs
   b54ac:	465a      	movcs	r2, fp
   b54ae:	f001 fb50 	bl	b6b52 <strncmp>
                if (cmp == 0) {
   b54b2:	2800      	cmp	r0, #0
   b54b4:	9901      	ldr	r1, [sp, #4]
   b54b6:	f04f 0301 	mov.w	r3, #1
   b54ba:	d10b      	bne.n	b54d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b54bc:	455f      	cmp	r7, fp
   b54be:	d103      	bne.n	b54c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b54c0:	9a00      	ldr	r2, [sp, #0]
   b54c2:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b54c4:	4634      	mov	r4, r6
   b54c6:	e7e3      	b.n	b5490 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b54c8:	d9fc      	bls.n	b54c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b54ca:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b54cc:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b54d0:	3e01      	subs	r6, #1
   b54d2:	e7f7      	b.n	b54c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b54d4:	dbf9      	blt.n	b54ca <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b54d6:	e7f5      	b.n	b54c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b54d8:	eba5 0508 	sub.w	r5, r5, r8
}
   b54dc:	4802      	ldr	r0, [pc, #8]	; (b54e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b54de:	10ad      	asrs	r5, r5, #2
   b54e0:	4368      	muls	r0, r5
   b54e2:	b003      	add	sp, #12
   b54e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b54e8:	cccccccd 	.word	0xcccccccd

000b54ec <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b54ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b54ee:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b54f0:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b54f2:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b54f4:	b303      	cbz	r3, b5538 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b54f6:	b1f9      	cbz	r1, b5538 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b54f8:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b54fa:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b54fe:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b5500:	a903      	add	r1, sp, #12
   b5502:	a801      	add	r0, sp, #4
   b5504:	f7ff ff19 	bl	b533a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5508:	4601      	mov	r1, r0
   b550a:	b1a8      	cbz	r0, b5538 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b550c:	f10d 030b 	add.w	r3, sp, #11
   b5510:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b5512:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5516:	4620      	mov	r0, r4
   b5518:	f7ff ffac 	bl	b5474 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b551c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b5520:	b153      	cbz	r3, b5538 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b5522:	6823      	ldr	r3, [r4, #0]
   b5524:	2414      	movs	r4, #20
   b5526:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b552a:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b552c:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b5530:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b5532:	bfa8      	it	ge
   b5534:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b5536:	e7e3      	b.n	b5500 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b5538:	4628      	mov	r0, r5
   b553a:	b004      	add	sp, #16
   b553c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5540 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b5540:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b5542:	4c09      	ldr	r4, [pc, #36]	; (b5568 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b5544:	7823      	ldrb	r3, [r4, #0]
   b5546:	f3bf 8f5b 	dmb	ish
   b554a:	07db      	lsls	r3, r3, #31
   b554c:	d409      	bmi.n	b5562 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b554e:	4620      	mov	r0, r4
   b5550:	f7fe fdb2 	bl	b40b8 <__cxa_guard_acquire>
   b5554:	b128      	cbz	r0, b5562 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b5556:	4620      	mov	r0, r4
   b5558:	f7fe fdb3 	bl	b40c2 <__cxa_guard_release>
   b555c:	4803      	ldr	r0, [pc, #12]	; (b556c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b555e:	f001 fa3c 	bl	b69da <atexit>
}
   b5562:	4803      	ldr	r0, [pc, #12]	; (b5570 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b5564:	bd10      	pop	{r4, pc}
   b5566:	bf00      	nop
   b5568:	2003e6c4 	.word	0x2003e6c4
   b556c:	000b5333 	.word	0x000b5333
   b5570:	2003e5e0 	.word	0x2003e5e0

000b5574 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b5574:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b5576:	4c09      	ldr	r4, [pc, #36]	; (b559c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b5578:	7823      	ldrb	r3, [r4, #0]
   b557a:	f3bf 8f5b 	dmb	ish
   b557e:	07db      	lsls	r3, r3, #31
   b5580:	d409      	bmi.n	b5596 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5582:	4620      	mov	r0, r4
   b5584:	f7fe fd98 	bl	b40b8 <__cxa_guard_acquire>
   b5588:	b128      	cbz	r0, b5596 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b558a:	4620      	mov	r0, r4
   b558c:	f7fe fd99 	bl	b40c2 <__cxa_guard_release>
   b5590:	4803      	ldr	r0, [pc, #12]	; (b55a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b5592:	f001 fa22 	bl	b69da <atexit>
    return &factory;
}
   b5596:	4803      	ldr	r0, [pc, #12]	; (b55a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b5598:	bd10      	pop	{r4, pc}
   b559a:	bf00      	nop
   b559c:	2003e6c8 	.word	0x2003e6c8
   b55a0:	000b539b 	.word	0x000b539b
   b55a4:	2003e5e4 	.word	0x2003e5e4

000b55a8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b55a8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b55aa:	2500      	movs	r5, #0
   b55ac:	4604      	mov	r4, r0
   b55ae:	e9c0 5500 	strd	r5, r5, [r0]
   b55b2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b55b6:	6085      	str	r5, [r0, #8]
   b55b8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b55ba:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b55be:	f7fe fee9 	bl	b4394 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b55c2:	f7ff ffbd 	bl	b5540 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b55c6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b55c8:	f7ff ffd4 	bl	b5574 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b55cc:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b55ce:	6220      	str	r0, [r4, #32]
}
   b55d0:	4620      	mov	r0, r4
   b55d2:	bd38      	pop	{r3, r4, r5, pc}

000b55d4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b55d4:	b510      	push	{r4, lr}
    static LogManager mgr;
   b55d6:	4c0a      	ldr	r4, [pc, #40]	; (b5600 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b55d8:	7823      	ldrb	r3, [r4, #0]
   b55da:	f3bf 8f5b 	dmb	ish
   b55de:	07db      	lsls	r3, r3, #31
   b55e0:	d40c      	bmi.n	b55fc <_ZN5spark10LogManager8instanceEv+0x28>
   b55e2:	4620      	mov	r0, r4
   b55e4:	f7fe fd68 	bl	b40b8 <__cxa_guard_acquire>
   b55e8:	b140      	cbz	r0, b55fc <_ZN5spark10LogManager8instanceEv+0x28>
   b55ea:	4806      	ldr	r0, [pc, #24]	; (b5604 <_ZN5spark10LogManager8instanceEv+0x30>)
   b55ec:	f7ff ffdc 	bl	b55a8 <_ZN5spark10LogManagerC1Ev>
   b55f0:	4620      	mov	r0, r4
   b55f2:	f7fe fd66 	bl	b40c2 <__cxa_guard_release>
   b55f6:	4804      	ldr	r0, [pc, #16]	; (b5608 <_ZN5spark10LogManager8instanceEv+0x34>)
   b55f8:	f001 f9ef 	bl	b69da <atexit>
    return &mgr;
}
   b55fc:	4801      	ldr	r0, [pc, #4]	; (b5604 <_ZN5spark10LogManager8instanceEv+0x30>)
   b55fe:	bd10      	pop	{r4, pc}
   b5600:	2003e6c0 	.word	0x2003e6c0
   b5604:	2003e6d0 	.word	0x2003e6d0
   b5608:	000b5b29 	.word	0x000b5b29

000b560c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b560c:	4a02      	ldr	r2, [pc, #8]	; (b5618 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b560e:	4903      	ldr	r1, [pc, #12]	; (b561c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b5610:	4803      	ldr	r0, [pc, #12]	; (b5620 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b5612:	2300      	movs	r3, #0
   b5614:	f7fe bfae 	b.w	b4574 <log_set_callbacks>
   b5618:	000b590d 	.word	0x000b590d
   b561c:	000b5899 	.word	0x000b5899
   b5620:	000b5819 	.word	0x000b5819

000b5624 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b5624:	2300      	movs	r3, #0
   b5626:	461a      	mov	r2, r3
   b5628:	4619      	mov	r1, r3
   b562a:	4618      	mov	r0, r3
   b562c:	f7fe bfa2 	b.w	b4574 <log_set_callbacks>

000b5630 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5630:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b5632:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5634:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5636:	4668      	mov	r0, sp
   b5638:	f7ff fec8 	bl	b53cc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b563c:	466a      	mov	r2, sp
   b563e:	4629      	mov	r1, r5
   b5640:	4620      	mov	r0, r4
   b5642:	f7ff fd7b 	bl	b513c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b5646:	a801      	add	r0, sp, #4
   b5648:	f7ff f8d3 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b564c:	4620      	mov	r0, r4
   b564e:	b003      	add	sp, #12
   b5650:	bd30      	pop	{r4, r5, pc}

000b5652 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b5652:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b5654:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b5656:	4604      	mov	r4, r0
   b5658:	4668      	mov	r0, sp
   b565a:	f7ff feb7 	bl	b53cc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b565e:	466a      	mov	r2, sp
   b5660:	4629      	mov	r1, r5
   b5662:	4620      	mov	r0, r4
   b5664:	f7ff fd46 	bl	b50f4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5668:	a801      	add	r0, sp, #4
   b566a:	f7ff f8c2 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b566e:	4620      	mov	r0, r4
   b5670:	b003      	add	sp, #12
   b5672:	bd30      	pop	{r4, r5, pc}

000b5674 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5674:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b5676:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5678:	4604      	mov	r4, r0
   b567a:	4668      	mov	r0, sp
   b567c:	f7ff fea6 	bl	b53cc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b5680:	466a      	mov	r2, sp
   b5682:	4629      	mov	r1, r5
   b5684:	4620      	mov	r0, r4
   b5686:	f7ff fcde 	bl	b5046 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b568a:	a801      	add	r0, sp, #4
   b568c:	f7ff f8b1 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5690:	4620      	mov	r0, r4
   b5692:	b003      	add	sp, #12
   b5694:	bd30      	pop	{r4, r5, pc}
	...

000b5698 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b5698:	b570      	push	{r4, r5, r6, lr}
   b569a:	b08a      	sub	sp, #40	; 0x28
   b569c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b569e:	4601      	mov	r1, r0
   b56a0:	a804      	add	r0, sp, #16
   b56a2:	f7ff ffc5 	bl	b5630 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b56a6:	4e14      	ldr	r6, [pc, #80]	; (b56f8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b56a8:	a804      	add	r0, sp, #16
   b56aa:	f7ff fd5f 	bl	b516c <_ZN5spark18JSONObjectIterator4nextEv>
   b56ae:	b1e8      	cbz	r0, b56ec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b56b0:	a904      	add	r1, sp, #16
   b56b2:	4668      	mov	r0, sp
   b56b4:	f7ff ffcd 	bl	b5652 <_ZNK5spark18JSONObjectIterator4nameEv>
   b56b8:	9802      	ldr	r0, [sp, #8]
   b56ba:	4631      	mov	r1, r6
   b56bc:	f7ff fe66 	bl	b538c <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b56c0:	4604      	mov	r4, r0
   b56c2:	b110      	cbz	r0, b56ca <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b56c4:	1e2c      	subs	r4, r5, #0
   b56c6:	bf18      	it	ne
   b56c8:	2401      	movne	r4, #1
   b56ca:	a801      	add	r0, sp, #4
   b56cc:	f7ff f891 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b56d0:	2c00      	cmp	r4, #0
   b56d2:	d0e9      	beq.n	b56a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b56d4:	a904      	add	r1, sp, #16
   b56d6:	4668      	mov	r0, sp
   b56d8:	f7ff ffcc 	bl	b5674 <_ZNK5spark18JSONObjectIterator5valueEv>
   b56dc:	4668      	mov	r0, sp
   b56de:	f7ff fce8 	bl	b50b2 <_ZNK5spark9JSONValue5toIntEv>
   b56e2:	6028      	str	r0, [r5, #0]
   b56e4:	a801      	add	r0, sp, #4
   b56e6:	f7ff f884 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b56ea:	e7dd      	b.n	b56a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b56ec:	a805      	add	r0, sp, #20
   b56ee:	f7ff f880 	bl	b47f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b56f2:	b00a      	add	sp, #40	; 0x28
   b56f4:	bd70      	pop	{r4, r5, r6, pc}
   b56f6:	bf00      	nop
   b56f8:	000b6ec9 	.word	0x000b6ec9

000b56fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b56fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b56fe:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b5700:	4620      	mov	r0, r4
   b5702:	4913      	ldr	r1, [pc, #76]	; (b5750 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5704:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b5706:	f001 f9ec 	bl	b6ae2 <strcmp>
   b570a:	b950      	cbnz	r0, b5722 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b570c:	f001 f85c 	bl	b67c8 <_Z16_fetch_usbserialv>
   b5710:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5714:	f001 f848 	bl	b67a8 <_ZN9USBSerial5beginEl>
}
   b5718:	b003      	add	sp, #12
   b571a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b571e:	f001 b853 	b.w	b67c8 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b5722:	490c      	ldr	r1, [pc, #48]	; (b5754 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b5724:	4620      	mov	r0, r4
   b5726:	f001 f9dc 	bl	b6ae2 <strcmp>
   b572a:	b978      	cbnz	r0, b574c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b572c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b5730:	a901      	add	r1, sp, #4
   b5732:	4628      	mov	r0, r5
        int baud = 9600;
   b5734:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b5736:	f7ff ffaf 	bl	b5698 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b573a:	f001 f923 	bl	b6984 <_Z22__fetch_global_Serial1v>
   b573e:	9901      	ldr	r1, [sp, #4]
   b5740:	f000 ffda 	bl	b66f8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b5744:	f001 f91e 	bl	b6984 <_Z22__fetch_global_Serial1v>
}
   b5748:	b003      	add	sp, #12
   b574a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b574c:	2000      	movs	r0, #0
   b574e:	e7fb      	b.n	b5748 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b5750:	000b6ece 	.word	0x000b6ece
   b5754:	000b6ed5 	.word	0x000b6ed5

000b5758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5758:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b575a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b575e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5760:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5762:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5766:	42ae      	cmp	r6, r5
   b5768:	d005      	beq.n	b5776 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b576a:	f105 0008 	add.w	r0, r5, #8
   b576e:	f7ff fff3 	bl	b5758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5772:	3514      	adds	r5, #20
   b5774:	e7f7      	b.n	b5766 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5776:	6820      	ldr	r0, [r4, #0]
   b5778:	f7fe ffb8 	bl	b46ec <free>
}
   b577c:	4620      	mov	r0, r4
   b577e:	bd70      	pop	{r4, r5, r6, pc}

000b5780 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b5780:	b510      	push	{r4, lr}
   b5782:	4604      	mov	r4, r0
   b5784:	300c      	adds	r0, #12
   b5786:	f7ff ffe7 	bl	b5758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b578a:	4620      	mov	r0, r4
   b578c:	f7ff f81f 	bl	b47ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5790:	4620      	mov	r0, r4
   b5792:	bd10      	pop	{r4, pc}

000b5794 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b5794:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b5796:	4b04      	ldr	r3, [pc, #16]	; (b57a8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b5798:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b579a:	f840 3b04 	str.w	r3, [r0], #4
   b579e:	f7ff ffef 	bl	b5780 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b57a2:	4620      	mov	r0, r4
   b57a4:	bd10      	pop	{r4, pc}
   b57a6:	bf00      	nop
   b57a8:	000b6de0 	.word	0x000b6de0

000b57ac <_ZN5spark16StreamLogHandlerD0Ev>:
   b57ac:	b510      	push	{r4, lr}
   b57ae:	4604      	mov	r4, r0
   b57b0:	f7ff fff0 	bl	b5794 <_ZN5spark16StreamLogHandlerD1Ev>
   b57b4:	4620      	mov	r0, r4
   b57b6:	2124      	movs	r1, #36	; 0x24
   b57b8:	f7fe fc6f 	bl	b409a <_ZdlPvj>
   b57bc:	4620      	mov	r0, r4
   b57be:	bd10      	pop	{r4, pc}

000b57c0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b57c0:	b510      	push	{r4, lr}
   b57c2:	4b03      	ldr	r3, [pc, #12]	; (b57d0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b57c4:	6003      	str	r3, [r0, #0]
   b57c6:	4604      	mov	r4, r0
   b57c8:	f7ff ffe4 	bl	b5794 <_ZN5spark16StreamLogHandlerD1Ev>
   b57cc:	4620      	mov	r0, r4
   b57ce:	bd10      	pop	{r4, pc}
   b57d0:	000b6f74 	.word	0x000b6f74

000b57d4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b57d4:	b510      	push	{r4, lr}
   b57d6:	4604      	mov	r4, r0
   b57d8:	f7ff fff2 	bl	b57c0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b57dc:	4620      	mov	r0, r4
   b57de:	2124      	movs	r1, #36	; 0x24
   b57e0:	f7fe fc5b 	bl	b409a <_ZdlPvj>
   b57e4:	4620      	mov	r0, r4
   b57e6:	bd10      	pop	{r4, pc}

000b57e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b57e8:	2200      	movs	r2, #0
   b57ea:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b57ee:	b510      	push	{r4, lr}
        capacity_(0) {
   b57f0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b57f2:	680c      	ldr	r4, [r1, #0]
   b57f4:	6004      	str	r4, [r0, #0]
   b57f6:	684c      	ldr	r4, [r1, #4]
   b57f8:	6044      	str	r4, [r0, #4]
   b57fa:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b57fc:	600a      	str	r2, [r1, #0]
   b57fe:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5800:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5802:	608a      	str	r2, [r1, #8]
}
   b5804:	bd10      	pop	{r4, pc}

000b5806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b5806:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5808:	6803      	ldr	r3, [r0, #0]
   b580a:	4604      	mov	r4, r0
   b580c:	6818      	ldr	r0, [r3, #0]
   b580e:	f7fe fdd9 	bl	b43c4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b5812:	4620      	mov	r0, r4
   b5814:	bd10      	pop	{r4, pc}
	...

000b5818 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b5818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b581c:	b087      	sub	sp, #28
   b581e:	4680      	mov	r8, r0
   b5820:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b5822:	4b1c      	ldr	r3, [pc, #112]	; (b5894 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b5824:	685b      	ldr	r3, [r3, #4]
   b5826:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b582a:	4689      	mov	r9, r1
   b582c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b582e:	b96b      	cbnz	r3, b584c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b5830:	f7ff fed0 	bl	b55d4 <_ZN5spark10LogManager8instanceEv>
   b5834:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5836:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b583a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b583c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b583e:	f7ff fda3 	bl	b5388 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b5842:	7b23      	ldrb	r3, [r4, #12]
   b5844:	b12b      	cbz	r3, b5852 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b5846:	a805      	add	r0, sp, #20
   b5848:	f7ff ffdd 	bl	b5806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b584c:	b007      	add	sp, #28
   b584e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b5852:	2301      	movs	r3, #1
   b5854:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b5856:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b585a:	fa5f f989 	uxtb.w	r9, r9
   b585e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5862:	45aa      	cmp	sl, r5
   b5864:	d012      	beq.n	b588c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b5866:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b586a:	4631      	mov	r1, r6
   b586c:	1d38      	adds	r0, r7, #4
   b586e:	f7ff fe3d 	bl	b54ec <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5872:	4581      	cmp	r9, r0
   b5874:	d3f5      	bcc.n	b5862 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b5876:	683b      	ldr	r3, [r7, #0]
   b5878:	9a03      	ldr	r2, [sp, #12]
   b587a:	9200      	str	r2, [sp, #0]
   b587c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b5880:	464a      	mov	r2, r9
   b5882:	4633      	mov	r3, r6
   b5884:	4641      	mov	r1, r8
   b5886:	4638      	mov	r0, r7
   b5888:	47d8      	blx	fp
   b588a:	e7ea      	b.n	b5862 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b588c:	2300      	movs	r3, #0
   b588e:	7323      	strb	r3, [r4, #12]
   b5890:	e7d9      	b.n	b5846 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b5892:	bf00      	nop
   b5894:	e000ed00 	.word	0xe000ed00

000b5898 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b5898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b589c:	469b      	mov	fp, r3
   b589e:	4b1a      	ldr	r3, [pc, #104]	; (b5908 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b58a0:	685b      	ldr	r3, [r3, #4]
   b58a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b58a6:	4680      	mov	r8, r0
   b58a8:	4689      	mov	r9, r1
   b58aa:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b58ac:	b96b      	cbnz	r3, b58ca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b58ae:	f7ff fe91 	bl	b55d4 <_ZN5spark10LogManager8instanceEv>
   b58b2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b58b4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b58b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b58ba:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b58bc:	f7ff fd64 	bl	b5388 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b58c0:	7b23      	ldrb	r3, [r4, #12]
   b58c2:	b12b      	cbz	r3, b58d0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b58c4:	a801      	add	r0, sp, #4
   b58c6:	f7ff ff9e 	bl	b5806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b58ca:	b003      	add	sp, #12
   b58cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b58d0:	2301      	movs	r3, #1
   b58d2:	7323      	strb	r3, [r4, #12]
   b58d4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b58d8:	b2f6      	uxtb	r6, r6
   b58da:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b58de:	4555      	cmp	r5, sl
   b58e0:	d00e      	beq.n	b5900 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b58e2:	f855 7b04 	ldr.w	r7, [r5], #4
   b58e6:	4659      	mov	r1, fp
   b58e8:	1d38      	adds	r0, r7, #4
   b58ea:	f7ff fdff 	bl	b54ec <_ZNK5spark6detail9LogFilter5levelEPKc>
   b58ee:	4286      	cmp	r6, r0
   b58f0:	d3f5      	bcc.n	b58de <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b58f2:	683b      	ldr	r3, [r7, #0]
   b58f4:	464a      	mov	r2, r9
   b58f6:	68db      	ldr	r3, [r3, #12]
   b58f8:	4641      	mov	r1, r8
   b58fa:	4638      	mov	r0, r7
   b58fc:	4798      	blx	r3
   b58fe:	e7ee      	b.n	b58de <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b5900:	2300      	movs	r3, #0
   b5902:	7323      	strb	r3, [r4, #12]
   b5904:	e7de      	b.n	b58c4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b5906:	bf00      	nop
   b5908:	e000ed00 	.word	0xe000ed00

000b590c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b590c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5910:	4b16      	ldr	r3, [pc, #88]	; (b596c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b5912:	685b      	ldr	r3, [r3, #4]
   b5914:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5918:	4605      	mov	r5, r0
   b591a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b591c:	bb1b      	cbnz	r3, b5966 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b591e:	f7ff fe59 	bl	b55d4 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b5922:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b5926:	4604      	mov	r4, r0
   b5928:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b592a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b592c:	f7ff fd2c 	bl	b5388 <_ZN14RecursiveMutex4lockEv.isra.0>
   b5930:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b5934:	2446      	movs	r4, #70	; 0x46
   b5936:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b593a:	45b0      	cmp	r8, r6
   b593c:	d109      	bne.n	b5952 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b593e:	a801      	add	r0, sp, #4
   b5940:	f7ff ff61 	bl	b5806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b5944:	42a5      	cmp	r5, r4
   b5946:	bfb4      	ite	lt
   b5948:	2000      	movlt	r0, #0
   b594a:	2001      	movge	r0, #1
}
   b594c:	b002      	add	sp, #8
   b594e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b5952:	f856 0b04 	ldr.w	r0, [r6], #4
   b5956:	4639      	mov	r1, r7
   b5958:	3004      	adds	r0, #4
   b595a:	f7ff fdc7 	bl	b54ec <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b595e:	4284      	cmp	r4, r0
   b5960:	bfa8      	it	ge
   b5962:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b5964:	e7e9      	b.n	b593a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b5966:	2000      	movs	r0, #0
   b5968:	e7f0      	b.n	b594c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b596a:	bf00      	nop
   b596c:	e000ed00 	.word	0xe000ed00

000b5970 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5972:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b5976:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5978:	4604      	mov	r4, r0
   b597a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b597c:	db0d      	blt.n	b599a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b597e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b5980:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5982:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5984:	dd04      	ble.n	b5990 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b5986:	00b9      	lsls	r1, r7, #2
   b5988:	f7fe feb8 	bl	b46fc <realloc>
            if (!d) {
   b598c:	b918      	cbnz	r0, b5996 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b598e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b5990:	f7fe feac 	bl	b46ec <free>
        T* d = nullptr;
   b5994:	2000      	movs	r0, #0
        data_ = d;
   b5996:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5998:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b599a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b599c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b599e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b59a2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b59a4:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b59a8:	1d08      	adds	r0, r1, #4
   b59aa:	f001 f833 	bl	b6a14 <memmove>
    new(p) T(std::move(value));
   b59ae:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b59b2:	6863      	ldr	r3, [r4, #4]
   b59b4:	3301      	adds	r3, #1
   b59b6:	6063      	str	r3, [r4, #4]
    return true;
   b59b8:	2001      	movs	r0, #1
   b59ba:	e7e8      	b.n	b598e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b59bc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b59bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b59be:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b59c2:	4604      	mov	r4, r0
   b59c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b59c6:	9301      	str	r3, [sp, #4]
   b59c8:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b59ca:	f7ff fcdd 	bl	b5388 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b59ce:	e9d4 3200 	ldrd	r3, r2, [r4]
   b59d2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b59d6:	4293      	cmp	r3, r2
   b59d8:	4619      	mov	r1, r3
   b59da:	d00b      	beq.n	b59f4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b59dc:	6809      	ldr	r1, [r1, #0]
   b59de:	42a9      	cmp	r1, r5
   b59e0:	f103 0304 	add.w	r3, r3, #4
   b59e4:	d1f7      	bne.n	b59d6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b59e6:	a801      	add	r0, sp, #4
   b59e8:	f7ff ff0d 	bl	b5806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b59ec:	2500      	movs	r5, #0
}
   b59ee:	4628      	mov	r0, r5
   b59f0:	b003      	add	sp, #12
   b59f2:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b59f4:	4629      	mov	r1, r5
   b59f6:	4620      	mov	r0, r4
   b59f8:	f7ff ffba 	bl	b5970 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b59fc:	4605      	mov	r5, r0
   b59fe:	2800      	cmp	r0, #0
   b5a00:	d0f1      	beq.n	b59e6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b5a02:	6863      	ldr	r3, [r4, #4]
   b5a04:	2b01      	cmp	r3, #1
   b5a06:	d101      	bne.n	b5a0c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b5a08:	f7ff fe00 	bl	b560c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5a0c:	a801      	add	r0, sp, #4
   b5a0e:	f7ff fefa 	bl	b5806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5a12:	e7ec      	b.n	b59ee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b5a14 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5a14:	b570      	push	{r4, r5, r6, lr}
   b5a16:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b5a18:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5a1c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b5a1e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b5a22:	4282      	cmp	r2, r0
   b5a24:	d00f      	beq.n	b5a46 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b5a26:	4601      	mov	r1, r0
            if (*p == value) {
   b5a28:	681d      	ldr	r5, [r3, #0]
   b5a2a:	f851 6b04 	ldr.w	r6, [r1], #4
   b5a2e:	42ae      	cmp	r6, r5
   b5a30:	d107      	bne.n	b5a42 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5a32:	1a52      	subs	r2, r2, r1
   b5a34:	f000 ffee 	bl	b6a14 <memmove>
    --size_;
   b5a38:	6863      	ldr	r3, [r4, #4]
   b5a3a:	3b01      	subs	r3, #1
   b5a3c:	6063      	str	r3, [r4, #4]
    return true;
   b5a3e:	2001      	movs	r0, #1
}
   b5a40:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b5a42:	4608      	mov	r0, r1
   b5a44:	e7ed      	b.n	b5a22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b5a46:	2000      	movs	r0, #0
   b5a48:	e7fa      	b.n	b5a40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b5a4a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5a4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b5a4c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5a50:	4604      	mov	r4, r0
   b5a52:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5a54:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5a56:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b5a58:	f7ff fc96 	bl	b5388 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b5a5c:	a901      	add	r1, sp, #4
   b5a5e:	4620      	mov	r0, r4
   b5a60:	f7ff ffd8 	bl	b5a14 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b5a64:	b118      	cbz	r0, b5a6e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b5a66:	6863      	ldr	r3, [r4, #4]
   b5a68:	b90b      	cbnz	r3, b5a6e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b5a6a:	f7ff fddb 	bl	b5624 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5a6e:	a803      	add	r0, sp, #12
   b5a70:	f7ff fec9 	bl	b5806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5a74:	b004      	add	sp, #16
   b5a76:	bd10      	pop	{r4, pc}

000b5a78 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b5a78:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b5a7a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b5a7e:	2318      	movs	r3, #24
   b5a80:	4604      	mov	r4, r0
   b5a82:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b5a86:	42ae      	cmp	r6, r5
   b5a88:	d015      	beq.n	b5ab6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b5a8a:	f105 0110 	add.w	r1, r5, #16
   b5a8e:	4620      	mov	r0, r4
   b5a90:	f7ff ffc0 	bl	b5a14 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b5a94:	6863      	ldr	r3, [r4, #4]
   b5a96:	b90b      	cbnz	r3, b5a9c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b5a98:	f7ff fdc4 	bl	b5624 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b5a9c:	69e0      	ldr	r0, [r4, #28]
   b5a9e:	6929      	ldr	r1, [r5, #16]
   b5aa0:	6803      	ldr	r3, [r0, #0]
   b5aa2:	68db      	ldr	r3, [r3, #12]
   b5aa4:	4798      	blx	r3
        if (h.stream) {
   b5aa6:	6969      	ldr	r1, [r5, #20]
   b5aa8:	b119      	cbz	r1, b5ab2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b5aaa:	6a20      	ldr	r0, [r4, #32]
   b5aac:	6803      	ldr	r3, [r0, #0]
   b5aae:	68db      	ldr	r3, [r3, #12]
   b5ab0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b5ab2:	3518      	adds	r5, #24
   b5ab4:	e7e7      	b.n	b5a86 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b5ab6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5aba:	2618      	movs	r6, #24
   b5abc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5ac0:	42ae      	cmp	r6, r5
   b5ac2:	d004      	beq.n	b5ace <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b5ac4:	4628      	mov	r0, r5
   b5ac6:	f000 fcdb 	bl	b6480 <_ZN6StringD1Ev>
   b5aca:	3518      	adds	r5, #24
   b5acc:	e7f8      	b.n	b5ac0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b5ace:	2300      	movs	r3, #0
   b5ad0:	6163      	str	r3, [r4, #20]
}
   b5ad2:	bd70      	pop	{r4, r5, r6, pc}

000b5ad4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b5ad4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5ad6:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b5ad8:	f7ff fda4 	bl	b5624 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5adc:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b5ae0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5ae2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5ae4:	f7ff fc50 	bl	b5388 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b5ae8:	4620      	mov	r0, r4
   b5aea:	f7ff ffc5 	bl	b5a78 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b5aee:	a801      	add	r0, sp, #4
   b5af0:	f7ff fe89 	bl	b5806 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b5af4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5af6:	b108      	cbz	r0, b5afc <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b5af8:	f7fe fc54 	bl	b43a4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b5afc:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5b00:	2618      	movs	r6, #24
   b5b02:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5b06:	42ae      	cmp	r6, r5
   b5b08:	d004      	beq.n	b5b14 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b5b0a:	4628      	mov	r0, r5
   b5b0c:	f000 fcb8 	bl	b6480 <_ZN6StringD1Ev>
   b5b10:	3518      	adds	r5, #24
   b5b12:	e7f8      	b.n	b5b06 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b5b14:	6920      	ldr	r0, [r4, #16]
   b5b16:	f7fe fde9 	bl	b46ec <free>
   b5b1a:	6820      	ldr	r0, [r4, #0]
   b5b1c:	f7fe fde6 	bl	b46ec <free>
}
   b5b20:	4620      	mov	r0, r4
   b5b22:	b002      	add	sp, #8
   b5b24:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5b28 <__tcf_2>:
    static LogManager mgr;
   b5b28:	4801      	ldr	r0, [pc, #4]	; (b5b30 <__tcf_2+0x8>)
   b5b2a:	f7ff bfd3 	b.w	b5ad4 <_ZN5spark10LogManagerD1Ev>
   b5b2e:	bf00      	nop
   b5b30:	2003e6d0 	.word	0x2003e6d0

000b5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b5b34:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b38:	4604      	mov	r4, r0
   b5b3a:	460d      	mov	r5, r1
   b5b3c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5b3e:	d915      	bls.n	b5b6c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b5b40:	4290      	cmp	r0, r2
   b5b42:	d214      	bcs.n	b5b6e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b5b44:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5b48:	1a75      	subs	r5, r6, r1
   b5b4a:	f1a1 0714 	sub.w	r7, r1, #20
   b5b4e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5b50:	42b7      	cmp	r7, r6
   b5b52:	d01a      	beq.n	b5b8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b5b54:	b11c      	cbz	r4, b5b5e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b5b56:	4631      	mov	r1, r6
   b5b58:	4620      	mov	r0, r4
   b5b5a:	f7ff fc78 	bl	b544e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b5b5e:	f106 0008 	add.w	r0, r6, #8
   b5b62:	f7ff fdf9 	bl	b5758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b5b66:	3e14      	subs	r6, #20
   b5b68:	3c14      	subs	r4, #20
   b5b6a:	e7f1      	b.n	b5b50 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b5b6c:	d00d      	beq.n	b5b8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b5b6e:	42b5      	cmp	r5, r6
   b5b70:	d00b      	beq.n	b5b8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b5b72:	b11c      	cbz	r4, b5b7c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b5b74:	4629      	mov	r1, r5
   b5b76:	4620      	mov	r0, r4
   b5b78:	f7ff fc69 	bl	b544e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b5b7c:	f105 0008 	add.w	r0, r5, #8
   b5b80:	f7ff fdea 	bl	b5758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b5b84:	3514      	adds	r5, #20
   b5b86:	3414      	adds	r4, #20
   b5b88:	e7f1      	b.n	b5b6e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b5b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5b8c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b90:	4604      	mov	r4, r0
   b5b92:	460d      	mov	r5, r1
   b5b94:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5b96:	d914      	bls.n	b5bc2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b5b98:	4290      	cmp	r0, r2
   b5b9a:	d213      	bcs.n	b5bc4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b5b9c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b5ba0:	1a75      	subs	r5, r6, r1
   b5ba2:	f1a1 0710 	sub.w	r7, r1, #16
   b5ba6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5ba8:	42b7      	cmp	r7, r6
   b5baa:	d018      	beq.n	b5bde <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b5bac:	b11c      	cbz	r4, b5bb6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b5bae:	4631      	mov	r1, r6
   b5bb0:	4620      	mov	r0, r4
   b5bb2:	f000 fce1 	bl	b6578 <_ZN6StringC1EOS_>
                end->~T();
   b5bb6:	4630      	mov	r0, r6
   b5bb8:	f000 fc62 	bl	b6480 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5bbc:	3e10      	subs	r6, #16
   b5bbe:	3c10      	subs	r4, #16
   b5bc0:	e7f2      	b.n	b5ba8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5bc2:	d00c      	beq.n	b5bde <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b5bc4:	42b5      	cmp	r5, r6
   b5bc6:	d00a      	beq.n	b5bde <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b5bc8:	b11c      	cbz	r4, b5bd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b5bca:	4629      	mov	r1, r5
   b5bcc:	4620      	mov	r0, r4
   b5bce:	f000 fcd3 	bl	b6578 <_ZN6StringC1EOS_>
                p->~T();
   b5bd2:	4628      	mov	r0, r5
   b5bd4:	f000 fc54 	bl	b6480 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5bd8:	3510      	adds	r5, #16
   b5bda:	3410      	adds	r4, #16
   b5bdc:	e7f2      	b.n	b5bc4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b5bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5be0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b5be0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5be2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5be4:	4605      	mov	r5, r0
        if (n > 0) {
   b5be6:	dd11      	ble.n	b5c0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5be8:	0130      	lsls	r0, r6, #4
   b5bea:	f7fe fd77 	bl	b46dc <malloc>
            if (!d) {
   b5bee:	4604      	mov	r4, r0
   b5bf0:	b158      	cbz	r0, b5c0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5bf2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5bf6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b5bfa:	f7ff ffc7 	bl	b5b8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5bfe:	6828      	ldr	r0, [r5, #0]
   b5c00:	f7fe fd74 	bl	b46ec <free>
        data_ = d;
   b5c04:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5c06:	60ae      	str	r6, [r5, #8]
        return true;
   b5c08:	2001      	movs	r0, #1
    }
   b5c0a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5c0c:	2400      	movs	r4, #0
   b5c0e:	e7f6      	b.n	b5bfe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b5c10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c14:	4690      	mov	r8, r2
   b5c16:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b5c18:	2300      	movs	r3, #0
   b5c1a:	9103      	str	r1, [sp, #12]
    return size_;
   b5c1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b5c20:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5c22:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b5c24:	4299      	cmp	r1, r3
        capacity_(0) {
   b5c26:	e9c0 3300 	strd	r3, r3, [r0]
   b5c2a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5c32:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5c36:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5c38:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b5c3a:	dc23      	bgt.n	b5c84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b5c3c:	e9d8 5700 	ldrd	r5, r7, [r8]
   b5c40:	2314      	movs	r3, #20
   b5c42:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b5c46:	42af      	cmp	r7, r5
   b5c48:	d03b      	beq.n	b5cc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b5c4a:	4629      	mov	r1, r5
   b5c4c:	a80b      	add	r0, sp, #44	; 0x2c
   b5c4e:	f000 fc93 	bl	b6578 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b5c52:	a90b      	add	r1, sp, #44	; 0x2c
   b5c54:	a80f      	add	r0, sp, #60	; 0x3c
   b5c56:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b5c58:	f000 fc8e 	bl	b6578 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5c5c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b5c60:	4299      	cmp	r1, r3
   b5c62:	da1b      	bge.n	b5c9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b5c64:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b5c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b5c68:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b5c6c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b5c70:	4631      	mov	r1, r6
   b5c72:	f106 0010 	add.w	r0, r6, #16
   b5c76:	f7ff ff89 	bl	b5b8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b5c7a:	b9ee      	cbnz	r6, b5cb8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b5c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5c7e:	3301      	adds	r3, #1
   b5c80:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b5c82:	e011      	b.n	b5ca8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b5c84:	a808      	add	r0, sp, #32
   b5c86:	f7ff ffab 	bl	b5be0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5c8a:	2800      	cmp	r0, #0
   b5c8c:	d1d6      	bne.n	b5c3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b5c8e:	a808      	add	r0, sp, #32
   b5c90:	f7fe fd9d 	bl	b47ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5c94:	4620      	mov	r0, r4
   b5c96:	b015      	add	sp, #84	; 0x54
   b5c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5c9c:	3101      	adds	r1, #1
   b5c9e:	a808      	add	r0, sp, #32
   b5ca0:	f7ff ff9e 	bl	b5be0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5ca4:	2800      	cmp	r0, #0
   b5ca6:	d1dd      	bne.n	b5c64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b5ca8:	a80f      	add	r0, sp, #60	; 0x3c
   b5caa:	f000 fbe9 	bl	b6480 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b5cae:	a80b      	add	r0, sp, #44	; 0x2c
   b5cb0:	f000 fbe6 	bl	b6480 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b5cb4:	3514      	adds	r5, #20
   b5cb6:	e7c6      	b.n	b5c46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b5cb8:	a90f      	add	r1, sp, #60	; 0x3c
   b5cba:	4630      	mov	r0, r6
   b5cbc:	f000 fc5c 	bl	b6578 <_ZN6StringC1EOS_>
   b5cc0:	e7dc      	b.n	b5c7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b5cc2:	2600      	movs	r6, #0
   b5cc4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b5cc8:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b5cca:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b5cce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b5cd2:	429e      	cmp	r6, r3
   b5cd4:	da7c      	bge.n	b5dd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b5cd6:	0133      	lsls	r3, r6, #4
   b5cd8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b5cda:	9306      	str	r3, [sp, #24]
        if (!category) {
   b5cdc:	b90b      	cbnz	r3, b5ce2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b5cde:	3601      	adds	r6, #1
   b5ce0:	e7f5      	b.n	b5cce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b5ce2:	2300      	movs	r3, #0
   b5ce4:	9307      	str	r3, [sp, #28]
   b5ce6:	fb09 f306 	mul.w	r3, r9, r6
   b5cea:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b5cec:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b5cee:	a907      	add	r1, sp, #28
   b5cf0:	a806      	add	r0, sp, #24
   b5cf2:	f7ff fb22 	bl	b533a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5cf6:	4682      	mov	sl, r0
   b5cf8:	2800      	cmp	r0, #0
   b5cfa:	d0f0      	beq.n	b5cde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b5cfc:	f04f 0300 	mov.w	r3, #0
   b5d00:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5d04:	4601      	mov	r1, r0
   b5d06:	9a07      	ldr	r2, [sp, #28]
   b5d08:	f10d 0317 	add.w	r3, sp, #23
   b5d0c:	4628      	mov	r0, r5
   b5d0e:	f7ff fbb1 	bl	b5474 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5d12:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5d16:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5d18:	2f00      	cmp	r7, #0
   b5d1a:	d14a      	bne.n	b5db2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b5d1c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b5d20:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b5d24:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b5d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5d2c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b5d30:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b5d34:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d36:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b5d3a:	4293      	cmp	r3, r2
   b5d3c:	db17      	blt.n	b5d6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b5d3e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b5d42:	f1ba 0f00 	cmp.w	sl, #0
   b5d46:	dd30      	ble.n	b5daa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b5d48:	fb09 f00a 	mul.w	r0, r9, sl
   b5d4c:	f7fe fcc6 	bl	b46dc <malloc>
            if (!d) {
   b5d50:	4683      	mov	fp, r0
   b5d52:	b360      	cbz	r0, b5dae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b5d54:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5d58:	fb09 1202 	mla	r2, r9, r2, r1
   b5d5c:	f7ff feea 	bl	b5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b5d60:	6828      	ldr	r0, [r5, #0]
   b5d62:	f7fe fcc3 	bl	b46ec <free>
        data_ = d;
   b5d66:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b5d6a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b5d6e:	682b      	ldr	r3, [r5, #0]
   b5d70:	9a01      	ldr	r2, [sp, #4]
   b5d72:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b5d76:	686a      	ldr	r2, [r5, #4]
   b5d78:	4651      	mov	r1, sl
   b5d7a:	fb09 3202 	mla	r2, r9, r2, r3
   b5d7e:	f10a 0014 	add.w	r0, sl, #20
   b5d82:	f7ff fed7 	bl	b5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b5d86:	f1ba 0f00 	cmp.w	sl, #0
   b5d8a:	d003      	beq.n	b5d94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b5d8c:	a90f      	add	r1, sp, #60	; 0x3c
   b5d8e:	4650      	mov	r0, sl
   b5d90:	f7ff fb5d 	bl	b544e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b5d94:	686b      	ldr	r3, [r5, #4]
   b5d96:	3301      	adds	r3, #1
   b5d98:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b5d9a:	a811      	add	r0, sp, #68	; 0x44
   b5d9c:	f7ff fcdc 	bl	b5758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5da0:	b13f      	cbz	r7, b5db2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b5da2:	a80b      	add	r0, sp, #44	; 0x2c
   b5da4:	f7ff fcd8 	bl	b5758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5da8:	e771      	b.n	b5c8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b5daa:	46bb      	mov	fp, r7
   b5dac:	e7d8      	b.n	b5d60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5dae:	2701      	movs	r7, #1
   b5db0:	e7f3      	b.n	b5d9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b5db2:	9b01      	ldr	r3, [sp, #4]
   b5db4:	682d      	ldr	r5, [r5, #0]
   b5db6:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b5dba:	9b06      	ldr	r3, [sp, #24]
   b5dbc:	781b      	ldrb	r3, [r3, #0]
   b5dbe:	b92b      	cbnz	r3, b5dcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b5dc0:	f8d8 3000 	ldr.w	r3, [r8]
   b5dc4:	9a02      	ldr	r2, [sp, #8]
   b5dc6:	4413      	add	r3, r2
   b5dc8:	7c1b      	ldrb	r3, [r3, #16]
   b5dca:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b5dcc:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b5dce:	e78e      	b.n	b5cee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5dd0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5dd2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5dd4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5dd6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5dd8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5dda:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b5ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b5dde:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5de0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5de2:	60a2      	str	r2, [r4, #8]
   b5de4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b5de6:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5de8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5dea:	60e2      	str	r2, [r4, #12]
   b5dec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b5dee:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5df0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5df2:	6122      	str	r2, [r4, #16]
   b5df4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b5df6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b5df8:	9b03      	ldr	r3, [sp, #12]
   b5dfa:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b5dfc:	6162      	str	r2, [r4, #20]
   b5dfe:	7623      	strb	r3, [r4, #24]
   b5e00:	e7cf      	b.n	b5da2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b5e04 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5e04:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5e06:	4604      	mov	r4, r0
   b5e08:	b087      	sub	sp, #28
   b5e0a:	460d      	mov	r5, r1
        filter_(level, filters) {
   b5e0c:	4626      	mov	r6, r4
        stream_(&stream) {
   b5e0e:	4619      	mov	r1, r3
   b5e10:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5e12:	4617      	mov	r7, r2
        stream_(&stream) {
   b5e14:	f7fe fa3d 	bl	b4292 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5e18:	4b0b      	ldr	r3, [pc, #44]	; (b5e48 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b5e1a:	f846 3b04 	str.w	r3, [r6], #4
   b5e1e:	4669      	mov	r1, sp
   b5e20:	a803      	add	r0, sp, #12
   b5e22:	f7fe fa36 	bl	b4292 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5e26:	aa03      	add	r2, sp, #12
   b5e28:	4639      	mov	r1, r7
   b5e2a:	4630      	mov	r0, r6
   b5e2c:	f7ff fef0 	bl	b5c10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5e30:	a803      	add	r0, sp, #12
   b5e32:	f7fe f9ed 	bl	b4210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5e36:	4668      	mov	r0, sp
   b5e38:	f7fe f9ea 	bl	b4210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5e3c:	4b03      	ldr	r3, [pc, #12]	; (b5e4c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b5e3e:	6023      	str	r3, [r4, #0]
}
   b5e40:	4620      	mov	r0, r4
        stream_(&stream) {
   b5e42:	6225      	str	r5, [r4, #32]
}
   b5e44:	b007      	add	sp, #28
   b5e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5e48:	000b6de0 	.word	0x000b6de0
   b5e4c:	000b6f5c 	.word	0x000b6f5c

000b5e50 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b5e50:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5e52:	460f      	mov	r7, r1
   b5e54:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5e56:	491d      	ldr	r1, [pc, #116]	; (b5ecc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b5e58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5e5a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b5e5c:	4616      	mov	r6, r2
   b5e5e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5e60:	f000 fe3f 	bl	b6ae2 <strcmp>
   b5e64:	b9c0      	cbnz	r0, b5e98 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b5e66:	b1a4      	cbz	r4, b5e92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b5e68:	4629      	mov	r1, r5
   b5e6a:	a801      	add	r0, sp, #4
   b5e6c:	f7ff fcbc 	bl	b57e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b5e70:	4917      	ldr	r1, [pc, #92]	; (b5ed0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b5e72:	2024      	movs	r0, #36	; 0x24
   b5e74:	f000 fdaa 	bl	b69cc <_ZnwjRKSt9nothrow_t>
   b5e78:	4605      	mov	r5, r0
   b5e7a:	b130      	cbz	r0, b5e8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b5e7c:	ab01      	add	r3, sp, #4
   b5e7e:	4632      	mov	r2, r6
   b5e80:	4621      	mov	r1, r4
   b5e82:	f7ff ffbf 	bl	b5e04 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5e86:	4b13      	ldr	r3, [pc, #76]	; (b5ed4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b5e88:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b5e8a:	a801      	add	r0, sp, #4
   b5e8c:	f7fe f9c0 	bl	b4210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5e90:	462c      	mov	r4, r5
}
   b5e92:	4620      	mov	r0, r4
   b5e94:	b005      	add	sp, #20
   b5e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b5e98:	490f      	ldr	r1, [pc, #60]	; (b5ed8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b5e9a:	4638      	mov	r0, r7
   b5e9c:	f000 fe21 	bl	b6ae2 <strcmp>
   b5ea0:	b990      	cbnz	r0, b5ec8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b5ea2:	2c00      	cmp	r4, #0
   b5ea4:	d0f5      	beq.n	b5e92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b5ea6:	4629      	mov	r1, r5
   b5ea8:	a801      	add	r0, sp, #4
   b5eaa:	f7ff fc9d 	bl	b57e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b5eae:	4908      	ldr	r1, [pc, #32]	; (b5ed0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b5eb0:	2024      	movs	r0, #36	; 0x24
   b5eb2:	f000 fd8b 	bl	b69cc <_ZnwjRKSt9nothrow_t>
   b5eb6:	4605      	mov	r5, r0
   b5eb8:	2800      	cmp	r0, #0
   b5eba:	d0e6      	beq.n	b5e8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b5ebc:	ab01      	add	r3, sp, #4
   b5ebe:	4632      	mov	r2, r6
   b5ec0:	4621      	mov	r1, r4
   b5ec2:	f7ff ff9f 	bl	b5e04 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5ec6:	e7e0      	b.n	b5e8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b5ec8:	2400      	movs	r4, #0
   b5eca:	e7e2      	b.n	b5e92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b5ecc:	000b6edd 	.word	0x000b6edd
   b5ed0:	000b706c 	.word	0x000b706c
   b5ed4:	000b6f74 	.word	0x000b6f74
   b5ed8:	000b6ee1 	.word	0x000b6ee1

000b5edc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b5edc:	4b01      	ldr	r3, [pc, #4]	; (b5ee4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5ede:	4a02      	ldr	r2, [pc, #8]	; (b5ee8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5ee0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5ee2:	4770      	bx	lr
   b5ee4:	2003e6cc 	.word	0x2003e6cc
   b5ee8:	000b6ef2 	.word	0x000b6ef2

000b5eec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5ef0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b5ef2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5ef6:	4604      	mov	r4, r0
   b5ef8:	460e      	mov	r6, r1
   b5efa:	4617      	mov	r7, r2
   b5efc:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b5efe:	f000 fc63 	bl	b67c8 <_Z16_fetch_usbserialv>
   b5f02:	4581      	cmp	r9, r0
   b5f04:	d04c      	beq.n	b5fa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b5f06:	792b      	ldrb	r3, [r5, #4]
   b5f08:	0719      	lsls	r1, r3, #28
   b5f0a:	d504      	bpl.n	b5f16 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b5f0c:	696a      	ldr	r2, [r5, #20]
   b5f0e:	4954      	ldr	r1, [pc, #336]	; (b6060 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b5f10:	4620      	mov	r0, r4
   b5f12:	f7ff fa8d 	bl	b5430 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b5f16:	f1b8 0f00 	cmp.w	r8, #0
   b5f1a:	d00d      	beq.n	b5f38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b5f1c:	215b      	movs	r1, #91	; 0x5b
   b5f1e:	4620      	mov	r0, r4
   b5f20:	f7ff fa7a 	bl	b5418 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b5f24:	4641      	mov	r1, r8
   b5f26:	4620      	mov	r0, r4
   b5f28:	f7ff fa67 	bl	b53fa <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b5f2c:	6823      	ldr	r3, [r4, #0]
   b5f2e:	494d      	ldr	r1, [pc, #308]	; (b6064 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b5f30:	68db      	ldr	r3, [r3, #12]
   b5f32:	2202      	movs	r2, #2
   b5f34:	4620      	mov	r0, r4
   b5f36:	4798      	blx	r3
    if (attr.has_file) {
   b5f38:	792b      	ldrb	r3, [r5, #4]
   b5f3a:	07da      	lsls	r2, r3, #31
   b5f3c:	d523      	bpl.n	b5f86 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b5f3e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b5f42:	212f      	movs	r1, #47	; 0x2f
   b5f44:	4640      	mov	r0, r8
   b5f46:	f000 fe18 	bl	b6b7a <strrchr>
    if (s1) {
   b5f4a:	b108      	cbz	r0, b5f50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b5f4c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b5f50:	4641      	mov	r1, r8
   b5f52:	4620      	mov	r0, r4
   b5f54:	f7ff fa51 	bl	b53fa <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b5f58:	792b      	ldrb	r3, [r5, #4]
   b5f5a:	079b      	lsls	r3, r3, #30
   b5f5c:	d508      	bpl.n	b5f70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b5f5e:	213a      	movs	r1, #58	; 0x3a
   b5f60:	4620      	mov	r0, r4
   b5f62:	f7ff fa59 	bl	b5418 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b5f66:	68ea      	ldr	r2, [r5, #12]
   b5f68:	493f      	ldr	r1, [pc, #252]	; (b6068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b5f6a:	4620      	mov	r0, r4
   b5f6c:	f7ff fa60 	bl	b5430 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b5f70:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b5f72:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b5f74:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b5f78:	68db      	ldr	r3, [r3, #12]
   b5f7a:	bf14      	ite	ne
   b5f7c:	493b      	ldrne	r1, [pc, #236]	; (b606c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b5f7e:	493c      	ldreq	r1, [pc, #240]	; (b6070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b5f80:	2202      	movs	r2, #2
            write(": ", 2);
   b5f82:	4620      	mov	r0, r4
   b5f84:	4798      	blx	r3
    if (attr.has_function) {
   b5f86:	792b      	ldrb	r3, [r5, #4]
   b5f88:	0758      	lsls	r0, r3, #29
   b5f8a:	d51d      	bpl.n	b5fc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b5f8c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b5f8e:	460b      	mov	r3, r1
   b5f90:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b5f92:	f813 0b01 	ldrb.w	r0, [r3], #1
   b5f96:	b160      	cbz	r0, b5fb2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b5f98:	2820      	cmp	r0, #32
   b5f9a:	d108      	bne.n	b5fae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b5f9c:	4619      	mov	r1, r3
   b5f9e:	e7f7      	b.n	b5f90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b5fa0:	4834      	ldr	r0, [pc, #208]	; (b6074 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b5fa2:	f000 f966 	bl	b6272 <_ZN5spark12NetworkClass9listeningEv>
   b5fa6:	2800      	cmp	r0, #0
   b5fa8:	d0ad      	beq.n	b5f06 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b5faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b5fae:	2828      	cmp	r0, #40	; 0x28
   b5fb0:	d1ee      	bne.n	b5f90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b5fb2:	6823      	ldr	r3, [r4, #0]
   b5fb4:	1a52      	subs	r2, r2, r1
   b5fb6:	68db      	ldr	r3, [r3, #12]
   b5fb8:	4620      	mov	r0, r4
   b5fba:	4798      	blx	r3
        write("(): ", 4);
   b5fbc:	6823      	ldr	r3, [r4, #0]
   b5fbe:	492e      	ldr	r1, [pc, #184]	; (b6078 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b5fc0:	68db      	ldr	r3, [r3, #12]
   b5fc2:	2204      	movs	r2, #4
   b5fc4:	4620      	mov	r0, r4
   b5fc6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b5fc8:	2100      	movs	r1, #0
   b5fca:	4638      	mov	r0, r7
   b5fcc:	f7fe faca 	bl	b4564 <log_level_name>
   b5fd0:	4601      	mov	r1, r0
    write(s);
   b5fd2:	4620      	mov	r0, r4
   b5fd4:	f7ff fa11 	bl	b53fa <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b5fd8:	6823      	ldr	r3, [r4, #0]
   b5fda:	4925      	ldr	r1, [pc, #148]	; (b6070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b5fdc:	68db      	ldr	r3, [r3, #12]
   b5fde:	2202      	movs	r2, #2
   b5fe0:	4620      	mov	r0, r4
   b5fe2:	4798      	blx	r3
    if (msg) {
   b5fe4:	b11e      	cbz	r6, b5fee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b5fe6:	4631      	mov	r1, r6
   b5fe8:	4620      	mov	r0, r4
   b5fea:	f7ff fa06 	bl	b53fa <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b5fee:	792b      	ldrb	r3, [r5, #4]
   b5ff0:	f013 0f30 	tst.w	r3, #48	; 0x30
   b5ff4:	d02c      	beq.n	b6050 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b5ff6:	6823      	ldr	r3, [r4, #0]
   b5ff8:	4920      	ldr	r1, [pc, #128]	; (b607c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b5ffa:	68db      	ldr	r3, [r3, #12]
   b5ffc:	2202      	movs	r2, #2
   b5ffe:	4620      	mov	r0, r4
   b6000:	4798      	blx	r3
        if (attr.has_code) {
   b6002:	792b      	ldrb	r3, [r5, #4]
   b6004:	06d9      	lsls	r1, r3, #27
   b6006:	d50a      	bpl.n	b601e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b6008:	6823      	ldr	r3, [r4, #0]
   b600a:	491d      	ldr	r1, [pc, #116]	; (b6080 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b600c:	68db      	ldr	r3, [r3, #12]
   b600e:	2207      	movs	r2, #7
   b6010:	4620      	mov	r0, r4
   b6012:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b6014:	69aa      	ldr	r2, [r5, #24]
   b6016:	491b      	ldr	r1, [pc, #108]	; (b6084 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b6018:	4620      	mov	r0, r4
   b601a:	f7ff fa09 	bl	b5430 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b601e:	792b      	ldrb	r3, [r5, #4]
   b6020:	069a      	lsls	r2, r3, #26
   b6022:	d511      	bpl.n	b6048 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b6024:	06db      	lsls	r3, r3, #27
   b6026:	d505      	bpl.n	b6034 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b6028:	6823      	ldr	r3, [r4, #0]
   b602a:	4910      	ldr	r1, [pc, #64]	; (b606c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b602c:	68db      	ldr	r3, [r3, #12]
   b602e:	2202      	movs	r2, #2
   b6030:	4620      	mov	r0, r4
   b6032:	4798      	blx	r3
            write("details = ", 10);
   b6034:	6823      	ldr	r3, [r4, #0]
   b6036:	4914      	ldr	r1, [pc, #80]	; (b6088 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b6038:	68db      	ldr	r3, [r3, #12]
   b603a:	4620      	mov	r0, r4
   b603c:	220a      	movs	r2, #10
   b603e:	4798      	blx	r3
            write(attr.details);
   b6040:	69e9      	ldr	r1, [r5, #28]
   b6042:	4620      	mov	r0, r4
   b6044:	f7ff f9d9 	bl	b53fa <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b6048:	215d      	movs	r1, #93	; 0x5d
   b604a:	4620      	mov	r0, r4
   b604c:	f7ff f9e4 	bl	b5418 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b6050:	6823      	ldr	r3, [r4, #0]
   b6052:	490e      	ldr	r1, [pc, #56]	; (b608c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b6054:	68db      	ldr	r3, [r3, #12]
   b6056:	4620      	mov	r0, r4
   b6058:	2202      	movs	r2, #2
}
   b605a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b605e:	4718      	bx	r3
   b6060:	000b6ef6 	.word	0x000b6ef6
   b6064:	000b6efd 	.word	0x000b6efd
   b6068:	000b6db1 	.word	0x000b6db1
   b606c:	000b6f00 	.word	0x000b6f00
   b6070:	000b6f05 	.word	0x000b6f05
   b6074:	2003e6f8 	.word	0x2003e6f8
   b6078:	000b6f03 	.word	0x000b6f03
   b607c:	000b6f08 	.word	0x000b6f08
   b6080:	000b6f0b 	.word	0x000b6f0b
   b6084:	000b6f13 	.word	0x000b6f13
   b6088:	000b6f16 	.word	0x000b6f16
   b608c:	000b6f21 	.word	0x000b6f21

000b6090 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6094:	b085      	sub	sp, #20
    return stream_;
   b6096:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b609a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b609c:	4605      	mov	r5, r0
   b609e:	460f      	mov	r7, r1
   b60a0:	4690      	mov	r8, r2
   b60a2:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b60a4:	f000 fb90 	bl	b67c8 <_Z16_fetch_usbserialv>
   b60a8:	4581      	cmp	r9, r0
   b60aa:	d105      	bne.n	b60b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b60ac:	4849      	ldr	r0, [pc, #292]	; (b61d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b60ae:	f000 f8e0 	bl	b6272 <_ZN5spark12NetworkClass9listeningEv>
   b60b2:	2800      	cmp	r0, #0
   b60b4:	f040 808a 	bne.w	b61cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b60b8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b60ba:	4a47      	ldr	r2, [pc, #284]	; (b61d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b60bc:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b60be:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b60c2:	a801      	add	r0, sp, #4
        strm_(stream) {
   b60c4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b60c6:	f88d 9008 	strb.w	r9, [sp, #8]
   b60ca:	f7ff f878 	bl	b51be <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b60ce:	4649      	mov	r1, r9
   b60d0:	4640      	mov	r0, r8
   b60d2:	f7fe fa47 	bl	b4564 <log_level_name>
    json.name("l", 1).value(s);
   b60d6:	4941      	ldr	r1, [pc, #260]	; (b61dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b60d8:	4680      	mov	r8, r0
   b60da:	2201      	movs	r2, #1
   b60dc:	a801      	add	r0, sp, #4
   b60de:	f7ff f8fd 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b60e2:	4641      	mov	r1, r8
   b60e4:	f7ff f97b 	bl	b53de <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b60e8:	b13f      	cbz	r7, b60fa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b60ea:	493d      	ldr	r1, [pc, #244]	; (b61e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b60ec:	2201      	movs	r2, #1
   b60ee:	a801      	add	r0, sp, #4
   b60f0:	f7ff f8f4 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b60f4:	4639      	mov	r1, r7
   b60f6:	f7ff f972 	bl	b53de <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b60fa:	b13e      	cbz	r6, b610c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b60fc:	4939      	ldr	r1, [pc, #228]	; (b61e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b60fe:	2201      	movs	r2, #1
   b6100:	a801      	add	r0, sp, #4
   b6102:	f7ff f8eb 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b6106:	4631      	mov	r1, r6
   b6108:	f7ff f969 	bl	b53de <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b610c:	7923      	ldrb	r3, [r4, #4]
   b610e:	07df      	lsls	r7, r3, #31
   b6110:	d50e      	bpl.n	b6130 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b6112:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b6114:	212f      	movs	r1, #47	; 0x2f
   b6116:	4630      	mov	r0, r6
   b6118:	f000 fd2f 	bl	b6b7a <strrchr>
    if (s1) {
   b611c:	b100      	cbz	r0, b6120 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b611e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b6120:	4931      	ldr	r1, [pc, #196]	; (b61e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b6122:	2201      	movs	r2, #1
   b6124:	a801      	add	r0, sp, #4
   b6126:	f7ff f8d9 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b612a:	4631      	mov	r1, r6
   b612c:	f7ff f957 	bl	b53de <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b6130:	7923      	ldrb	r3, [r4, #4]
   b6132:	079e      	lsls	r6, r3, #30
   b6134:	d507      	bpl.n	b6146 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b6136:	492d      	ldr	r1, [pc, #180]	; (b61ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b6138:	2202      	movs	r2, #2
   b613a:	a801      	add	r0, sp, #4
   b613c:	f7ff f8ce 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b6140:	68e1      	ldr	r1, [r4, #12]
   b6142:	f7ff f849 	bl	b51d8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b6146:	7923      	ldrb	r3, [r4, #4]
   b6148:	0758      	lsls	r0, r3, #29
   b614a:	d514      	bpl.n	b6176 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b614c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b614e:	4633      	mov	r3, r6
   b6150:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b6152:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6156:	b12a      	cbz	r2, b6164 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b6158:	2a20      	cmp	r2, #32
   b615a:	d101      	bne.n	b6160 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b615c:	461e      	mov	r6, r3
   b615e:	e7f7      	b.n	b6150 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b6160:	2a28      	cmp	r2, #40	; 0x28
   b6162:	d1f5      	bne.n	b6150 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b6164:	4922      	ldr	r1, [pc, #136]	; (b61f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b6166:	2202      	movs	r2, #2
   b6168:	a801      	add	r0, sp, #4
   b616a:	f7ff f8b7 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b616e:	1bba      	subs	r2, r7, r6
   b6170:	4631      	mov	r1, r6
   b6172:	f7ff f8c3 	bl	b52fc <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b6176:	7923      	ldrb	r3, [r4, #4]
   b6178:	0719      	lsls	r1, r3, #28
   b617a:	d507      	bpl.n	b618c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b617c:	491d      	ldr	r1, [pc, #116]	; (b61f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b617e:	2201      	movs	r2, #1
   b6180:	a801      	add	r0, sp, #4
   b6182:	f7ff f8ab 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b6186:	6961      	ldr	r1, [r4, #20]
   b6188:	f7ff f838 	bl	b51fc <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b618c:	7923      	ldrb	r3, [r4, #4]
   b618e:	06da      	lsls	r2, r3, #27
   b6190:	d508      	bpl.n	b61a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b6192:	2204      	movs	r2, #4
   b6194:	4918      	ldr	r1, [pc, #96]	; (b61f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b6196:	eb0d 0002 	add.w	r0, sp, r2
   b619a:	f7ff f89f 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b619e:	69a1      	ldr	r1, [r4, #24]
   b61a0:	f7ff f81a 	bl	b51d8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b61a4:	7923      	ldrb	r3, [r4, #4]
   b61a6:	069b      	lsls	r3, r3, #26
   b61a8:	d507      	bpl.n	b61ba <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b61aa:	4914      	ldr	r1, [pc, #80]	; (b61fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b61ac:	2206      	movs	r2, #6
   b61ae:	a801      	add	r0, sp, #4
   b61b0:	f7ff f894 	bl	b52dc <_ZN5spark10JSONWriter4nameEPKcj>
   b61b4:	69e1      	ldr	r1, [r4, #28]
   b61b6:	f7ff f912 	bl	b53de <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b61ba:	a801      	add	r0, sp, #4
   b61bc:	f7fe ffe9 	bl	b5192 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b61c0:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b61c2:	490f      	ldr	r1, [pc, #60]	; (b6200 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b61c4:	6803      	ldr	r3, [r0, #0]
   b61c6:	2202      	movs	r2, #2
   b61c8:	68db      	ldr	r3, [r3, #12]
   b61ca:	4798      	blx	r3
}
   b61cc:	b005      	add	sp, #20
   b61ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b61d2:	bf00      	nop
   b61d4:	2003e6f8 	.word	0x2003e6f8
   b61d8:	000b6f44 	.word	0x000b6f44
   b61dc:	000b6ed3 	.word	0x000b6ed3
   b61e0:	000b6f24 	.word	0x000b6f24
   b61e4:	000b70db 	.word	0x000b70db
   b61e8:	000b6f26 	.word	0x000b6f26
   b61ec:	000b6f28 	.word	0x000b6f28
   b61f0:	000b6f2b 	.word	0x000b6f2b
   b61f4:	000b6e13 	.word	0x000b6e13
   b61f8:	000b6f2e 	.word	0x000b6f2e
   b61fc:	000b6f33 	.word	0x000b6f33
   b6200:	000b6f21 	.word	0x000b6f21

000b6204 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6204:	2300      	movs	r3, #0
   b6206:	6840      	ldr	r0, [r0, #4]
   b6208:	461a      	mov	r2, r3
   b620a:	f7fe ba07 	b.w	b461c <network_connect>

000b620e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b620e:	6840      	ldr	r0, [r0, #4]
   b6210:	2200      	movs	r2, #0
   b6212:	2102      	movs	r1, #2
   b6214:	f7fe ba12 	b.w	b463c <network_disconnect>

000b6218 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6218:	2200      	movs	r2, #0
   b621a:	6840      	ldr	r0, [r0, #4]
   b621c:	4611      	mov	r1, r2
   b621e:	f7fe ba05 	b.w	b462c <network_connecting>

000b6222 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6222:	2200      	movs	r2, #0
   b6224:	6840      	ldr	r0, [r0, #4]
   b6226:	4611      	mov	r1, r2
   b6228:	f7fe ba10 	b.w	b464c <network_ready>

000b622c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b622c:	2300      	movs	r3, #0
   b622e:	6840      	ldr	r0, [r0, #4]
   b6230:	461a      	mov	r2, r3
   b6232:	4619      	mov	r1, r3
   b6234:	f7fe ba12 	b.w	b465c <network_on>

000b6238 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6238:	2300      	movs	r3, #0
   b623a:	6840      	ldr	r0, [r0, #4]
   b623c:	461a      	mov	r2, r3
   b623e:	4619      	mov	r1, r3
   b6240:	f7fe ba14 	b.w	b466c <network_off>

000b6244 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6244:	6840      	ldr	r0, [r0, #4]
   b6246:	2100      	movs	r1, #0
   b6248:	f7fe ba38 	b.w	b46bc <network_is_on>

000b624c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b624c:	6840      	ldr	r0, [r0, #4]
   b624e:	2100      	movs	r1, #0
   b6250:	f7fe ba3c 	b.w	b46cc <network_is_off>

000b6254 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6254:	6840      	ldr	r0, [r0, #4]
   b6256:	2200      	movs	r2, #0
   b6258:	f081 0101 	eor.w	r1, r1, #1
   b625c:	f7fe ba0e 	b.w	b467c <network_listen>

000b6260 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6260:	6840      	ldr	r0, [r0, #4]
   b6262:	2200      	movs	r2, #0
   b6264:	f7fe ba1a 	b.w	b469c <network_set_listen_timeout>

000b6268 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6268:	2200      	movs	r2, #0
   b626a:	6840      	ldr	r0, [r0, #4]
   b626c:	4611      	mov	r1, r2
   b626e:	f7fe ba1d 	b.w	b46ac <network_get_listen_timeout>

000b6272 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6272:	2200      	movs	r2, #0
   b6274:	6840      	ldr	r0, [r0, #4]
   b6276:	4611      	mov	r1, r2
   b6278:	f7fe ba08 	b.w	b468c <network_listening>

000b627c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b627c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6280:	b095      	sub	sp, #84	; 0x54
   b6282:	4614      	mov	r4, r2
   b6284:	460d      	mov	r5, r1
   b6286:	4607      	mov	r7, r0
    IPAddress addr;
   b6288:	f7fe fe32 	bl	b4ef0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b628c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b628e:	221c      	movs	r2, #28
   b6290:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6292:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6294:	f000 fbd8 	bl	b6a48 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6298:	2340      	movs	r3, #64	; 0x40
   b629a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b629c:	4620      	mov	r0, r4
   b629e:	466b      	mov	r3, sp
   b62a0:	aa0c      	add	r2, sp, #48	; 0x30
   b62a2:	2100      	movs	r1, #0
   b62a4:	f7fe f8be 	bl	b4424 <netdb_getaddrinfo>
    if (!r) {
   b62a8:	4604      	mov	r4, r0
   b62aa:	2800      	cmp	r0, #0
   b62ac:	d14b      	bne.n	b6346 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b62ae:	4602      	mov	r2, r0
   b62b0:	2101      	movs	r1, #1
   b62b2:	6868      	ldr	r0, [r5, #4]
   b62b4:	f7fe f9ca 	bl	b464c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b62b8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b62ba:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b62bc:	4622      	mov	r2, r4
   b62be:	6868      	ldr	r0, [r5, #4]
   b62c0:	f7fe f9c4 	bl	b464c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b62c4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b62c6:	4681      	mov	r9, r0
        bool ok = false;
   b62c8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b62ca:	2e00      	cmp	r6, #0
   b62cc:	d03b      	beq.n	b6346 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b62ce:	2900      	cmp	r1, #0
   b62d0:	d139      	bne.n	b6346 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b62d2:	6873      	ldr	r3, [r6, #4]
   b62d4:	2b02      	cmp	r3, #2
   b62d6:	d003      	beq.n	b62e0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b62d8:	2b0a      	cmp	r3, #10
   b62da:	d011      	beq.n	b6300 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b62dc:	69f6      	ldr	r6, [r6, #28]
   b62de:	e7f4      	b.n	b62ca <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b62e0:	f1b8 0f00 	cmp.w	r8, #0
   b62e4:	d0fa      	beq.n	b62dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b62e6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b62e8:	a806      	add	r0, sp, #24
   b62ea:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b62ec:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b62ee:	f7fe fe2d 	bl	b4f4c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b62f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b62f4:	1d3c      	adds	r4, r7, #4
   b62f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b62f8:	682b      	ldr	r3, [r5, #0]
   b62fa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b62fc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b62fe:	e7ed      	b.n	b62dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6300:	f1b9 0f00 	cmp.w	r9, #0
   b6304:	d0ea      	beq.n	b62dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6306:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6308:	2210      	movs	r2, #16
   b630a:	a801      	add	r0, sp, #4
   b630c:	f000 fb9c 	bl	b6a48 <memset>
                    a.v = 6;
   b6310:	2306      	movs	r3, #6
   b6312:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6316:	ad01      	add	r5, sp, #4
   b6318:	f104 0308 	add.w	r3, r4, #8
   b631c:	3418      	adds	r4, #24
   b631e:	6818      	ldr	r0, [r3, #0]
   b6320:	6859      	ldr	r1, [r3, #4]
   b6322:	462a      	mov	r2, r5
   b6324:	c203      	stmia	r2!, {r0, r1}
   b6326:	3308      	adds	r3, #8
   b6328:	42a3      	cmp	r3, r4
   b632a:	4615      	mov	r5, r2
   b632c:	d1f7      	bne.n	b631e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b632e:	a901      	add	r1, sp, #4
   b6330:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6332:	ad07      	add	r5, sp, #28
   b6334:	f7fe fdea 	bl	b4f0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b633a:	1d3c      	adds	r4, r7, #4
   b633c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b633e:	682b      	ldr	r3, [r5, #0]
   b6340:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6342:	4649      	mov	r1, r9
   b6344:	e7ca      	b.n	b62dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6346:	9800      	ldr	r0, [sp, #0]
   b6348:	f7fe f864 	bl	b4414 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b634c:	4638      	mov	r0, r7
   b634e:	b015      	add	sp, #84	; 0x54
   b6350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6354 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6354:	4b02      	ldr	r3, [pc, #8]	; (b6360 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6356:	4a03      	ldr	r2, [pc, #12]	; (b6364 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6358:	601a      	str	r2, [r3, #0]
   b635a:	2200      	movs	r2, #0
   b635c:	605a      	str	r2, [r3, #4]

} // spark
   b635e:	4770      	bx	lr
   b6360:	2003e6f8 	.word	0x2003e6f8
   b6364:	000b6fbc 	.word	0x000b6fbc

000b6368 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b636a:	4606      	mov	r6, r0
   b636c:	460d      	mov	r5, r1
  size_t n = 0;
   b636e:	188f      	adds	r7, r1, r2
   b6370:	2400      	movs	r4, #0
  while (size--) {
   b6372:	42bd      	cmp	r5, r7
   b6374:	d00c      	beq.n	b6390 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6376:	6833      	ldr	r3, [r6, #0]
   b6378:	f815 1b01 	ldrb.w	r1, [r5], #1
   b637c:	689b      	ldr	r3, [r3, #8]
   b637e:	4630      	mov	r0, r6
   b6380:	4798      	blx	r3
     if (chunk>=0)
   b6382:	1e03      	subs	r3, r0, #0
   b6384:	db01      	blt.n	b638a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6386:	441c      	add	r4, r3
  while (size--) {
   b6388:	e7f3      	b.n	b6372 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b638a:	2c00      	cmp	r4, #0
   b638c:	bf08      	it	eq
   b638e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6390:	4620      	mov	r0, r4
   b6392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6394 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6394:	b513      	push	{r0, r1, r4, lr}
   b6396:	4604      	mov	r4, r0
    }
   b6398:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b639a:	b159      	cbz	r1, b63b4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b639c:	9101      	str	r1, [sp, #4]
   b639e:	f000 fbd0 	bl	b6b42 <strlen>
   b63a2:	6823      	ldr	r3, [r4, #0]
   b63a4:	9901      	ldr	r1, [sp, #4]
   b63a6:	68db      	ldr	r3, [r3, #12]
   b63a8:	4602      	mov	r2, r0
   b63aa:	4620      	mov	r0, r4
    }
   b63ac:	b002      	add	sp, #8
   b63ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b63b2:	4718      	bx	r3
    }
   b63b4:	b002      	add	sp, #8
   b63b6:	bd10      	pop	{r4, pc}

000b63b8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b63b8:	6803      	ldr	r3, [r0, #0]
   b63ba:	689b      	ldr	r3, [r3, #8]
   b63bc:	4718      	bx	r3

000b63be <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b63be:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b63c0:	210d      	movs	r1, #13
{
   b63c2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b63c4:	f7ff fff8 	bl	b63b8 <_ZN5Print5printEc>
  n += print('\n');
   b63c8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b63ca:	4604      	mov	r4, r0
  n += print('\n');
   b63cc:	4628      	mov	r0, r5
   b63ce:	f7ff fff3 	bl	b63b8 <_ZN5Print5printEc>
  return n;
}
   b63d2:	4420      	add	r0, r4
   b63d4:	bd38      	pop	{r3, r4, r5, pc}

000b63d6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b63d6:	b530      	push	{r4, r5, lr}
   b63d8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b63da:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b63dc:	2a01      	cmp	r2, #1
  *str = '\0';
   b63de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b63e2:	bf98      	it	ls
   b63e4:	220a      	movls	r2, #10
   b63e6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b63e8:	460d      	mov	r5, r1
   b63ea:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b63ee:	fb01 5312 	mls	r3, r1, r2, r5
   b63f2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b63f6:	2b09      	cmp	r3, #9
   b63f8:	bf94      	ite	ls
   b63fa:	3330      	addls	r3, #48	; 0x30
   b63fc:	3337      	addhi	r3, #55	; 0x37
   b63fe:	b2db      	uxtb	r3, r3
  } while(n);
   b6400:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6402:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6406:	d9ef      	bls.n	b63e8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6408:	4621      	mov	r1, r4
   b640a:	f7ff ffc3 	bl	b6394 <_ZN5Print5writeEPKc>
}
   b640e:	b00b      	add	sp, #44	; 0x2c
   b6410:	bd30      	pop	{r4, r5, pc}

000b6412 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6416:	b086      	sub	sp, #24
   b6418:	af00      	add	r7, sp, #0
   b641a:	4605      	mov	r5, r0
   b641c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b641e:	1d38      	adds	r0, r7, #4
   b6420:	2114      	movs	r1, #20
{
   b6422:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6424:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6426:	f7fe f971 	bl	b470c <vsnprintf>

    if (n<bufsize)
   b642a:	2813      	cmp	r0, #19
   b642c:	d80e      	bhi.n	b644c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b642e:	1d39      	adds	r1, r7, #4
   b6430:	4628      	mov	r0, r5
   b6432:	f7ff ffaf 	bl	b6394 <_ZN5Print5writeEPKc>
   b6436:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6438:	b11e      	cbz	r6, b6442 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b643a:	4628      	mov	r0, r5
   b643c:	f7ff ffbf 	bl	b63be <_ZN5Print7printlnEv>
   b6440:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6442:	4620      	mov	r0, r4
   b6444:	3718      	adds	r7, #24
   b6446:	46bd      	mov	sp, r7
   b6448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b644c:	f100 0308 	add.w	r3, r0, #8
   b6450:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6454:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6456:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b645a:	4622      	mov	r2, r4
   b645c:	1c41      	adds	r1, r0, #1
   b645e:	683b      	ldr	r3, [r7, #0]
   b6460:	4668      	mov	r0, sp
   b6462:	f7fe f953 	bl	b470c <vsnprintf>
  return write(str);
   b6466:	4669      	mov	r1, sp
   b6468:	4628      	mov	r0, r5
   b646a:	f7ff ff93 	bl	b6394 <_ZN5Print5writeEPKc>
   b646e:	4604      	mov	r4, r0
   b6470:	46c5      	mov	sp, r8
   b6472:	e7e1      	b.n	b6438 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6474 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6474:	4b01      	ldr	r3, [pc, #4]	; (b647c <_GLOBAL__sub_I_RGB+0x8>)
   b6476:	2200      	movs	r2, #0
   b6478:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b647a:	4770      	bx	lr
   b647c:	2003e700 	.word	0x2003e700

000b6480 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6480:	b510      	push	{r4, lr}
   b6482:	4604      	mov	r4, r0
{
	free(buffer);
   b6484:	6800      	ldr	r0, [r0, #0]
   b6486:	f7fe f931 	bl	b46ec <free>
}
   b648a:	4620      	mov	r0, r4
   b648c:	bd10      	pop	{r4, pc}

000b648e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b648e:	b510      	push	{r4, lr}
   b6490:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6492:	6800      	ldr	r0, [r0, #0]
   b6494:	b108      	cbz	r0, b649a <_ZN6String10invalidateEv+0xc>
   b6496:	f7fe f929 	bl	b46ec <free>
	buffer = NULL;
   b649a:	2300      	movs	r3, #0
	capacity = len = 0;
   b649c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b64a0:	6023      	str	r3, [r4, #0]
}
   b64a2:	bd10      	pop	{r4, pc}

000b64a4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b64a4:	b538      	push	{r3, r4, r5, lr}
   b64a6:	4604      	mov	r4, r0
   b64a8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b64aa:	6800      	ldr	r0, [r0, #0]
   b64ac:	3101      	adds	r1, #1
   b64ae:	f7fe f925 	bl	b46fc <realloc>
	if (newbuffer) {
   b64b2:	b110      	cbz	r0, b64ba <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b64b4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b64b8:	2001      	movs	r0, #1
	}
	return 0;
}
   b64ba:	bd38      	pop	{r3, r4, r5, pc}

000b64bc <_ZN6String7reserveEj>:
{
   b64bc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b64be:	6803      	ldr	r3, [r0, #0]
{
   b64c0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b64c2:	b123      	cbz	r3, b64ce <_ZN6String7reserveEj+0x12>
   b64c4:	6843      	ldr	r3, [r0, #4]
   b64c6:	428b      	cmp	r3, r1
   b64c8:	d301      	bcc.n	b64ce <_ZN6String7reserveEj+0x12>
   b64ca:	2001      	movs	r0, #1
}
   b64cc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b64ce:	4620      	mov	r0, r4
   b64d0:	f7ff ffe8 	bl	b64a4 <_ZN6String12changeBufferEj>
   b64d4:	2800      	cmp	r0, #0
   b64d6:	d0f9      	beq.n	b64cc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b64d8:	68a3      	ldr	r3, [r4, #8]
   b64da:	2b00      	cmp	r3, #0
   b64dc:	d1f5      	bne.n	b64ca <_ZN6String7reserveEj+0xe>
   b64de:	6822      	ldr	r2, [r4, #0]
   b64e0:	7013      	strb	r3, [r2, #0]
   b64e2:	e7f2      	b.n	b64ca <_ZN6String7reserveEj+0xe>

000b64e4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b64e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b64e6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b64e8:	4611      	mov	r1, r2
   b64ea:	9201      	str	r2, [sp, #4]
{
   b64ec:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b64ee:	f7ff ffe5 	bl	b64bc <_ZN6String7reserveEj>
   b64f2:	9a01      	ldr	r2, [sp, #4]
   b64f4:	b928      	cbnz	r0, b6502 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b64f6:	4620      	mov	r0, r4
   b64f8:	f7ff ffc9 	bl	b648e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b64fc:	4620      	mov	r0, r4
   b64fe:	b003      	add	sp, #12
   b6500:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6502:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6504:	4629      	mov	r1, r5
   b6506:	6820      	ldr	r0, [r4, #0]
   b6508:	f000 fa76 	bl	b69f8 <memcpy>
	buffer[len] = 0;
   b650c:	6822      	ldr	r2, [r4, #0]
   b650e:	68a3      	ldr	r3, [r4, #8]
   b6510:	2100      	movs	r1, #0
   b6512:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6514:	e7f2      	b.n	b64fc <_ZN6String4copyEPKcj+0x18>

000b6516 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6516:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6518:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b651a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b651e:	4604      	mov	r4, r0
	len = 0;
   b6520:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6522:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6524:	b141      	cbz	r1, b6538 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6526:	4608      	mov	r0, r1
   b6528:	9101      	str	r1, [sp, #4]
   b652a:	f000 fb0a 	bl	b6b42 <strlen>
   b652e:	9901      	ldr	r1, [sp, #4]
   b6530:	4602      	mov	r2, r0
   b6532:	4620      	mov	r0, r4
   b6534:	f7ff ffd6 	bl	b64e4 <_ZN6String4copyEPKcj>
}
   b6538:	4620      	mov	r0, r4
   b653a:	b002      	add	sp, #8
   b653c:	bd10      	pop	{r4, pc}

000b653e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b653e:	b538      	push	{r3, r4, r5, lr}
   b6540:	4605      	mov	r5, r0
	if (buffer) {
   b6542:	6800      	ldr	r0, [r0, #0]
{
   b6544:	460c      	mov	r4, r1
	if (buffer) {
   b6546:	b168      	cbz	r0, b6564 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b6548:	686a      	ldr	r2, [r5, #4]
   b654a:	688b      	ldr	r3, [r1, #8]
   b654c:	429a      	cmp	r2, r3
   b654e:	d307      	bcc.n	b6560 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b6550:	6809      	ldr	r1, [r1, #0]
   b6552:	f000 fad0 	bl	b6af6 <strcpy>
			len = rhs.len;
   b6556:	68a3      	ldr	r3, [r4, #8]
   b6558:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b655a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b655c:	60a3      	str	r3, [r4, #8]
}
   b655e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b6560:	f7fe f8c4 	bl	b46ec <free>
	buffer = rhs.buffer;
   b6564:	6823      	ldr	r3, [r4, #0]
   b6566:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b6568:	6863      	ldr	r3, [r4, #4]
   b656a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b656c:	68a3      	ldr	r3, [r4, #8]
   b656e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b6570:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b6572:	e9c4 3300 	strd	r3, r3, [r4]
   b6576:	e7f1      	b.n	b655c <_ZN6String4moveERS_+0x1e>

000b6578 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b6578:	b510      	push	{r4, lr}
	buffer = NULL;
   b657a:	2300      	movs	r3, #0
	capacity = 0;
   b657c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b6580:	4604      	mov	r4, r0
	len = 0;
   b6582:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6584:	7303      	strb	r3, [r0, #12]
	move(rval);
   b6586:	f7ff ffda 	bl	b653e <_ZN6String4moveERS_>
}
   b658a:	4620      	mov	r0, r4
   b658c:	bd10      	pop	{r4, pc}

000b658e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b658e:	4288      	cmp	r0, r1
{
   b6590:	b510      	push	{r4, lr}
   b6592:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6594:	d005      	beq.n	b65a2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6596:	680b      	ldr	r3, [r1, #0]
   b6598:	b12b      	cbz	r3, b65a6 <_ZN6StringaSERKS_+0x18>
   b659a:	688a      	ldr	r2, [r1, #8]
   b659c:	4619      	mov	r1, r3
   b659e:	f7ff ffa1 	bl	b64e4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b65a2:	4620      	mov	r0, r4
   b65a4:	bd10      	pop	{r4, pc}
	else invalidate();
   b65a6:	f7ff ff72 	bl	b648e <_ZN6String10invalidateEv>
   b65aa:	e7fa      	b.n	b65a2 <_ZN6StringaSERKS_+0x14>

000b65ac <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b65ac:	b510      	push	{r4, lr}
	buffer = NULL;
   b65ae:	2300      	movs	r3, #0
String::String(const String &value)
   b65b0:	4604      	mov	r4, r0
	capacity = 0;
   b65b2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b65b6:	6083      	str	r3, [r0, #8]
	flags = 0;
   b65b8:	7303      	strb	r3, [r0, #12]
	*this = value;
   b65ba:	f7ff ffe8 	bl	b658e <_ZN6StringaSERKS_>
}
   b65be:	4620      	mov	r0, r4
   b65c0:	bd10      	pop	{r4, pc}
	...

000b65c4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b65c4:	b40e      	push	{r1, r2, r3}
   b65c6:	b570      	push	{r4, r5, r6, lr}
   b65c8:	b087      	sub	sp, #28
   b65ca:	ad0b      	add	r5, sp, #44	; 0x2c
   b65cc:	4604      	mov	r4, r0
   b65ce:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b65d2:	9201      	str	r2, [sp, #4]
   b65d4:	462b      	mov	r3, r5
   b65d6:	2105      	movs	r1, #5
   b65d8:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b65da:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b65dc:	f7fe f896 	bl	b470c <vsnprintf>
    va_end(marker);

    String result;
   b65e0:	490b      	ldr	r1, [pc, #44]	; (b6610 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b65e2:	4606      	mov	r6, r0
    String result;
   b65e4:	4620      	mov	r0, r4
   b65e6:	f7ff ff96 	bl	b6516 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b65ea:	4631      	mov	r1, r6
   b65ec:	4620      	mov	r0, r4
   b65ee:	f7ff ff65 	bl	b64bc <_ZN6String7reserveEj>
    if (result.buffer) {
   b65f2:	6820      	ldr	r0, [r4, #0]
   b65f4:	b130      	cbz	r0, b6604 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b65f6:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b65f8:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b65fa:	462b      	mov	r3, r5
   b65fc:	1c71      	adds	r1, r6, #1
   b65fe:	f7fe f885 	bl	b470c <vsnprintf>
        va_end(marker);
        result.len = n;
   b6602:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b6604:	4620      	mov	r0, r4
   b6606:	b007      	add	sp, #28
   b6608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b660c:	b003      	add	sp, #12
   b660e:	4770      	bx	lr
   b6610:	000b6f23 	.word	0x000b6f23

000b6614 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6614:	4b05      	ldr	r3, [pc, #20]	; (b662c <_GLOBAL__sub_I_System+0x18>)
   b6616:	2202      	movs	r2, #2
   b6618:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b661a:	4b05      	ldr	r3, [pc, #20]	; (b6630 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b661c:	4a05      	ldr	r2, [pc, #20]	; (b6634 <_GLOBAL__sub_I_System+0x20>)
   b661e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6620:	2000      	movs	r0, #0
   b6622:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6626:	f7fd bfad 	b.w	b4584 <set_system_mode>
   b662a:	bf00      	nop
   b662c:	2003e71c 	.word	0x2003e71c
   b6630:	2003e710 	.word	0x2003e710
   b6634:	ffff0000 	.word	0xffff0000

000b6638 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6638:	4b02      	ldr	r3, [pc, #8]	; (b6644 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b663a:	681a      	ldr	r2, [r3, #0]
   b663c:	4b02      	ldr	r3, [pc, #8]	; (b6648 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b663e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6640:	4770      	bx	lr
   b6642:	bf00      	nop
   b6644:	2003e5e8 	.word	0x2003e5e8
   b6648:	2003e720 	.word	0x2003e720

000b664c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b664c:	4770      	bx	lr

000b664e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b664e:	7441      	strb	r1, [r0, #17]
}
   b6650:	4770      	bx	lr

000b6652 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6652:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6654:	7c00      	ldrb	r0, [r0, #16]
   b6656:	f7fd ff1d 	bl	b4494 <hal_usart_available_data_for_write>
}
   b665a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b665e:	bd08      	pop	{r3, pc}

000b6660 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6660:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6662:	7c00      	ldrb	r0, [r0, #16]
   b6664:	f7fd fef6 	bl	b4454 <hal_usart_available>
}
   b6668:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b666c:	bd08      	pop	{r3, pc}

000b666e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b666e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6670:	7c00      	ldrb	r0, [r0, #16]
   b6672:	f7fd feff 	bl	b4474 <hal_usart_peek>
}
   b6676:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b667a:	bd08      	pop	{r3, pc}

000b667c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b667c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b667e:	7c00      	ldrb	r0, [r0, #16]
   b6680:	f7fd fef0 	bl	b4464 <hal_usart_read>
}
   b6684:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6688:	bd08      	pop	{r3, pc}

000b668a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b668a:	7c00      	ldrb	r0, [r0, #16]
   b668c:	f7fd befa 	b.w	b4484 <hal_usart_flush>

000b6690 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6690:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6692:	7c45      	ldrb	r5, [r0, #17]
{
   b6694:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6696:	b12d      	cbz	r5, b66a4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6698:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b669a:	b003      	add	sp, #12
   b669c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b66a0:	f7fd bed0 	b.w	b4444 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b66a4:	7c00      	ldrb	r0, [r0, #16]
   b66a6:	9101      	str	r1, [sp, #4]
   b66a8:	f7fd fef4 	bl	b4494 <hal_usart_available_data_for_write>
   b66ac:	2800      	cmp	r0, #0
   b66ae:	9901      	ldr	r1, [sp, #4]
   b66b0:	dcf2      	bgt.n	b6698 <_ZN11USARTSerial5writeEh+0x8>
}
   b66b2:	4628      	mov	r0, r5
   b66b4:	b003      	add	sp, #12
   b66b6:	bd30      	pop	{r4, r5, pc}

000b66b8 <_ZN11USARTSerialD0Ev>:
   b66b8:	b510      	push	{r4, lr}
   b66ba:	2114      	movs	r1, #20
   b66bc:	4604      	mov	r4, r0
   b66be:	f7fd fcec 	bl	b409a <_ZdlPvj>
   b66c2:	4620      	mov	r0, r4
   b66c4:	bd10      	pop	{r4, pc}
	...

000b66c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b66c8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b66ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b66ce:	4604      	mov	r4, r0
   b66d0:	4608      	mov	r0, r1
   b66d2:	4611      	mov	r1, r2
   b66d4:	2200      	movs	r2, #0
   b66d6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b66da:	4b04      	ldr	r3, [pc, #16]	; (b66ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b66dc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b66de:	2301      	movs	r3, #1
  _serial = serial;
   b66e0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b66e2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b66e4:	f7fd fee6 	bl	b44b4 <hal_usart_init_ex>
}
   b66e8:	4620      	mov	r0, r4
   b66ea:	bd10      	pop	{r4, pc}
   b66ec:	000b7014 	.word	0x000b7014

000b66f0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b66f0:	7c00      	ldrb	r0, [r0, #16]
   b66f2:	2300      	movs	r3, #0
   b66f4:	f7fd bed6 	b.w	b44a4 <hal_usart_begin_config>

000b66f8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b66f8:	2200      	movs	r2, #0
   b66fa:	f7ff bff9 	b.w	b66f0 <_ZN11USARTSerial5beginEmm>

000b66fe <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b66fe:	7c00      	ldrb	r0, [r0, #16]
   b6700:	f7fd be98 	b.w	b4434 <hal_usart_end>

000b6704 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6704:	7441      	strb	r1, [r0, #17]
}
   b6706:	4770      	bx	lr

000b6708 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6708:	4770      	bx	lr

000b670a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b670a:	4770      	bx	lr

000b670c <_ZN9USBSerial4readEv>:
{
   b670c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b670e:	2100      	movs	r1, #0
   b6710:	7c00      	ldrb	r0, [r0, #16]
   b6712:	f7fd feff 	bl	b4514 <HAL_USB_USART_Receive_Data>
}
   b6716:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b671a:	bd08      	pop	{r3, pc}

000b671c <_ZN9USBSerial4peekEv>:
{
   b671c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b671e:	2101      	movs	r1, #1
   b6720:	7c00      	ldrb	r0, [r0, #16]
   b6722:	f7fd fef7 	bl	b4514 <HAL_USB_USART_Receive_Data>
}
   b6726:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b672a:	bd08      	pop	{r3, pc}

000b672c <_ZN9USBSerial17availableForWriteEv>:
{
   b672c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b672e:	7c00      	ldrb	r0, [r0, #16]
   b6730:	f7fd fee8 	bl	b4504 <HAL_USB_USART_Available_Data_For_Write>
}
   b6734:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6738:	bd08      	pop	{r3, pc}

000b673a <_ZN9USBSerial9availableEv>:
{
   b673a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b673c:	7c00      	ldrb	r0, [r0, #16]
   b673e:	f7fd fed9 	bl	b44f4 <HAL_USB_USART_Available_Data>
}
   b6742:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6746:	bd08      	pop	{r3, pc}

000b6748 <_ZN9USBSerial5writeEh>:
{
   b6748:	b513      	push	{r0, r1, r4, lr}
   b674a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b674c:	7c00      	ldrb	r0, [r0, #16]
{
   b674e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6750:	f7fd fed8 	bl	b4504 <HAL_USB_USART_Available_Data_For_Write>
   b6754:	2800      	cmp	r0, #0
   b6756:	9901      	ldr	r1, [sp, #4]
   b6758:	dc01      	bgt.n	b675e <_ZN9USBSerial5writeEh+0x16>
   b675a:	7c60      	ldrb	r0, [r4, #17]
   b675c:	b120      	cbz	r0, b6768 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b675e:	7c20      	ldrb	r0, [r4, #16]
   b6760:	f7fd fee0 	bl	b4524 <HAL_USB_USART_Send_Data>
   b6764:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6768:	b002      	add	sp, #8
   b676a:	bd10      	pop	{r4, pc}

000b676c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b676c:	7c00      	ldrb	r0, [r0, #16]
   b676e:	f7fd bee1 	b.w	b4534 <HAL_USB_USART_Flush_Data>

000b6772 <_ZN9USBSerialD0Ev>:
   b6772:	b510      	push	{r4, lr}
   b6774:	2114      	movs	r1, #20
   b6776:	4604      	mov	r4, r0
   b6778:	f7fd fc8f 	bl	b409a <_ZdlPvj>
   b677c:	4620      	mov	r0, r4
   b677e:	bd10      	pop	{r4, pc}

000b6780 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6780:	b510      	push	{r4, lr}
   b6782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6786:	4604      	mov	r4, r0
   b6788:	4608      	mov	r0, r1
   b678a:	2100      	movs	r1, #0
   b678c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6790:	4b04      	ldr	r3, [pc, #16]	; (b67a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6792:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6794:	2301      	movs	r3, #1
  _serial = serial;
   b6796:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6798:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b679a:	4611      	mov	r1, r2
   b679c:	f7fd fe92 	bl	b44c4 <HAL_USB_USART_Init>
}
   b67a0:	4620      	mov	r0, r4
   b67a2:	bd10      	pop	{r4, pc}
   b67a4:	000b7044 	.word	0x000b7044

000b67a8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b67a8:	7c00      	ldrb	r0, [r0, #16]
   b67aa:	2200      	movs	r2, #0
   b67ac:	f7fd be92 	b.w	b44d4 <HAL_USB_USART_Begin>

000b67b0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b67b0:	7c00      	ldrb	r0, [r0, #16]
   b67b2:	f7fd be97 	b.w	b44e4 <HAL_USB_USART_End>

000b67b6 <_Z19acquireSerialBufferv>:
{
   b67b6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b67b8:	2214      	movs	r2, #20
{
   b67ba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b67bc:	2100      	movs	r1, #0
   b67be:	f000 f943 	bl	b6a48 <memset>
}
   b67c2:	4620      	mov	r0, r4
   b67c4:	bd10      	pop	{r4, pc}
	...

000b67c8 <_Z16_fetch_usbserialv>:
{
   b67c8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b67ca:	4c0f      	ldr	r4, [pc, #60]	; (b6808 <_Z16_fetch_usbserialv+0x40>)
{
   b67cc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b67ce:	a803      	add	r0, sp, #12
   b67d0:	f7ff fff1 	bl	b67b6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b67d4:	7821      	ldrb	r1, [r4, #0]
   b67d6:	f3bf 8f5b 	dmb	ish
   b67da:	f011 0101 	ands.w	r1, r1, #1
   b67de:	d10f      	bne.n	b6800 <_Z16_fetch_usbserialv+0x38>
   b67e0:	4620      	mov	r0, r4
   b67e2:	9101      	str	r1, [sp, #4]
   b67e4:	f7fd fc68 	bl	b40b8 <__cxa_guard_acquire>
   b67e8:	9901      	ldr	r1, [sp, #4]
   b67ea:	b148      	cbz	r0, b6800 <_Z16_fetch_usbserialv+0x38>
   b67ec:	aa03      	add	r2, sp, #12
   b67ee:	4807      	ldr	r0, [pc, #28]	; (b680c <_Z16_fetch_usbserialv+0x44>)
   b67f0:	f7ff ffc6 	bl	b6780 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b67f4:	4620      	mov	r0, r4
   b67f6:	f7fd fc64 	bl	b40c2 <__cxa_guard_release>
   b67fa:	4805      	ldr	r0, [pc, #20]	; (b6810 <_Z16_fetch_usbserialv+0x48>)
   b67fc:	f000 f8ed 	bl	b69da <atexit>
	return _usbserial;
}
   b6800:	4802      	ldr	r0, [pc, #8]	; (b680c <_Z16_fetch_usbserialv+0x44>)
   b6802:	b008      	add	sp, #32
   b6804:	bd10      	pop	{r4, pc}
   b6806:	bf00      	nop
   b6808:	2003e724 	.word	0x2003e724
   b680c:	2003e728 	.word	0x2003e728
   b6810:	000b6709 	.word	0x000b6709

000b6814 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6814:	4b01      	ldr	r3, [pc, #4]	; (b681c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6816:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6818:	4770      	bx	lr
   b681a:	bf00      	nop
   b681c:	2003e5ec 	.word	0x2003e5ec

000b6820 <serialEventRun>:
{
   b6820:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6822:	4b0b      	ldr	r3, [pc, #44]	; (b6850 <serialEventRun+0x30>)
   b6824:	b143      	cbz	r3, b6838 <serialEventRun+0x18>
   b6826:	f7ff ffcf 	bl	b67c8 <_Z16_fetch_usbserialv>
   b682a:	6803      	ldr	r3, [r0, #0]
   b682c:	691b      	ldr	r3, [r3, #16]
   b682e:	4798      	blx	r3
   b6830:	2800      	cmp	r0, #0
   b6832:	dd01      	ble.n	b6838 <serialEventRun+0x18>
        serialEvent();
   b6834:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6838:	4b06      	ldr	r3, [pc, #24]	; (b6854 <serialEventRun+0x34>)
   b683a:	b143      	cbz	r3, b684e <serialEventRun+0x2e>
   b683c:	f000 f8a2 	bl	b6984 <_Z22__fetch_global_Serial1v>
   b6840:	6803      	ldr	r3, [r0, #0]
   b6842:	691b      	ldr	r3, [r3, #16]
   b6844:	4798      	blx	r3
   b6846:	2800      	cmp	r0, #0
   b6848:	dd01      	ble.n	b684e <serialEventRun+0x2e>
        serialEvent1();
   b684a:	f3af 8000 	nop.w
}
   b684e:	bd08      	pop	{r3, pc}
	...

000b6858 <_post_loop>:
{
   b6858:	b508      	push	{r3, lr}
	serialEventRun();
   b685a:	f7ff ffe1 	bl	b6820 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b685e:	f7fd fdc9 	bl	b43f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6862:	4b01      	ldr	r3, [pc, #4]	; (b6868 <_post_loop+0x10>)
   b6864:	6018      	str	r0, [r3, #0]
}
   b6866:	bd08      	pop	{r3, pc}
   b6868:	2003e744 	.word	0x2003e744

000b686c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b686c:	4805      	ldr	r0, [pc, #20]	; (b6884 <_Z33system_initialize_user_backup_ramv+0x18>)
   b686e:	4a06      	ldr	r2, [pc, #24]	; (b6888 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6870:	4906      	ldr	r1, [pc, #24]	; (b688c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6872:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6874:	1a12      	subs	r2, r2, r0
   b6876:	f000 f8bf 	bl	b69f8 <memcpy>
    __backup_sram_signature = signature;
   b687a:	4b05      	ldr	r3, [pc, #20]	; (b6890 <_Z33system_initialize_user_backup_ramv+0x24>)
   b687c:	4a05      	ldr	r2, [pc, #20]	; (b6894 <_Z33system_initialize_user_backup_ramv+0x28>)
   b687e:	601a      	str	r2, [r3, #0]
}
   b6880:	bd08      	pop	{r3, pc}
   b6882:	bf00      	nop
   b6884:	2003f400 	.word	0x2003f400
   b6888:	2003f404 	.word	0x2003f404
   b688c:	000b7234 	.word	0x000b7234
   b6890:	2003f400 	.word	0x2003f400
   b6894:	9a271c1e 	.word	0x9a271c1e

000b6898 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6898:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b689a:	2300      	movs	r3, #0
   b689c:	9300      	str	r3, [sp, #0]
   b689e:	461a      	mov	r2, r3
   b68a0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b68a4:	f7fd fe98 	bl	b45d8 <system_ctrl_set_result>
}
   b68a8:	b003      	add	sp, #12
   b68aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b68b0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b68b0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b68b2:	8843      	ldrh	r3, [r0, #2]
   b68b4:	2b0a      	cmp	r3, #10
   b68b6:	d008      	beq.n	b68ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b68b8:	2b50      	cmp	r3, #80	; 0x50
   b68ba:	d10b      	bne.n	b68d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b68bc:	4b09      	ldr	r3, [pc, #36]	; (b68e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b68be:	681b      	ldr	r3, [r3, #0]
   b68c0:	b14b      	cbz	r3, b68d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b68c2:	b003      	add	sp, #12
   b68c4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b68c8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b68ca:	f7ff ffe5 	bl	b6898 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b68ce:	b003      	add	sp, #12
   b68d0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b68d4:	2300      	movs	r3, #0
   b68d6:	9300      	str	r3, [sp, #0]
   b68d8:	461a      	mov	r2, r3
   b68da:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b68de:	f7fd fe7b 	bl	b45d8 <system_ctrl_set_result>
}
   b68e2:	e7f4      	b.n	b68ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b68e4:	2003e740 	.word	0x2003e740

000b68e8 <module_user_init_hook>:
{
   b68e8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b68ea:	4812      	ldr	r0, [pc, #72]	; (b6934 <module_user_init_hook+0x4c>)
   b68ec:	2100      	movs	r1, #0
   b68ee:	f7fd ff35 	bl	b475c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b68f2:	4b11      	ldr	r3, [pc, #68]	; (b6938 <module_user_init_hook+0x50>)
   b68f4:	681a      	ldr	r2, [r3, #0]
   b68f6:	4b11      	ldr	r3, [pc, #68]	; (b693c <module_user_init_hook+0x54>)
   b68f8:	429a      	cmp	r2, r3
   b68fa:	4b11      	ldr	r3, [pc, #68]	; (b6940 <module_user_init_hook+0x58>)
   b68fc:	bf0c      	ite	eq
   b68fe:	2201      	moveq	r2, #1
   b6900:	2200      	movne	r2, #0
   b6902:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6904:	d001      	beq.n	b690a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6906:	f7ff ffb1 	bl	b686c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b690a:	f7fd fd63 	bl	b43d4 <HAL_RNG_GetRandomNumber>
   b690e:	4604      	mov	r4, r0
    srand(seed);
   b6910:	f000 f8a2 	bl	b6a58 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6914:	4b0b      	ldr	r3, [pc, #44]	; (b6944 <module_user_init_hook+0x5c>)
   b6916:	b113      	cbz	r3, b691e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6918:	4620      	mov	r0, r4
   b691a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b691e:	2100      	movs	r1, #0
   b6920:	4808      	ldr	r0, [pc, #32]	; (b6944 <module_user_init_hook+0x5c>)
   b6922:	f7fd fe73 	bl	b460c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b692a:	4807      	ldr	r0, [pc, #28]	; (b6948 <module_user_init_hook+0x60>)
   b692c:	2100      	movs	r1, #0
   b692e:	f7fd be49 	b.w	b45c4 <system_ctrl_set_app_request_handler>
   b6932:	bf00      	nop
   b6934:	000b6815 	.word	0x000b6815
   b6938:	2003f400 	.word	0x2003f400
   b693c:	9a271c1e 	.word	0x9a271c1e
   b6940:	2003e73c 	.word	0x2003e73c
   b6944:	00000000 	.word	0x00000000
   b6948:	000b68b1 	.word	0x000b68b1

000b694c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b694c:	4770      	bx	lr
	...

000b6950 <_Z20acquireSerial1Bufferv>:
{
   b6950:	b538      	push	{r3, r4, r5, lr}
   b6952:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6954:	2514      	movs	r5, #20
   b6956:	462a      	mov	r2, r5
   b6958:	2100      	movs	r1, #0
   b695a:	f000 f875 	bl	b6a48 <memset>
   b695e:	8025      	strh	r5, [r4, #0]
   b6960:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6962:	4907      	ldr	r1, [pc, #28]	; (b6980 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6964:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6966:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6968:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b696a:	f000 f831 	bl	b69d0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b696e:	4904      	ldr	r1, [pc, #16]	; (b6980 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6970:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6972:	4628      	mov	r0, r5
   b6974:	f000 f82c 	bl	b69d0 <_ZnajRKSt9nothrow_t>
    };
   b6978:	60e0      	str	r0, [r4, #12]
}
   b697a:	4620      	mov	r0, r4
   b697c:	bd38      	pop	{r3, r4, r5, pc}
   b697e:	bf00      	nop
   b6980:	000b706c 	.word	0x000b706c

000b6984 <_Z22__fetch_global_Serial1v>:
{
   b6984:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6986:	4d0e      	ldr	r5, [pc, #56]	; (b69c0 <_Z22__fetch_global_Serial1v+0x3c>)
   b6988:	7829      	ldrb	r1, [r5, #0]
   b698a:	f3bf 8f5b 	dmb	ish
   b698e:	f011 0401 	ands.w	r4, r1, #1
{
   b6992:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6994:	d111      	bne.n	b69ba <_Z22__fetch_global_Serial1v+0x36>
   b6996:	4628      	mov	r0, r5
   b6998:	f7fd fb8e 	bl	b40b8 <__cxa_guard_acquire>
   b699c:	b168      	cbz	r0, b69ba <_Z22__fetch_global_Serial1v+0x36>
   b699e:	a801      	add	r0, sp, #4
   b69a0:	f7ff ffd6 	bl	b6950 <_Z20acquireSerial1Bufferv>
   b69a4:	aa01      	add	r2, sp, #4
   b69a6:	4621      	mov	r1, r4
   b69a8:	4806      	ldr	r0, [pc, #24]	; (b69c4 <_Z22__fetch_global_Serial1v+0x40>)
   b69aa:	f7ff fe8d 	bl	b66c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b69ae:	4628      	mov	r0, r5
   b69b0:	f7fd fb87 	bl	b40c2 <__cxa_guard_release>
   b69b4:	4804      	ldr	r0, [pc, #16]	; (b69c8 <_Z22__fetch_global_Serial1v+0x44>)
   b69b6:	f000 f810 	bl	b69da <atexit>
    return serial1;
}
   b69ba:	4802      	ldr	r0, [pc, #8]	; (b69c4 <_Z22__fetch_global_Serial1v+0x40>)
   b69bc:	b007      	add	sp, #28
   b69be:	bd30      	pop	{r4, r5, pc}
   b69c0:	2003e748 	.word	0x2003e748
   b69c4:	2003e74c 	.word	0x2003e74c
   b69c8:	000b694d 	.word	0x000b694d

000b69cc <_ZnwjRKSt9nothrow_t>:
   b69cc:	f7fd bb61 	b.w	b4092 <_Znwj>

000b69d0 <_ZnajRKSt9nothrow_t>:
   b69d0:	f7fd bb61 	b.w	b4096 <_Znaj>

000b69d4 <_ZSt25__throw_bad_function_callv>:
   b69d4:	b508      	push	{r3, lr}
   b69d6:	f7fd fea1 	bl	b471c <abort>

000b69da <atexit>:
   b69da:	2300      	movs	r3, #0
   b69dc:	4601      	mov	r1, r0
   b69de:	461a      	mov	r2, r3
   b69e0:	4618      	mov	r0, r3
   b69e2:	f000 b96b 	b.w	b6cbc <__register_exitproc>
	...

000b69e8 <isprint>:
   b69e8:	4b02      	ldr	r3, [pc, #8]	; (b69f4 <isprint+0xc>)
   b69ea:	4418      	add	r0, r3
   b69ec:	7840      	ldrb	r0, [r0, #1]
   b69ee:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b69f2:	4770      	bx	lr
   b69f4:	000b70dd 	.word	0x000b70dd

000b69f8 <memcpy>:
   b69f8:	440a      	add	r2, r1
   b69fa:	4291      	cmp	r1, r2
   b69fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6a00:	d100      	bne.n	b6a04 <memcpy+0xc>
   b6a02:	4770      	bx	lr
   b6a04:	b510      	push	{r4, lr}
   b6a06:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6a0a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6a0e:	4291      	cmp	r1, r2
   b6a10:	d1f9      	bne.n	b6a06 <memcpy+0xe>
   b6a12:	bd10      	pop	{r4, pc}

000b6a14 <memmove>:
   b6a14:	4288      	cmp	r0, r1
   b6a16:	b510      	push	{r4, lr}
   b6a18:	eb01 0402 	add.w	r4, r1, r2
   b6a1c:	d902      	bls.n	b6a24 <memmove+0x10>
   b6a1e:	4284      	cmp	r4, r0
   b6a20:	4623      	mov	r3, r4
   b6a22:	d807      	bhi.n	b6a34 <memmove+0x20>
   b6a24:	1e43      	subs	r3, r0, #1
   b6a26:	42a1      	cmp	r1, r4
   b6a28:	d008      	beq.n	b6a3c <memmove+0x28>
   b6a2a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6a2e:	f803 2f01 	strb.w	r2, [r3, #1]!
   b6a32:	e7f8      	b.n	b6a26 <memmove+0x12>
   b6a34:	4402      	add	r2, r0
   b6a36:	4601      	mov	r1, r0
   b6a38:	428a      	cmp	r2, r1
   b6a3a:	d100      	bne.n	b6a3e <memmove+0x2a>
   b6a3c:	bd10      	pop	{r4, pc}
   b6a3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b6a42:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b6a46:	e7f7      	b.n	b6a38 <memmove+0x24>

000b6a48 <memset>:
   b6a48:	4402      	add	r2, r0
   b6a4a:	4603      	mov	r3, r0
   b6a4c:	4293      	cmp	r3, r2
   b6a4e:	d100      	bne.n	b6a52 <memset+0xa>
   b6a50:	4770      	bx	lr
   b6a52:	f803 1b01 	strb.w	r1, [r3], #1
   b6a56:	e7f9      	b.n	b6a4c <memset+0x4>

000b6a58 <srand>:
   b6a58:	b538      	push	{r3, r4, r5, lr}
   b6a5a:	4b10      	ldr	r3, [pc, #64]	; (b6a9c <srand+0x44>)
   b6a5c:	681d      	ldr	r5, [r3, #0]
   b6a5e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6a60:	4604      	mov	r4, r0
   b6a62:	b9b3      	cbnz	r3, b6a92 <srand+0x3a>
   b6a64:	2018      	movs	r0, #24
   b6a66:	f7fd fe39 	bl	b46dc <malloc>
   b6a6a:	4602      	mov	r2, r0
   b6a6c:	63a8      	str	r0, [r5, #56]	; 0x38
   b6a6e:	b920      	cbnz	r0, b6a7a <srand+0x22>
   b6a70:	4b0b      	ldr	r3, [pc, #44]	; (b6aa0 <srand+0x48>)
   b6a72:	480c      	ldr	r0, [pc, #48]	; (b6aa4 <srand+0x4c>)
   b6a74:	2142      	movs	r1, #66	; 0x42
   b6a76:	f7fd fe69 	bl	b474c <__assert_func>
   b6a7a:	490b      	ldr	r1, [pc, #44]	; (b6aa8 <srand+0x50>)
   b6a7c:	4b0b      	ldr	r3, [pc, #44]	; (b6aac <srand+0x54>)
   b6a7e:	e9c0 1300 	strd	r1, r3, [r0]
   b6a82:	4b0b      	ldr	r3, [pc, #44]	; (b6ab0 <srand+0x58>)
   b6a84:	6083      	str	r3, [r0, #8]
   b6a86:	230b      	movs	r3, #11
   b6a88:	8183      	strh	r3, [r0, #12]
   b6a8a:	2100      	movs	r1, #0
   b6a8c:	2001      	movs	r0, #1
   b6a8e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6a92:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6a94:	2200      	movs	r2, #0
   b6a96:	611c      	str	r4, [r3, #16]
   b6a98:	615a      	str	r2, [r3, #20]
   b6a9a:	bd38      	pop	{r3, r4, r5, pc}
   b6a9c:	2003e5ec 	.word	0x2003e5ec
   b6aa0:	000b706d 	.word	0x000b706d
   b6aa4:	000b7084 	.word	0x000b7084
   b6aa8:	abcd330e 	.word	0xabcd330e
   b6aac:	e66d1234 	.word	0xe66d1234
   b6ab0:	0005deec 	.word	0x0005deec

000b6ab4 <strchr>:
   b6ab4:	b2c9      	uxtb	r1, r1
   b6ab6:	4603      	mov	r3, r0
   b6ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6abc:	b11a      	cbz	r2, b6ac6 <strchr+0x12>
   b6abe:	428a      	cmp	r2, r1
   b6ac0:	d1f9      	bne.n	b6ab6 <strchr+0x2>
   b6ac2:	4618      	mov	r0, r3
   b6ac4:	4770      	bx	lr
   b6ac6:	2900      	cmp	r1, #0
   b6ac8:	bf18      	it	ne
   b6aca:	2300      	movne	r3, #0
   b6acc:	e7f9      	b.n	b6ac2 <strchr+0xe>

000b6ace <strchrnul>:
   b6ace:	b510      	push	{r4, lr}
   b6ad0:	4604      	mov	r4, r0
   b6ad2:	f7ff ffef 	bl	b6ab4 <strchr>
   b6ad6:	b918      	cbnz	r0, b6ae0 <strchrnul+0x12>
   b6ad8:	4620      	mov	r0, r4
   b6ada:	f000 f832 	bl	b6b42 <strlen>
   b6ade:	4420      	add	r0, r4
   b6ae0:	bd10      	pop	{r4, pc}

000b6ae2 <strcmp>:
   b6ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6aea:	2a01      	cmp	r2, #1
   b6aec:	bf28      	it	cs
   b6aee:	429a      	cmpcs	r2, r3
   b6af0:	d0f7      	beq.n	b6ae2 <strcmp>
   b6af2:	1ad0      	subs	r0, r2, r3
   b6af4:	4770      	bx	lr

000b6af6 <strcpy>:
   b6af6:	4603      	mov	r3, r0
   b6af8:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6afc:	f803 2b01 	strb.w	r2, [r3], #1
   b6b00:	2a00      	cmp	r2, #0
   b6b02:	d1f9      	bne.n	b6af8 <strcpy+0x2>
   b6b04:	4770      	bx	lr
	...

000b6b08 <strdup>:
   b6b08:	4b02      	ldr	r3, [pc, #8]	; (b6b14 <strdup+0xc>)
   b6b0a:	4601      	mov	r1, r0
   b6b0c:	6818      	ldr	r0, [r3, #0]
   b6b0e:	f000 b803 	b.w	b6b18 <_strdup_r>
   b6b12:	bf00      	nop
   b6b14:	2003e5ec 	.word	0x2003e5ec

000b6b18 <_strdup_r>:
   b6b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6b1a:	4604      	mov	r4, r0
   b6b1c:	4608      	mov	r0, r1
   b6b1e:	460d      	mov	r5, r1
   b6b20:	f000 f80f 	bl	b6b42 <strlen>
   b6b24:	1c42      	adds	r2, r0, #1
   b6b26:	4611      	mov	r1, r2
   b6b28:	4620      	mov	r0, r4
   b6b2a:	9201      	str	r2, [sp, #4]
   b6b2c:	f7fd fdfe 	bl	b472c <_malloc_r>
   b6b30:	4604      	mov	r4, r0
   b6b32:	b118      	cbz	r0, b6b3c <_strdup_r+0x24>
   b6b34:	9a01      	ldr	r2, [sp, #4]
   b6b36:	4629      	mov	r1, r5
   b6b38:	f7ff ff5e 	bl	b69f8 <memcpy>
   b6b3c:	4620      	mov	r0, r4
   b6b3e:	b003      	add	sp, #12
   b6b40:	bd30      	pop	{r4, r5, pc}

000b6b42 <strlen>:
   b6b42:	4603      	mov	r3, r0
   b6b44:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6b48:	2a00      	cmp	r2, #0
   b6b4a:	d1fb      	bne.n	b6b44 <strlen+0x2>
   b6b4c:	1a18      	subs	r0, r3, r0
   b6b4e:	3801      	subs	r0, #1
   b6b50:	4770      	bx	lr

000b6b52 <strncmp>:
   b6b52:	b510      	push	{r4, lr}
   b6b54:	b17a      	cbz	r2, b6b76 <strncmp+0x24>
   b6b56:	4603      	mov	r3, r0
   b6b58:	3901      	subs	r1, #1
   b6b5a:	1884      	adds	r4, r0, r2
   b6b5c:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6b60:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6b64:	4290      	cmp	r0, r2
   b6b66:	d101      	bne.n	b6b6c <strncmp+0x1a>
   b6b68:	42a3      	cmp	r3, r4
   b6b6a:	d101      	bne.n	b6b70 <strncmp+0x1e>
   b6b6c:	1a80      	subs	r0, r0, r2
   b6b6e:	bd10      	pop	{r4, pc}
   b6b70:	2800      	cmp	r0, #0
   b6b72:	d1f3      	bne.n	b6b5c <strncmp+0xa>
   b6b74:	e7fa      	b.n	b6b6c <strncmp+0x1a>
   b6b76:	4610      	mov	r0, r2
   b6b78:	e7f9      	b.n	b6b6e <strncmp+0x1c>

000b6b7a <strrchr>:
   b6b7a:	b538      	push	{r3, r4, r5, lr}
   b6b7c:	4603      	mov	r3, r0
   b6b7e:	460c      	mov	r4, r1
   b6b80:	b969      	cbnz	r1, b6b9e <strrchr+0x24>
   b6b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6b86:	f7ff bf95 	b.w	b6ab4 <strchr>
   b6b8a:	1c43      	adds	r3, r0, #1
   b6b8c:	4605      	mov	r5, r0
   b6b8e:	4621      	mov	r1, r4
   b6b90:	4618      	mov	r0, r3
   b6b92:	f7ff ff8f 	bl	b6ab4 <strchr>
   b6b96:	2800      	cmp	r0, #0
   b6b98:	d1f7      	bne.n	b6b8a <strrchr+0x10>
   b6b9a:	4628      	mov	r0, r5
   b6b9c:	bd38      	pop	{r3, r4, r5, pc}
   b6b9e:	2500      	movs	r5, #0
   b6ba0:	e7f5      	b.n	b6b8e <strrchr+0x14>
	...

000b6ba4 <_strtol_l.constprop.0>:
   b6ba4:	2b01      	cmp	r3, #1
   b6ba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6baa:	d001      	beq.n	b6bb0 <_strtol_l.constprop.0+0xc>
   b6bac:	2b24      	cmp	r3, #36	; 0x24
   b6bae:	d906      	bls.n	b6bbe <_strtol_l.constprop.0+0x1a>
   b6bb0:	f7fd fdc4 	bl	b473c <__errno>
   b6bb4:	2316      	movs	r3, #22
   b6bb6:	6003      	str	r3, [r0, #0]
   b6bb8:	2000      	movs	r0, #0
   b6bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6bbe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b6ca4 <_strtol_l.constprop.0+0x100>
   b6bc2:	460d      	mov	r5, r1
   b6bc4:	462e      	mov	r6, r5
   b6bc6:	f815 4b01 	ldrb.w	r4, [r5], #1
   b6bca:	f814 700c 	ldrb.w	r7, [r4, ip]
   b6bce:	f017 0708 	ands.w	r7, r7, #8
   b6bd2:	d1f7      	bne.n	b6bc4 <_strtol_l.constprop.0+0x20>
   b6bd4:	2c2d      	cmp	r4, #45	; 0x2d
   b6bd6:	d132      	bne.n	b6c3e <_strtol_l.constprop.0+0x9a>
   b6bd8:	782c      	ldrb	r4, [r5, #0]
   b6bda:	2701      	movs	r7, #1
   b6bdc:	1cb5      	adds	r5, r6, #2
   b6bde:	2b00      	cmp	r3, #0
   b6be0:	d05b      	beq.n	b6c9a <_strtol_l.constprop.0+0xf6>
   b6be2:	2b10      	cmp	r3, #16
   b6be4:	d109      	bne.n	b6bfa <_strtol_l.constprop.0+0x56>
   b6be6:	2c30      	cmp	r4, #48	; 0x30
   b6be8:	d107      	bne.n	b6bfa <_strtol_l.constprop.0+0x56>
   b6bea:	782c      	ldrb	r4, [r5, #0]
   b6bec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b6bf0:	2c58      	cmp	r4, #88	; 0x58
   b6bf2:	d14d      	bne.n	b6c90 <_strtol_l.constprop.0+0xec>
   b6bf4:	786c      	ldrb	r4, [r5, #1]
   b6bf6:	2310      	movs	r3, #16
   b6bf8:	3502      	adds	r5, #2
   b6bfa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b6bfe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6c02:	f04f 0c00 	mov.w	ip, #0
   b6c06:	fbb8 f9f3 	udiv	r9, r8, r3
   b6c0a:	4666      	mov	r6, ip
   b6c0c:	fb03 8a19 	mls	sl, r3, r9, r8
   b6c10:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b6c14:	f1be 0f09 	cmp.w	lr, #9
   b6c18:	d816      	bhi.n	b6c48 <_strtol_l.constprop.0+0xa4>
   b6c1a:	4674      	mov	r4, lr
   b6c1c:	42a3      	cmp	r3, r4
   b6c1e:	dd24      	ble.n	b6c6a <_strtol_l.constprop.0+0xc6>
   b6c20:	f1bc 0f00 	cmp.w	ip, #0
   b6c24:	db1e      	blt.n	b6c64 <_strtol_l.constprop.0+0xc0>
   b6c26:	45b1      	cmp	r9, r6
   b6c28:	d31c      	bcc.n	b6c64 <_strtol_l.constprop.0+0xc0>
   b6c2a:	d101      	bne.n	b6c30 <_strtol_l.constprop.0+0x8c>
   b6c2c:	45a2      	cmp	sl, r4
   b6c2e:	db19      	blt.n	b6c64 <_strtol_l.constprop.0+0xc0>
   b6c30:	fb06 4603 	mla	r6, r6, r3, r4
   b6c34:	f04f 0c01 	mov.w	ip, #1
   b6c38:	f815 4b01 	ldrb.w	r4, [r5], #1
   b6c3c:	e7e8      	b.n	b6c10 <_strtol_l.constprop.0+0x6c>
   b6c3e:	2c2b      	cmp	r4, #43	; 0x2b
   b6c40:	bf04      	itt	eq
   b6c42:	782c      	ldrbeq	r4, [r5, #0]
   b6c44:	1cb5      	addeq	r5, r6, #2
   b6c46:	e7ca      	b.n	b6bde <_strtol_l.constprop.0+0x3a>
   b6c48:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b6c4c:	f1be 0f19 	cmp.w	lr, #25
   b6c50:	d801      	bhi.n	b6c56 <_strtol_l.constprop.0+0xb2>
   b6c52:	3c37      	subs	r4, #55	; 0x37
   b6c54:	e7e2      	b.n	b6c1c <_strtol_l.constprop.0+0x78>
   b6c56:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b6c5a:	f1be 0f19 	cmp.w	lr, #25
   b6c5e:	d804      	bhi.n	b6c6a <_strtol_l.constprop.0+0xc6>
   b6c60:	3c57      	subs	r4, #87	; 0x57
   b6c62:	e7db      	b.n	b6c1c <_strtol_l.constprop.0+0x78>
   b6c64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b6c68:	e7e6      	b.n	b6c38 <_strtol_l.constprop.0+0x94>
   b6c6a:	f1bc 0f00 	cmp.w	ip, #0
   b6c6e:	da05      	bge.n	b6c7c <_strtol_l.constprop.0+0xd8>
   b6c70:	2322      	movs	r3, #34	; 0x22
   b6c72:	6003      	str	r3, [r0, #0]
   b6c74:	4646      	mov	r6, r8
   b6c76:	b942      	cbnz	r2, b6c8a <_strtol_l.constprop.0+0xe6>
   b6c78:	4630      	mov	r0, r6
   b6c7a:	e79e      	b.n	b6bba <_strtol_l.constprop.0+0x16>
   b6c7c:	b107      	cbz	r7, b6c80 <_strtol_l.constprop.0+0xdc>
   b6c7e:	4276      	negs	r6, r6
   b6c80:	2a00      	cmp	r2, #0
   b6c82:	d0f9      	beq.n	b6c78 <_strtol_l.constprop.0+0xd4>
   b6c84:	f1bc 0f00 	cmp.w	ip, #0
   b6c88:	d000      	beq.n	b6c8c <_strtol_l.constprop.0+0xe8>
   b6c8a:	1e69      	subs	r1, r5, #1
   b6c8c:	6011      	str	r1, [r2, #0]
   b6c8e:	e7f3      	b.n	b6c78 <_strtol_l.constprop.0+0xd4>
   b6c90:	2430      	movs	r4, #48	; 0x30
   b6c92:	2b00      	cmp	r3, #0
   b6c94:	d1b1      	bne.n	b6bfa <_strtol_l.constprop.0+0x56>
   b6c96:	2308      	movs	r3, #8
   b6c98:	e7af      	b.n	b6bfa <_strtol_l.constprop.0+0x56>
   b6c9a:	2c30      	cmp	r4, #48	; 0x30
   b6c9c:	d0a5      	beq.n	b6bea <_strtol_l.constprop.0+0x46>
   b6c9e:	230a      	movs	r3, #10
   b6ca0:	e7ab      	b.n	b6bfa <_strtol_l.constprop.0+0x56>
   b6ca2:	bf00      	nop
   b6ca4:	000b70de 	.word	0x000b70de

000b6ca8 <strtol>:
   b6ca8:	4613      	mov	r3, r2
   b6caa:	460a      	mov	r2, r1
   b6cac:	4601      	mov	r1, r0
   b6cae:	4802      	ldr	r0, [pc, #8]	; (b6cb8 <strtol+0x10>)
   b6cb0:	6800      	ldr	r0, [r0, #0]
   b6cb2:	f7ff bf77 	b.w	b6ba4 <_strtol_l.constprop.0>
   b6cb6:	bf00      	nop
   b6cb8:	2003e5ec 	.word	0x2003e5ec

000b6cbc <__register_exitproc>:
   b6cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6cc0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6d7c <__register_exitproc+0xc0>
   b6cc4:	4606      	mov	r6, r0
   b6cc6:	f8d8 0000 	ldr.w	r0, [r8]
   b6cca:	461f      	mov	r7, r3
   b6ccc:	460d      	mov	r5, r1
   b6cce:	4691      	mov	r9, r2
   b6cd0:	f000 f856 	bl	b6d80 <__retarget_lock_acquire_recursive>
   b6cd4:	4b25      	ldr	r3, [pc, #148]	; (b6d6c <__register_exitproc+0xb0>)
   b6cd6:	681c      	ldr	r4, [r3, #0]
   b6cd8:	b934      	cbnz	r4, b6ce8 <__register_exitproc+0x2c>
   b6cda:	4c25      	ldr	r4, [pc, #148]	; (b6d70 <__register_exitproc+0xb4>)
   b6cdc:	601c      	str	r4, [r3, #0]
   b6cde:	4b25      	ldr	r3, [pc, #148]	; (b6d74 <__register_exitproc+0xb8>)
   b6ce0:	b113      	cbz	r3, b6ce8 <__register_exitproc+0x2c>
   b6ce2:	681b      	ldr	r3, [r3, #0]
   b6ce4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6ce8:	6863      	ldr	r3, [r4, #4]
   b6cea:	2b1f      	cmp	r3, #31
   b6cec:	dd07      	ble.n	b6cfe <__register_exitproc+0x42>
   b6cee:	f8d8 0000 	ldr.w	r0, [r8]
   b6cf2:	f000 f847 	bl	b6d84 <__retarget_lock_release_recursive>
   b6cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6cfe:	b34e      	cbz	r6, b6d54 <__register_exitproc+0x98>
   b6d00:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6d04:	b988      	cbnz	r0, b6d2a <__register_exitproc+0x6e>
   b6d06:	4b1c      	ldr	r3, [pc, #112]	; (b6d78 <__register_exitproc+0xbc>)
   b6d08:	b923      	cbnz	r3, b6d14 <__register_exitproc+0x58>
   b6d0a:	f8d8 0000 	ldr.w	r0, [r8]
   b6d0e:	f000 f838 	bl	b6d82 <__retarget_lock_release>
   b6d12:	e7f0      	b.n	b6cf6 <__register_exitproc+0x3a>
   b6d14:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6d18:	f7fd fce0 	bl	b46dc <malloc>
   b6d1c:	2800      	cmp	r0, #0
   b6d1e:	d0f4      	beq.n	b6d0a <__register_exitproc+0x4e>
   b6d20:	2300      	movs	r3, #0
   b6d22:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6d26:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6d2a:	6863      	ldr	r3, [r4, #4]
   b6d2c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6d30:	2201      	movs	r2, #1
   b6d32:	409a      	lsls	r2, r3
   b6d34:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6d38:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6d3c:	4313      	orrs	r3, r2
   b6d3e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6d42:	2e02      	cmp	r6, #2
   b6d44:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6d48:	bf02      	ittt	eq
   b6d4a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6d4e:	4313      	orreq	r3, r2
   b6d50:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6d54:	6863      	ldr	r3, [r4, #4]
   b6d56:	f8d8 0000 	ldr.w	r0, [r8]
   b6d5a:	1c5a      	adds	r2, r3, #1
   b6d5c:	3302      	adds	r3, #2
   b6d5e:	6062      	str	r2, [r4, #4]
   b6d60:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6d64:	f000 f80e 	bl	b6d84 <__retarget_lock_release_recursive>
   b6d68:	2000      	movs	r0, #0
   b6d6a:	e7c6      	b.n	b6cfa <__register_exitproc+0x3e>
   b6d6c:	2003e7ec 	.word	0x2003e7ec
   b6d70:	2003e760 	.word	0x2003e760
   b6d74:	00000000 	.word	0x00000000
   b6d78:	000b46dd 	.word	0x000b46dd
   b6d7c:	2003e650 	.word	0x2003e650

000b6d80 <__retarget_lock_acquire_recursive>:
   b6d80:	4770      	bx	lr

000b6d82 <__retarget_lock_release>:
   b6d82:	4770      	bx	lr

000b6d84 <__retarget_lock_release_recursive>:
   b6d84:	4770      	bx	lr

000b6d86 <link_code_end>:
	...

000b6d88 <dynalib_user>:
   b6d88:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6d98:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b6da8:	7620 7269 7574 6c61 2500 0064 7570 6c62      virtual.%d.publ
   b6db8:	7369 6568 2064 7325 6e00 746f 6320 6f6c     ished %s.not clo
   b6dc8:	6475 6320 6e6f 656e 7463 6465 2520 0073     ud connected %s.

000b6dd8 <_ZTVN5spark10LogHandlerE>:
	...
   b6de8:	40a1 000b 40c9 000b                         .@...@..

000b6df0 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b6df8:	40d5 000b 4109 000b 5eed 000b 40cb 000b     .@...A...^...@..
   b6e08:	6f63 6e75 6574 4572 6576 746e 0000 0000     counterEvent....

000b6e18 <_ZTVN5spark13CellularClassE>:
	...
   b6e20:	4897 000b 488d 000b 4883 000b 4839 000b     .H...H...H..9H..
   b6e30:	4877 000b 486b 000b 6245 000b 624d 000b     wH..kH..Eb..Mb..
   b6e40:	485f 000b 4857 000b 484d 000b 4843 000b     _H..WH..MH..CH..
   b6e50:	627d 000b                                   }b..

000b6e54 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6e5c:	48d1 000b 48d7 000b 4915 000b 48e5 000b     .H...H...I...H..
   b6e6c:	48d3 000b                                   .H..

000b6e70 <_ZTVN5spark13EthernetClassE>:
	...
   b6e78:	4e5f 000b 4e55 000b 4e4b 000b 4e41 000b     _N..UN..KN..AN..
   b6e88:	4e35 000b 4e29 000b 6245 000b 624d 000b     5N..)N..Eb..Mb..
   b6e98:	4e1d 000b 4e15 000b 4e0b 000b 4e01 000b     .N...N...N...N..
   b6ea8:	627d 000b                                   }b..

000b6eac <_ZTV9IPAddress>:
	...
   b6eb4:	4e8d 000b 4e7d 000b 4e7f 000b 7525 7500     .N..}N...N..%u.u
   b6ec4:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   b6ed4:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   b6ee4:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   b6ef4:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   b6f04:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   b6f14:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   b6f24:	006d 0066 6e6c 6600 006e 6f63 6564 6400     m.f.ln.fn.code.d
   b6f34:	7465 6961 006c 0000                         etail...

000b6f3c <_ZTVN5spark16JSONStreamWriterE>:
	...
   b6f44:	5339 000b 535f 000b 531d 000b 4f9b 000b     9S.._S...S...O..

000b6f54 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b6f5c:	5795 000b 57ad 000b 5eed 000b 40cb 000b     .W...W...^...@..

000b6f6c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b6f74:	57c1 000b 57d5 000b 6091 000b 5325 000b     .W...W...`..%S..

000b6f84 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b6f8c:	5337 000b 536d 000b 5e51 000b 5327 000b     7S..mS..Q^..'S..

000b6f9c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b6fa4:	5335 000b 537b 000b 56fd 000b 539d 000b     5S..{S...V...S..

000b6fb4 <_ZTVN5spark12NetworkClassE>:
	...
   b6fbc:	6205 000b 620f 000b 6219 000b 6223 000b     .b...b...b..#b..
   b6fcc:	622d 000b 6239 000b 6245 000b 624d 000b     -b..9b..Eb..Mb..
   b6fdc:	6255 000b 6261 000b 6269 000b 6273 000b     Ub..ab..ib..sb..
   b6fec:	627d 000b 5925 252d 2d6d 6425 2554 3a48     }b..%Y-%m-%dT%H:
   b6ffc:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b700c <_ZTV11USARTSerial>:
	...
   b7014:	664d 000b 66b9 000b 6691 000b 6369 000b     Mf...f...f..ic..
   b7024:	6661 000b 667d 000b 666f 000b 668b 000b     af..}f..of...f..
   b7034:	664f 000b 6653 000b                         Of..Sf..

000b703c <_ZTV9USBSerial>:
	...
   b7044:	670b 000b 6773 000b 6749 000b 6369 000b     .g..sg..Ig..ic..
   b7054:	673b 000b 670d 000b 671d 000b 676d 000b     ;g...g...g..mg..
   b7064:	672d 000b 6705 000b                         -g...g..

000b706c <_ZSt7nothrow>:
   b706c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b707c:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b708c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b709c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b70ac:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b70bc:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b70cc:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b70dd <_ctype_>:
   b70dd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b70ed:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b70fd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b710d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b711d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b712d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b713d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b714d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b715d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b71de <link_const_variable_data_end>:
	...

000b71e0 <link_constructors_location>:
   b71e0:	000b42f9 	.word	0x000b42f9
   b71e4:	000b4829 	.word	0x000b4829
   b71e8:	000b48a1 	.word	0x000b48a1
   b71ec:	000b4e69 	.word	0x000b4e69
   b71f0:	000b5edd 	.word	0x000b5edd
   b71f4:	000b6355 	.word	0x000b6355
   b71f8:	000b6475 	.word	0x000b6475
   b71fc:	000b6615 	.word	0x000b6615
   b7200:	000b6639 	.word	0x000b6639

000b7204 <link_constructors_end>:
	...
